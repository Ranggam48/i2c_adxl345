
i2c_adxl345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f60  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08006070  08006070  00016070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064ac  080064ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080064ac  080064ac  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064ac  080064ac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064ac  080064ac  000164ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064b0  080064b0  000164b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080064b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  200001dc  08006690  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08006690  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007093  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001648  00000000  00000000  00027298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  000288e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000720  00000000  00000000  000290a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017915  00000000  00000000  000297c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096eb  00000000  00000000  000410d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008339c  00000000  00000000  0004a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cdb5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003064  00000000  00000000  000cdbac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006058 	.word	0x08006058

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006058 	.word	0x08006058

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	f023 030f 	bic.w	r3, r3, #15
 8000b38:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	011b      	lsls	r3, r3, #4
 8000b3e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	f043 030c 	orr.w	r3, r3, #12
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000b54:	7bbb      	ldrb	r3, [r7, #14]
 8000b56:	f043 030c 	orr.w	r3, r3, #12
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000b5e:	7bbb      	ldrb	r3, [r7, #14]
 8000b60:	f043 0308 	orr.w	r3, r3, #8
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b68:	f107 0208 	add.w	r2, r7, #8
 8000b6c:	2364      	movs	r3, #100	; 0x64
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2304      	movs	r3, #4
 8000b72:	214e      	movs	r1, #78	; 0x4e
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <lcd_send_cmd+0x5c>)
 8000b76:	f001 f89d 	bl	8001cb4 <HAL_I2C_Master_Transmit>
}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200001f8 	.word	0x200001f8

08000b88 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af02      	add	r7, sp, #8
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f023 030f 	bic.w	r3, r3, #15
 8000b98:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	011b      	lsls	r3, r3, #4
 8000b9e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	f043 030d 	orr.w	r3, r3, #13
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	f043 0309 	orr.w	r3, r3, #9
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000bb4:	7bbb      	ldrb	r3, [r7, #14]
 8000bb6:	f043 030d 	orr.w	r3, r3, #13
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000bbe:	7bbb      	ldrb	r3, [r7, #14]
 8000bc0:	f043 0309 	orr.w	r3, r3, #9
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000bc8:	f107 0208 	add.w	r2, r7, #8
 8000bcc:	2364      	movs	r3, #100	; 0x64
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	214e      	movs	r1, #78	; 0x4e
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <lcd_send_data+0x5c>)
 8000bd6:	f001 f86d 	bl	8001cb4 <HAL_I2C_Master_Transmit>
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200001f8 	.word	0x200001f8

08000be8 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000bec:	2032      	movs	r0, #50	; 0x32
 8000bee:	f000 fc79 	bl	80014e4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000bf2:	2030      	movs	r0, #48	; 0x30
 8000bf4:	f7ff ff98 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000bf8:	2005      	movs	r0, #5
 8000bfa:	f000 fc73 	bl	80014e4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000bfe:	2030      	movs	r0, #48	; 0x30
 8000c00:	f7ff ff92 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000c04:	2001      	movs	r0, #1
 8000c06:	f000 fc6d 	bl	80014e4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c0a:	2030      	movs	r0, #48	; 0x30
 8000c0c:	f7ff ff8c 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(10);
 8000c10:	200a      	movs	r0, #10
 8000c12:	f000 fc67 	bl	80014e4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000c16:	2020      	movs	r0, #32
 8000c18:	f7ff ff86 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(10);
 8000c1c:	200a      	movs	r0, #10
 8000c1e:	f000 fc61 	bl	80014e4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000c22:	2028      	movs	r0, #40	; 0x28
 8000c24:	f7ff ff80 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(1);
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f000 fc5b 	bl	80014e4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000c2e:	2008      	movs	r0, #8
 8000c30:	f7ff ff7a 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(1);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 fc55 	bl	80014e4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff ff74 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(1);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f000 fc4f 	bl	80014e4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000c46:	2006      	movs	r0, #6
 8000c48:	f7ff ff6e 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(1);
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f000 fc49 	bl	80014e4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000c52:	200c      	movs	r0, #12
 8000c54:	f7ff ff68 	bl	8000b28 <lcd_send_cmd>
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000c64:	e006      	b.n	8000c74 <lcd_send_string+0x18>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	1c5a      	adds	r2, r3, #1
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff8a 	bl	8000b88 <lcd_send_data>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1f4      	bne.n	8000c66 <lcd_send_string+0xa>
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <lcd_send_float>:
void lcd_send_float (float data, int numberofdigits)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af02      	add	r7, sp, #8
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
	char xg_char[12];
	snprintf (xg_char, 8, "%f", data);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fbc8 	bl	8000428 <__aeabi_f2d>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	f107 0008 	add.w	r0, r7, #8
 8000ca0:	e9cd 2300 	strd	r2, r3, [sp]
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <lcd_send_float+0x54>)
 8000ca6:	2108      	movs	r1, #8
 8000ca8:	f002 ff48 	bl	8003b3c <sniprintf>
	for (int i=0; i<numberofdigits; i++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	e00a      	b.n	8000cc8 <lcd_send_float+0x40>
	{
		lcd_send_data (xg_char[i]);
 8000cb2:	f107 0208 	add.w	r2, r7, #8
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	4413      	add	r3, r2
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff63 	bl	8000b88 <lcd_send_data>
	for (int i=0; i<numberofdigits; i++)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbf0      	blt.n	8000cb2 <lcd_send_float+0x2a>
	}
}
 8000cd0:	bf00      	nop
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	08006070 	.word	0x08006070

08000ce0 <adxl_write>:


/*-------write data-------*/

void adxl_write(uint8_t reg, uint8_t value)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af02      	add	r7, sp, #8
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	460a      	mov	r2, r1
 8000cea:	71fb      	strb	r3, [r7, #7]
 8000cec:	4613      	mov	r3, r2
 8000cee:	71bb      	strb	r3, [r7, #6]
	  uint8_t data[2];
	  data[0] = reg;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	733b      	strb	r3, [r7, #12]
	  data[1] = value;
 8000cf4:	79bb      	ldrb	r3, [r7, #6]
 8000cf6:	737b      	strb	r3, [r7, #13]
	  HAL_I2C_Master_Transmit(&hi2c1, adxl_address, data, 2, 10);
 8000cf8:	f107 020c 	add.w	r2, r7, #12
 8000cfc:	230a      	movs	r3, #10
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2302      	movs	r3, #2
 8000d02:	21a6      	movs	r1, #166	; 0xa6
 8000d04:	4803      	ldr	r0, [pc, #12]	; (8000d14 <adxl_write+0x34>)
 8000d06:	f000 ffd5 	bl	8001cb4 <HAL_I2C_Master_Transmit>
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200001f8 	.word	0x200001f8

08000d18 <adxl_read_values>:


/*-------read data-------*/

void adxl_read_values(uint8_t reg)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af04      	add	r7, sp, #16
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
	  HAL_I2C_Mem_Read(&hi2c1, adxl_address, reg, 1, (uint8_t *)data_rec, 6, 100);
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	2364      	movs	r3, #100	; 0x64
 8000d28:	9302      	str	r3, [sp, #8]
 8000d2a:	2306      	movs	r3, #6
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <adxl_read_values+0x2c>)
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2301      	movs	r3, #1
 8000d34:	21a6      	movs	r1, #166	; 0xa6
 8000d36:	4804      	ldr	r0, [pc, #16]	; (8000d48 <adxl_read_values+0x30>)
 8000d38:	f001 f8ba 	bl	8001eb0 <HAL_I2C_Mem_Read>

}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	2000024c 	.word	0x2000024c
 8000d48:	200001f8 	.word	0x200001f8

08000d4c <adxl_read_address>:

void adxl_read_address (uint8_t reg)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af04      	add	r7, sp, #16
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read (&hi2c1, adxl_address, reg, 1, &chipid, 1, 100);
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	2364      	movs	r3, #100	; 0x64
 8000d5c:	9302      	str	r3, [sp, #8]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <adxl_read_address+0x2c>)
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	2301      	movs	r3, #1
 8000d68:	21a6      	movs	r1, #166	; 0xa6
 8000d6a:	4804      	ldr	r0, [pc, #16]	; (8000d7c <adxl_read_address+0x30>)
 8000d6c:	f001 f8a0 	bl	8001eb0 <HAL_I2C_Mem_Read>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000252 	.word	0x20000252
 8000d7c:	200001f8 	.word	0x200001f8

08000d80 <adxl_init>:

void adxl_init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
adxl_read_address(0x00);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f7ff ffe1 	bl	8000d4c <adxl_read_address>
adxl_write(0x31, 0x01);
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	2031      	movs	r0, #49	; 0x31
 8000d8e:	f7ff ffa7 	bl	8000ce0 <adxl_write>
adxl_write(0x2d, 0);
 8000d92:	2100      	movs	r1, #0
 8000d94:	202d      	movs	r0, #45	; 0x2d
 8000d96:	f7ff ffa3 	bl	8000ce0 <adxl_write>
adxl_write(0x2d, 0x08);
 8000d9a:	2108      	movs	r1, #8
 8000d9c:	202d      	movs	r0, #45	; 0x2d
 8000d9e:	f7ff ff9f 	bl	8000ce0 <adxl_write>

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dac:	f000 fb38 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db0:	f000 f8e8 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db4:	f000 f95a 	bl	800106c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000db8:	f000 f92a 	bl	8001010 <MX_I2C1_Init>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	break;
	}
}*/

  adxl_init();
 8000dbc:	f7ff ffe0 	bl	8000d80 <adxl_init>

  lcd_init ();
 8000dc0:	f7ff ff12 	bl	8000be8 <lcd_init>

  lcd_send_cmd (0x80|0x00);
 8000dc4:	2080      	movs	r0, #128	; 0x80
 8000dc6:	f7ff feaf 	bl	8000b28 <lcd_send_cmd>
  lcd_send_string ("Accelerometer");
 8000dca:	4861      	ldr	r0, [pc, #388]	; (8000f50 <main+0x1a8>)
 8000dcc:	f7ff ff46 	bl	8000c5c <lcd_send_string>

  lcd_send_cmd (0x80|0x40);
 8000dd0:	20c0      	movs	r0, #192	; 0xc0
 8000dd2:	f7ff fea9 	bl	8000b28 <lcd_send_cmd>
  lcd_send_string ("Xg =");
 8000dd6:	485f      	ldr	r0, [pc, #380]	; (8000f54 <main+0x1ac>)
 8000dd8:	f7ff ff40 	bl	8000c5c <lcd_send_string>

  lcd_send_cmd (0x80|0x44);
 8000ddc:	20c4      	movs	r0, #196	; 0xc4
 8000dde:	f7ff fea3 	bl	8000b28 <lcd_send_cmd>
  lcd_send_string ("xx");
 8000de2:	485d      	ldr	r0, [pc, #372]	; (8000f58 <main+0x1b0>)
 8000de4:	f7ff ff3a 	bl	8000c5c <lcd_send_string>

  lcd_send_cmd (0x80|0x14);
 8000de8:	2094      	movs	r0, #148	; 0x94
 8000dea:	f7ff fe9d 	bl	8000b28 <lcd_send_cmd>
  lcd_send_string ("Yg =");
 8000dee:	485b      	ldr	r0, [pc, #364]	; (8000f5c <main+0x1b4>)
 8000df0:	f7ff ff34 	bl	8000c5c <lcd_send_string>

  lcd_send_cmd (0x80|0x18);
 8000df4:	2098      	movs	r0, #152	; 0x98
 8000df6:	f7ff fe97 	bl	8000b28 <lcd_send_cmd>
  lcd_send_string ("xx");
 8000dfa:	4857      	ldr	r0, [pc, #348]	; (8000f58 <main+0x1b0>)
 8000dfc:	f7ff ff2e 	bl	8000c5c <lcd_send_string>

  lcd_send_cmd (0x80|0x54);
 8000e00:	20d4      	movs	r0, #212	; 0xd4
 8000e02:	f7ff fe91 	bl	8000b28 <lcd_send_cmd>
  lcd_send_string ("Zg =");
 8000e06:	4856      	ldr	r0, [pc, #344]	; (8000f60 <main+0x1b8>)
 8000e08:	f7ff ff28 	bl	8000c5c <lcd_send_string>

  lcd_send_cmd (0x80|0x58);
 8000e0c:	20d8      	movs	r0, #216	; 0xd8
 8000e0e:	f7ff fe8b 	bl	8000b28 <lcd_send_cmd>
  lcd_send_string ("xx");
 8000e12:	4851      	ldr	r0, [pc, #324]	; (8000f58 <main+0x1b0>)
 8000e14:	f7ff ff22 	bl	8000c5c <lcd_send_string>

  HAL_Delay(500);
 8000e18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e1c:	f000 fb62 	bl	80014e4 <HAL_Delay>



	  /*-----------adxl read-----------*/

	  adxl_read_values(0x32);
 8000e20:	2032      	movs	r0, #50	; 0x32
 8000e22:	f7ff ff79 	bl	8000d18 <adxl_read_values>
	  x = ((data_rec[1]<<8) | data_rec[0]);
 8000e26:	4b4f      	ldr	r3, [pc, #316]	; (8000f64 <main+0x1bc>)
 8000e28:	785b      	ldrb	r3, [r3, #1]
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	b21a      	sxth	r2, r3
 8000e2e:	4b4d      	ldr	r3, [pc, #308]	; (8000f64 <main+0x1bc>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21a      	sxth	r2, r3
 8000e38:	4b4b      	ldr	r3, [pc, #300]	; (8000f68 <main+0x1c0>)
 8000e3a:	801a      	strh	r2, [r3, #0]
	  y = ((data_rec[3]<<8) | data_rec[2]);
 8000e3c:	4b49      	ldr	r3, [pc, #292]	; (8000f64 <main+0x1bc>)
 8000e3e:	78db      	ldrb	r3, [r3, #3]
 8000e40:	021b      	lsls	r3, r3, #8
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <main+0x1bc>)
 8000e46:	789b      	ldrb	r3, [r3, #2]
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b47      	ldr	r3, [pc, #284]	; (8000f6c <main+0x1c4>)
 8000e50:	801a      	strh	r2, [r3, #0]
	  z = ((data_rec[5]<<8) | data_rec[4]);
 8000e52:	4b44      	ldr	r3, [pc, #272]	; (8000f64 <main+0x1bc>)
 8000e54:	795b      	ldrb	r3, [r3, #5]
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	4b42      	ldr	r3, [pc, #264]	; (8000f64 <main+0x1bc>)
 8000e5c:	791b      	ldrb	r3, [r3, #4]
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	4b42      	ldr	r3, [pc, #264]	; (8000f70 <main+0x1c8>)
 8000e66:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(10);
 8000e68:	200a      	movs	r0, #10
 8000e6a:	f000 fb3b 	bl	80014e4 <HAL_Delay>

	  /*-----------convert g-----------*/

	  xg = x * .0078;
 8000e6e:	4b3e      	ldr	r3, [pc, #248]	; (8000f68 <main+0x1c0>)
 8000e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fac5 	bl	8000404 <__aeabi_i2d>
 8000e7a:	a333      	add	r3, pc, #204	; (adr r3, 8000f48 <main+0x1a0>)
 8000e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e80:	f7ff fb2a 	bl	80004d8 <__aeabi_dmul>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f7ff fdfc 	bl	8000a88 <__aeabi_d2f>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a38      	ldr	r2, [pc, #224]	; (8000f74 <main+0x1cc>)
 8000e94:	6013      	str	r3, [r2, #0]
	  yg = y * .0078;
 8000e96:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <main+0x1c4>)
 8000e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fab1 	bl	8000404 <__aeabi_i2d>
 8000ea2:	a329      	add	r3, pc, #164	; (adr r3, 8000f48 <main+0x1a0>)
 8000ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea8:	f7ff fb16 	bl	80004d8 <__aeabi_dmul>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f7ff fde8 	bl	8000a88 <__aeabi_d2f>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4a2f      	ldr	r2, [pc, #188]	; (8000f78 <main+0x1d0>)
 8000ebc:	6013      	str	r3, [r2, #0]
	  zg = z * .0078;
 8000ebe:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <main+0x1c8>)
 8000ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fa9d 	bl	8000404 <__aeabi_i2d>
 8000eca:	a31f      	add	r3, pc, #124	; (adr r3, 8000f48 <main+0x1a0>)
 8000ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed0:	f7ff fb02 	bl	80004d8 <__aeabi_dmul>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	f7ff fdd4 	bl	8000a88 <__aeabi_d2f>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a26      	ldr	r2, [pc, #152]	; (8000f7c <main+0x1d4>)
 8000ee4:	6013      	str	r3, [r2, #0]

	  /*-----------Display-----------*/

	  lcd_send_cmd (0x80|0x44);
 8000ee6:	20c4      	movs	r0, #196	; 0xc4
 8000ee8:	f7ff fe1e 	bl	8000b28 <lcd_send_cmd>
	  lcd_send_string ("        ");
 8000eec:	4824      	ldr	r0, [pc, #144]	; (8000f80 <main+0x1d8>)
 8000eee:	f7ff feb5 	bl	8000c5c <lcd_send_string>
	  lcd_send_cmd (0x80|0x44);
 8000ef2:	20c4      	movs	r0, #196	; 0xc4
 8000ef4:	f7ff fe18 	bl	8000b28 <lcd_send_cmd>
	  lcd_send_float (xg, 5);
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <main+0x1cc>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2105      	movs	r1, #5
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fec2 	bl	8000c88 <lcd_send_float>

	  lcd_send_cmd (0x80|0x18);
 8000f04:	2098      	movs	r0, #152	; 0x98
 8000f06:	f7ff fe0f 	bl	8000b28 <lcd_send_cmd>
	  lcd_send_string ("        ");
 8000f0a:	481d      	ldr	r0, [pc, #116]	; (8000f80 <main+0x1d8>)
 8000f0c:	f7ff fea6 	bl	8000c5c <lcd_send_string>
	  lcd_send_cmd (0x80|0x18);
 8000f10:	2098      	movs	r0, #152	; 0x98
 8000f12:	f7ff fe09 	bl	8000b28 <lcd_send_cmd>
	  lcd_send_float (yg, 5);
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <main+0x1d0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2105      	movs	r1, #5
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff feb3 	bl	8000c88 <lcd_send_float>

	  lcd_send_cmd (0x80|0x58);
 8000f22:	20d8      	movs	r0, #216	; 0xd8
 8000f24:	f7ff fe00 	bl	8000b28 <lcd_send_cmd>
	  lcd_send_string ("        ");
 8000f28:	4815      	ldr	r0, [pc, #84]	; (8000f80 <main+0x1d8>)
 8000f2a:	f7ff fe97 	bl	8000c5c <lcd_send_string>
	  lcd_send_cmd (0x80|0x58);
 8000f2e:	20d8      	movs	r0, #216	; 0xd8
 8000f30:	f7ff fdfa 	bl	8000b28 <lcd_send_cmd>
	  lcd_send_float (zg, 5);
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <main+0x1d4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2105      	movs	r1, #5
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fea4 	bl	8000c88 <lcd_send_float>
	  HAL_Delay(200);
 8000f40:	20c8      	movs	r0, #200	; 0xc8
 8000f42:	f000 facf 	bl	80014e4 <HAL_Delay>
	  adxl_read_values(0x32);
 8000f46:	e76b      	b.n	8000e20 <main+0x78>
 8000f48:	8e8a71de 	.word	0x8e8a71de
 8000f4c:	3f7ff2e4 	.word	0x3f7ff2e4
 8000f50:	08006074 	.word	0x08006074
 8000f54:	08006084 	.word	0x08006084
 8000f58:	0800608c 	.word	0x0800608c
 8000f5c:	08006090 	.word	0x08006090
 8000f60:	08006098 	.word	0x08006098
 8000f64:	2000024c 	.word	0x2000024c
 8000f68:	20000254 	.word	0x20000254
 8000f6c:	20000256 	.word	0x20000256
 8000f70:	20000258 	.word	0x20000258
 8000f74:	2000025c 	.word	0x2000025c
 8000f78:	20000260 	.word	0x20000260
 8000f7c:	20000264 	.word	0x20000264
 8000f80:	080060a0 	.word	0x080060a0

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b090      	sub	sp, #64	; 0x40
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0318 	add.w	r3, r7, #24
 8000f8e:	2228      	movs	r2, #40	; 0x28
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 f96a 	bl	800326c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fc2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc8:	f107 0318 	add.w	r3, r7, #24
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 fd1d 	bl	8002a0c <HAL_RCC_OscConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fd8:	f000 f8a0 	bl	800111c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fdc:	230f      	movs	r3, #15
 8000fde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 ff8a 	bl	8002f10 <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001002:	f000 f88b 	bl	800111c <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3740      	adds	r7, #64	; 0x40
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <MX_I2C1_Init+0x50>)
 8001016:	4a13      	ldr	r2, [pc, #76]	; (8001064 <MX_I2C1_Init+0x54>)
 8001018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_I2C1_Init+0x50>)
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <MX_I2C1_Init+0x58>)
 800101e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_I2C1_Init+0x50>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_I2C1_Init+0x50>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_I2C1_Init+0x50>)
 800102e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001032:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <MX_I2C1_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_I2C1_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <MX_I2C1_Init+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_I2C1_Init+0x50>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <MX_I2C1_Init+0x50>)
 800104e:	f000 fced 	bl	8001a2c <HAL_I2C_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001058:	f000 f860 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200001f8 	.word	0x200001f8
 8001064:	40005400 	.word	0x40005400
 8001068:	00061a80 	.word	0x00061a80

0800106c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001080:	4b24      	ldr	r3, [pc, #144]	; (8001114 <MX_GPIO_Init+0xa8>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a23      	ldr	r2, [pc, #140]	; (8001114 <MX_GPIO_Init+0xa8>)
 8001086:	f043 0310 	orr.w	r3, r3, #16
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b21      	ldr	r3, [pc, #132]	; (8001114 <MX_GPIO_Init+0xa8>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0310 	and.w	r3, r3, #16
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <MX_GPIO_Init+0xa8>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <MX_GPIO_Init+0xa8>)
 800109e:	f043 0320 	orr.w	r3, r3, #32
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MX_GPIO_Init+0xa8>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0320 	and.w	r3, r3, #32
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_GPIO_Init+0xa8>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a17      	ldr	r2, [pc, #92]	; (8001114 <MX_GPIO_Init+0xa8>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <MX_GPIO_Init+0xa8>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_GPIO_Init+0xa8>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a11      	ldr	r2, [pc, #68]	; (8001114 <MX_GPIO_Init+0xa8>)
 80010ce:	f043 0308 	orr.w	r3, r3, #8
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_GPIO_Init+0xa8>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e6:	480c      	ldr	r0, [pc, #48]	; (8001118 <MX_GPIO_Init+0xac>)
 80010e8:	f000 fc88 	bl	80019fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	4619      	mov	r1, r3
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_GPIO_Init+0xac>)
 8001106:	f000 faf5 	bl	80016f4 <HAL_GPIO_Init>

}
 800110a:	bf00      	nop
 800110c:	3720      	adds	r7, #32
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	40011000 	.word	0x40011000

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_MspInit+0x5c>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	4a14      	ldr	r2, [pc, #80]	; (8001184 <HAL_MspInit+0x5c>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6193      	str	r3, [r2, #24]
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_MspInit+0x5c>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_MspInit+0x5c>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <HAL_MspInit+0x5c>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	61d3      	str	r3, [r2, #28]
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_MspInit+0x5c>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_MspInit+0x60>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <HAL_MspInit+0x60>)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	40021000 	.word	0x40021000
 8001188:	40010000 	.word	0x40010000

0800118c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a15      	ldr	r2, [pc, #84]	; (80011fc <HAL_I2C_MspInit+0x70>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d123      	bne.n	80011f4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_I2C_MspInit+0x74>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a13      	ldr	r2, [pc, #76]	; (8001200 <HAL_I2C_MspInit+0x74>)
 80011b2:	f043 0308 	orr.w	r3, r3, #8
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_I2C_MspInit+0x74>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c4:	23c0      	movs	r3, #192	; 0xc0
 80011c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c8:	2312      	movs	r3, #18
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4619      	mov	r1, r3
 80011d6:	480b      	ldr	r0, [pc, #44]	; (8001204 <HAL_I2C_MspInit+0x78>)
 80011d8:	f000 fa8c 	bl	80016f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_I2C_MspInit+0x74>)
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_I2C_MspInit+0x74>)
 80011e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011e6:	61d3      	str	r3, [r2, #28]
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_I2C_MspInit+0x74>)
 80011ea:	69db      	ldr	r3, [r3, #28]
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40005400 	.word	0x40005400
 8001200:	40021000 	.word	0x40021000
 8001204:	40010c00 	.word	0x40010c00

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <HardFault_Handler+0x4>

0800121a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <MemManage_Handler+0x4>

08001220 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <BusFault_Handler+0x4>

08001226 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <UsageFault_Handler+0x4>

0800122c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001254:	f000 f92a 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
	return 1;
 8001260:	2301      	movs	r3, #1
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <_kill>:

int _kill(int pid, int sig)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001274:	f001 ffd0 	bl	8003218 <__errno>
 8001278:	4603      	mov	r3, r0
 800127a:	2216      	movs	r2, #22
 800127c:	601a      	str	r2, [r3, #0]
	return -1;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <_exit>:

void _exit (int status)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001292:	f04f 31ff 	mov.w	r1, #4294967295
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffe7 	bl	800126a <_kill>
	while (1) {}		/* Make sure we hang here */
 800129c:	e7fe      	b.n	800129c <_exit+0x12>

0800129e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	e00a      	b.n	80012c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012b0:	f3af 8000 	nop.w
 80012b4:	4601      	mov	r1, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	60ba      	str	r2, [r7, #8]
 80012bc:	b2ca      	uxtb	r2, r1
 80012be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	dbf0      	blt.n	80012b0 <_read+0x12>
	}

return len;
 80012ce:	687b      	ldr	r3, [r7, #4]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	e009      	b.n	80012fe <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	60ba      	str	r2, [r7, #8]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	3301      	adds	r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	429a      	cmp	r2, r3
 8001304:	dbf1      	blt.n	80012ea <_write+0x12>
	}
	return len;
 8001306:	687b      	ldr	r3, [r7, #4]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_close>:

int _close(int file)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	return -1;
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001336:	605a      	str	r2, [r3, #4]
	return 0;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <_isatty>:

int _isatty(int file)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	return 1;
 800134c:	2301      	movs	r3, #1
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
	return 0;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <_sbrk+0x50>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <_sbrk+0x16>
		heap_end = &end;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <_sbrk+0x50>)
 8001382:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <_sbrk+0x54>)
 8001384:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <_sbrk+0x50>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_sbrk+0x50>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4413      	add	r3, r2
 8001394:	466a      	mov	r2, sp
 8001396:	4293      	cmp	r3, r2
 8001398:	d907      	bls.n	80013aa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800139a:	f001 ff3d 	bl	8003218 <__errno>
 800139e:	4603      	mov	r3, r0
 80013a0:	220c      	movs	r2, #12
 80013a2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
 80013a8:	e006      	b.n	80013b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <_sbrk+0x50>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a03      	ldr	r2, [pc, #12]	; (80013c0 <_sbrk+0x50>)
 80013b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000268 	.word	0x20000268
 80013c4:	20000280 	.word	0x20000280

080013c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013d6:	e003      	b.n	80013e0 <LoopCopyDataInit>

080013d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013de:	3104      	adds	r1, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013e0:	480a      	ldr	r0, [pc, #40]	; (800140c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013e8:	d3f6      	bcc.n	80013d8 <CopyDataInit>
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013ec:	e002      	b.n	80013f4 <LoopFillZerobss>

080013ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013f0:	f842 3b04 	str.w	r3, [r2], #4

080013f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013f8:	d3f9      	bcc.n	80013ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013fa:	f7ff ffe5 	bl	80013c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fe:	f001 ff11 	bl	8003224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001402:	f7ff fcd1 	bl	8000da8 <main>
  bx lr
 8001406:	4770      	bx	lr
  ldr r3, =_sidata
 8001408:	080064b4 	.word	0x080064b4
  ldr r0, =_sdata
 800140c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001410:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001414:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001418:	20000280 	.word	0x20000280

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>
	...

08001420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_Init+0x28>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_Init+0x28>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 f92b 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001436:	2000      	movs	r0, #0
 8001438:	f000 f808 	bl	800144c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff fe74 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40022000 	.word	0x40022000

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_InitTick+0x54>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x58>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f935 	bl	80016da <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00e      	b.n	8001498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d80a      	bhi.n	8001496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 f90b 	bl	80016a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <HAL_InitTick+0x5c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000008 	.word	0x20000008
 80014a8:	20000004 	.word	0x20000004

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_IncTick+0x1c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_IncTick+0x20>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a03      	ldr	r2, [pc, #12]	; (80014cc <HAL_IncTick+0x20>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	20000008 	.word	0x20000008
 80014cc:	2000026c 	.word	0x2000026c

080014d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b02      	ldr	r3, [pc, #8]	; (80014e0 <HAL_GetTick+0x10>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	2000026c 	.word	0x2000026c

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff fff0 	bl	80014d0 <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_Delay+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffe0 	bl	80014d0 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008

0800152c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001548:	4013      	ands	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155e:	4a04      	ldr	r2, [pc, #16]	; (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	60d3      	str	r3, [r2, #12]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <__NVIC_GetPriorityGrouping+0x18>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	f003 0307 	and.w	r3, r3, #7
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f7ff ff90 	bl	8001590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff49 	bl	800152c <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff5e 	bl	8001574 <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff90 	bl	80015e4 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5f 	bl	8001590 <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffb0 	bl	8001648 <SysTick_Config>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b08b      	sub	sp, #44	; 0x2c
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001706:	e169      	b.n	80019dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001708:	2201      	movs	r2, #1
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	429a      	cmp	r2, r3
 8001722:	f040 8158 	bne.w	80019d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4a9a      	ldr	r2, [pc, #616]	; (8001994 <HAL_GPIO_Init+0x2a0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d05e      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
 8001730:	4a98      	ldr	r2, [pc, #608]	; (8001994 <HAL_GPIO_Init+0x2a0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d875      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 8001736:	4a98      	ldr	r2, [pc, #608]	; (8001998 <HAL_GPIO_Init+0x2a4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d058      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
 800173c:	4a96      	ldr	r2, [pc, #600]	; (8001998 <HAL_GPIO_Init+0x2a4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d86f      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 8001742:	4a96      	ldr	r2, [pc, #600]	; (800199c <HAL_GPIO_Init+0x2a8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d052      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
 8001748:	4a94      	ldr	r2, [pc, #592]	; (800199c <HAL_GPIO_Init+0x2a8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d869      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 800174e:	4a94      	ldr	r2, [pc, #592]	; (80019a0 <HAL_GPIO_Init+0x2ac>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d04c      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
 8001754:	4a92      	ldr	r2, [pc, #584]	; (80019a0 <HAL_GPIO_Init+0x2ac>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d863      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 800175a:	4a92      	ldr	r2, [pc, #584]	; (80019a4 <HAL_GPIO_Init+0x2b0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d046      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
 8001760:	4a90      	ldr	r2, [pc, #576]	; (80019a4 <HAL_GPIO_Init+0x2b0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d85d      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 8001766:	2b12      	cmp	r3, #18
 8001768:	d82a      	bhi.n	80017c0 <HAL_GPIO_Init+0xcc>
 800176a:	2b12      	cmp	r3, #18
 800176c:	d859      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 800176e:	a201      	add	r2, pc, #4	; (adr r2, 8001774 <HAL_GPIO_Init+0x80>)
 8001770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001774:	080017ef 	.word	0x080017ef
 8001778:	080017c9 	.word	0x080017c9
 800177c:	080017db 	.word	0x080017db
 8001780:	0800181d 	.word	0x0800181d
 8001784:	08001823 	.word	0x08001823
 8001788:	08001823 	.word	0x08001823
 800178c:	08001823 	.word	0x08001823
 8001790:	08001823 	.word	0x08001823
 8001794:	08001823 	.word	0x08001823
 8001798:	08001823 	.word	0x08001823
 800179c:	08001823 	.word	0x08001823
 80017a0:	08001823 	.word	0x08001823
 80017a4:	08001823 	.word	0x08001823
 80017a8:	08001823 	.word	0x08001823
 80017ac:	08001823 	.word	0x08001823
 80017b0:	08001823 	.word	0x08001823
 80017b4:	08001823 	.word	0x08001823
 80017b8:	080017d1 	.word	0x080017d1
 80017bc:	080017e5 	.word	0x080017e5
 80017c0:	4a79      	ldr	r2, [pc, #484]	; (80019a8 <HAL_GPIO_Init+0x2b4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017c6:	e02c      	b.n	8001822 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	623b      	str	r3, [r7, #32]
          break;
 80017ce:	e029      	b.n	8001824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	3304      	adds	r3, #4
 80017d6:	623b      	str	r3, [r7, #32]
          break;
 80017d8:	e024      	b.n	8001824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	3308      	adds	r3, #8
 80017e0:	623b      	str	r3, [r7, #32]
          break;
 80017e2:	e01f      	b.n	8001824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	330c      	adds	r3, #12
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e01a      	b.n	8001824 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d102      	bne.n	80017fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017f6:	2304      	movs	r3, #4
 80017f8:	623b      	str	r3, [r7, #32]
          break;
 80017fa:	e013      	b.n	8001824 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d105      	bne.n	8001810 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001804:	2308      	movs	r3, #8
 8001806:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	611a      	str	r2, [r3, #16]
          break;
 800180e:	e009      	b.n	8001824 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001810:	2308      	movs	r3, #8
 8001812:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	615a      	str	r2, [r3, #20]
          break;
 800181a:	e003      	b.n	8001824 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
          break;
 8001820:	e000      	b.n	8001824 <HAL_GPIO_Init+0x130>
          break;
 8001822:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2bff      	cmp	r3, #255	; 0xff
 8001828:	d801      	bhi.n	800182e <HAL_GPIO_Init+0x13a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	e001      	b.n	8001832 <HAL_GPIO_Init+0x13e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3304      	adds	r3, #4
 8001832:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2bff      	cmp	r3, #255	; 0xff
 8001838:	d802      	bhi.n	8001840 <HAL_GPIO_Init+0x14c>
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	e002      	b.n	8001846 <HAL_GPIO_Init+0x152>
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	3b08      	subs	r3, #8
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	210f      	movs	r1, #15
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	401a      	ands	r2, r3
 8001858:	6a39      	ldr	r1, [r7, #32]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	431a      	orrs	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80b1 	beq.w	80019d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001874:	4b4d      	ldr	r3, [pc, #308]	; (80019ac <HAL_GPIO_Init+0x2b8>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a4c      	ldr	r2, [pc, #304]	; (80019ac <HAL_GPIO_Init+0x2b8>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b4a      	ldr	r3, [pc, #296]	; (80019ac <HAL_GPIO_Init+0x2b8>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800188c:	4a48      	ldr	r2, [pc, #288]	; (80019b0 <HAL_GPIO_Init+0x2bc>)
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001898:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	220f      	movs	r2, #15
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4013      	ands	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a40      	ldr	r2, [pc, #256]	; (80019b4 <HAL_GPIO_Init+0x2c0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d013      	beq.n	80018e0 <HAL_GPIO_Init+0x1ec>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a3f      	ldr	r2, [pc, #252]	; (80019b8 <HAL_GPIO_Init+0x2c4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d00d      	beq.n	80018dc <HAL_GPIO_Init+0x1e8>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a3e      	ldr	r2, [pc, #248]	; (80019bc <HAL_GPIO_Init+0x2c8>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d007      	beq.n	80018d8 <HAL_GPIO_Init+0x1e4>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a3d      	ldr	r2, [pc, #244]	; (80019c0 <HAL_GPIO_Init+0x2cc>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d101      	bne.n	80018d4 <HAL_GPIO_Init+0x1e0>
 80018d0:	2303      	movs	r3, #3
 80018d2:	e006      	b.n	80018e2 <HAL_GPIO_Init+0x1ee>
 80018d4:	2304      	movs	r3, #4
 80018d6:	e004      	b.n	80018e2 <HAL_GPIO_Init+0x1ee>
 80018d8:	2302      	movs	r3, #2
 80018da:	e002      	b.n	80018e2 <HAL_GPIO_Init+0x1ee>
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <HAL_GPIO_Init+0x1ee>
 80018e0:	2300      	movs	r3, #0
 80018e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e4:	f002 0203 	and.w	r2, r2, #3
 80018e8:	0092      	lsls	r2, r2, #2
 80018ea:	4093      	lsls	r3, r2
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018f2:	492f      	ldr	r1, [pc, #188]	; (80019b0 <HAL_GPIO_Init+0x2bc>)
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800190c:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	492c      	ldr	r1, [pc, #176]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800191a:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	43db      	mvns	r3, r3
 8001922:	4928      	ldr	r1, [pc, #160]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001924:	4013      	ands	r3, r2
 8001926:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001934:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	4922      	ldr	r1, [pc, #136]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	43db      	mvns	r3, r3
 800194a:	491e      	ldr	r1, [pc, #120]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 800194c:	4013      	ands	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	4918      	ldr	r1, [pc, #96]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	608b      	str	r3, [r1, #8]
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	43db      	mvns	r3, r3
 8001972:	4914      	ldr	r1, [pc, #80]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001974:	4013      	ands	r3, r2
 8001976:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d021      	beq.n	80019c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	490e      	ldr	r1, [pc, #56]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	60cb      	str	r3, [r1, #12]
 8001990:	e021      	b.n	80019d6 <HAL_GPIO_Init+0x2e2>
 8001992:	bf00      	nop
 8001994:	10320000 	.word	0x10320000
 8001998:	10310000 	.word	0x10310000
 800199c:	10220000 	.word	0x10220000
 80019a0:	10210000 	.word	0x10210000
 80019a4:	10120000 	.word	0x10120000
 80019a8:	10110000 	.word	0x10110000
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40010000 	.word	0x40010000
 80019b4:	40010800 	.word	0x40010800
 80019b8:	40010c00 	.word	0x40010c00
 80019bc:	40011000 	.word	0x40011000
 80019c0:	40011400 	.word	0x40011400
 80019c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_GPIO_Init+0x304>)
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	4909      	ldr	r1, [pc, #36]	; (80019f8 <HAL_GPIO_Init+0x304>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	3301      	adds	r3, #1
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	fa22 f303 	lsr.w	r3, r2, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f47f ae8e 	bne.w	8001708 <HAL_GPIO_Init+0x14>
  }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	372c      	adds	r7, #44	; 0x2c
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	40010400 	.word	0x40010400

080019fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a0c:	787b      	ldrb	r3, [r7, #1]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a12:	887a      	ldrh	r2, [r7, #2]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a18:	e003      	b.n	8001a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a1a:	887b      	ldrh	r3, [r7, #2]
 8001a1c:	041a      	lsls	r2, r3, #16
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	611a      	str	r2, [r3, #16]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e12b      	b.n	8001c96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d106      	bne.n	8001a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff fb9a 	bl	800118c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2224      	movs	r2, #36	; 0x24
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0201 	bic.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a90:	f001 fb90 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 8001a94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4a81      	ldr	r2, [pc, #516]	; (8001ca0 <HAL_I2C_Init+0x274>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d807      	bhi.n	8001ab0 <HAL_I2C_Init+0x84>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4a80      	ldr	r2, [pc, #512]	; (8001ca4 <HAL_I2C_Init+0x278>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	bf94      	ite	ls
 8001aa8:	2301      	movls	r3, #1
 8001aaa:	2300      	movhi	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	e006      	b.n	8001abe <HAL_I2C_Init+0x92>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4a7d      	ldr	r2, [pc, #500]	; (8001ca8 <HAL_I2C_Init+0x27c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	bf94      	ite	ls
 8001ab8:	2301      	movls	r3, #1
 8001aba:	2300      	movhi	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e0e7      	b.n	8001c96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4a78      	ldr	r2, [pc, #480]	; (8001cac <HAL_I2C_Init+0x280>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0c9b      	lsrs	r3, r3, #18
 8001ad0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a6a      	ldr	r2, [pc, #424]	; (8001ca0 <HAL_I2C_Init+0x274>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d802      	bhi.n	8001b00 <HAL_I2C_Init+0xd4>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	3301      	adds	r3, #1
 8001afe:	e009      	b.n	8001b14 <HAL_I2C_Init+0xe8>
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b06:	fb02 f303 	mul.w	r3, r2, r3
 8001b0a:	4a69      	ldr	r2, [pc, #420]	; (8001cb0 <HAL_I2C_Init+0x284>)
 8001b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	3301      	adds	r3, #1
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	495c      	ldr	r1, [pc, #368]	; (8001ca0 <HAL_I2C_Init+0x274>)
 8001b30:	428b      	cmp	r3, r1
 8001b32:	d819      	bhi.n	8001b68 <HAL_I2C_Init+0x13c>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1e59      	subs	r1, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b42:	1c59      	adds	r1, r3, #1
 8001b44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b48:	400b      	ands	r3, r1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00a      	beq.n	8001b64 <HAL_I2C_Init+0x138>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1e59      	subs	r1, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b62:	e051      	b.n	8001c08 <HAL_I2C_Init+0x1dc>
 8001b64:	2304      	movs	r3, #4
 8001b66:	e04f      	b.n	8001c08 <HAL_I2C_Init+0x1dc>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d111      	bne.n	8001b94 <HAL_I2C_Init+0x168>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1e58      	subs	r0, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	440b      	add	r3, r1
 8001b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b82:	3301      	adds	r3, #1
 8001b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	e012      	b.n	8001bba <HAL_I2C_Init+0x18e>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1e58      	subs	r0, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6859      	ldr	r1, [r3, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	0099      	lsls	r1, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001baa:	3301      	adds	r3, #1
 8001bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2301      	moveq	r3, #1
 8001bb6:	2300      	movne	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_Init+0x196>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e022      	b.n	8001c08 <HAL_I2C_Init+0x1dc>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10e      	bne.n	8001be8 <HAL_I2C_Init+0x1bc>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1e58      	subs	r0, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6859      	ldr	r1, [r3, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	440b      	add	r3, r1
 8001bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bdc:	3301      	adds	r3, #1
 8001bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be6:	e00f      	b.n	8001c08 <HAL_I2C_Init+0x1dc>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	1e58      	subs	r0, r3, #1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6859      	ldr	r1, [r3, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	0099      	lsls	r1, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	6809      	ldr	r1, [r1, #0]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69da      	ldr	r2, [r3, #28]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6911      	ldr	r1, [r2, #16]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68d2      	ldr	r2, [r2, #12]
 8001c42:	4311      	orrs	r1, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	430b      	orrs	r3, r1
 8001c4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695a      	ldr	r2, [r3, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2220      	movs	r2, #32
 8001c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	000186a0 	.word	0x000186a0
 8001ca4:	001e847f 	.word	0x001e847f
 8001ca8:	003d08ff 	.word	0x003d08ff
 8001cac:	431bde83 	.word	0x431bde83
 8001cb0:	10624dd3 	.word	0x10624dd3

08001cb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	817b      	strh	r3, [r7, #10]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cc8:	f7ff fc02 	bl	80014d0 <HAL_GetTick>
 8001ccc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	f040 80e0 	bne.w	8001e9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2319      	movs	r3, #25
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4970      	ldr	r1, [pc, #448]	; (8001ea8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 fcb4 	bl	8002654 <I2C_WaitOnFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e0d3      	b.n	8001e9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_I2C_Master_Transmit+0x50>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e0cc      	b.n	8001e9e <HAL_I2C_Master_Transmit+0x1ea>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d007      	beq.n	8001d2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0201 	orr.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2221      	movs	r2, #33	; 0x21
 8001d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2210      	movs	r2, #16
 8001d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	893a      	ldrh	r2, [r7, #8]
 8001d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4a50      	ldr	r2, [pc, #320]	; (8001eac <HAL_I2C_Master_Transmit+0x1f8>)
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d6c:	8979      	ldrh	r1, [r7, #10]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	6a3a      	ldr	r2, [r7, #32]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 fb04 	bl	8002380 <I2C_MasterRequestWrite>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e08d      	b.n	8001e9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d98:	e066      	b.n	8001e68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	6a39      	ldr	r1, [r7, #32]
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 fd2e 	bl	8002800 <I2C_WaitOnTXEFlagUntilTimeout>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00d      	beq.n	8001dc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d107      	bne.n	8001dc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e06b      	b.n	8001e9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	781a      	ldrb	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d11b      	bne.n	8001e3c <HAL_I2C_Master_Transmit+0x188>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d017      	beq.n	8001e3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	781a      	ldrb	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e34:	3b01      	subs	r3, #1
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	6a39      	ldr	r1, [r7, #32]
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 fd1e 	bl	8002882 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00d      	beq.n	8001e68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d107      	bne.n	8001e64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e01a      	b.n	8001e9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d194      	bne.n	8001d9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e000      	b.n	8001e9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e9c:	2302      	movs	r3, #2
  }
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	00100002 	.word	0x00100002
 8001eac:	ffff0000 	.word	0xffff0000

08001eb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08c      	sub	sp, #48	; 0x30
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	4608      	mov	r0, r1
 8001eba:	4611      	mov	r1, r2
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	817b      	strh	r3, [r7, #10]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	813b      	strh	r3, [r7, #8]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ece:	f7ff faff 	bl	80014d0 <HAL_GetTick>
 8001ed2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b20      	cmp	r3, #32
 8001ede:	f040 8244 	bne.w	800236a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	2319      	movs	r3, #25
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4982      	ldr	r1, [pc, #520]	; (80020f4 <HAL_I2C_Mem_Read+0x244>)
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 fbb1 	bl	8002654 <I2C_WaitOnFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e237      	b.n	800236c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_I2C_Mem_Read+0x5a>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e230      	b.n	800236c <HAL_I2C_Mem_Read+0x4bc>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d007      	beq.n	8001f30 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2222      	movs	r2, #34	; 0x22
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2240      	movs	r2, #64	; 0x40
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a62      	ldr	r2, [pc, #392]	; (80020f8 <HAL_I2C_Mem_Read+0x248>)
 8001f70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f72:	88f8      	ldrh	r0, [r7, #6]
 8001f74:	893a      	ldrh	r2, [r7, #8]
 8001f76:	8979      	ldrh	r1, [r7, #10]
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	4603      	mov	r3, r0
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fa7e 	bl	8002484 <I2C_RequestMemoryRead>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e1ec      	b.n	800236c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d113      	bne.n	8001fc2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e1c0      	b.n	8002344 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d11e      	bne.n	8002008 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fd8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fda:	b672      	cpsid	i
}
 8001fdc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002002:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002004:	b662      	cpsie	i
}
 8002006:	e035      	b.n	8002074 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200c:	2b02      	cmp	r3, #2
 800200e:	d11e      	bne.n	800204e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800201e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002020:	b672      	cpsid	i
}
 8002022:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002048:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800204a:	b662      	cpsie	i
}
 800204c:	e012      	b.n	8002074 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800205c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002074:	e166      	b.n	8002344 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	2b03      	cmp	r3, #3
 800207c:	f200 811f 	bhi.w	80022be <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002084:	2b01      	cmp	r3, #1
 8002086:	d123      	bne.n	80020d0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 fc39 	bl	8002904 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e167      	b.n	800236c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	3b01      	subs	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020ce:	e139      	b.n	8002344 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d152      	bne.n	800217e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020de:	2200      	movs	r2, #0
 80020e0:	4906      	ldr	r1, [pc, #24]	; (80020fc <HAL_I2C_Mem_Read+0x24c>)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fab6 	bl	8002654 <I2C_WaitOnFlagUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d008      	beq.n	8002100 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e13c      	b.n	800236c <HAL_I2C_Mem_Read+0x4bc>
 80020f2:	bf00      	nop
 80020f4:	00100002 	.word	0x00100002
 80020f8:	ffff0000 	.word	0xffff0000
 80020fc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002100:	b672      	cpsid	i
}
 8002102:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002112:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002130:	3b01      	subs	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213c:	b29b      	uxth	r3, r3
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002146:	b662      	cpsie	i
}
 8002148:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002172:	b29b      	uxth	r3, r3
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800217c:	e0e2      	b.n	8002344 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002184:	2200      	movs	r2, #0
 8002186:	497b      	ldr	r1, [pc, #492]	; (8002374 <HAL_I2C_Mem_Read+0x4c4>)
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 fa63 	bl	8002654 <I2C_WaitOnFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0e9      	b.n	800236c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021a8:	b672      	cpsid	i
}
 80021aa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80021de:	4b66      	ldr	r3, [pc, #408]	; (8002378 <HAL_I2C_Mem_Read+0x4c8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	08db      	lsrs	r3, r3, #3
 80021e4:	4a65      	ldr	r2, [pc, #404]	; (800237c <HAL_I2C_Mem_Read+0x4cc>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	0a1a      	lsrs	r2, r3, #8
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	00da      	lsls	r2, r3, #3
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d118      	bne.n	8002236 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f043 0220 	orr.w	r2, r3, #32
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002226:	b662      	cpsie	i
}
 8002228:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e09a      	b.n	800236c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b04      	cmp	r3, #4
 8002242:	d1d9      	bne.n	80021f8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002286:	b662      	cpsie	i
}
 8002288:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022bc:	e042      	b.n	8002344 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 fb1e 	bl	8002904 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e04c      	b.n	800236c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b04      	cmp	r3, #4
 8002310:	d118      	bne.n	8002344 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	2b00      	cmp	r3, #0
 800234a:	f47f ae94 	bne.w	8002076 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2220      	movs	r2, #32
 8002352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	e000      	b.n	800236c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800236a:	2302      	movs	r3, #2
  }
}
 800236c:	4618      	mov	r0, r3
 800236e:	3728      	adds	r7, #40	; 0x28
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	00010004 	.word	0x00010004
 8002378:	20000000 	.word	0x20000000
 800237c:	14f8b589 	.word	0x14f8b589

08002380 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af02      	add	r7, sp, #8
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	460b      	mov	r3, r1
 800238e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b08      	cmp	r3, #8
 800239a:	d006      	beq.n	80023aa <I2C_MasterRequestWrite+0x2a>
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d003      	beq.n	80023aa <I2C_MasterRequestWrite+0x2a>
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023a8:	d108      	bne.n	80023bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	e00b      	b.n	80023d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	2b12      	cmp	r3, #18
 80023c2:	d107      	bne.n	80023d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f937 	bl	8002654 <I2C_WaitOnFlagUntilTimeout>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00d      	beq.n	8002408 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fa:	d103      	bne.n	8002404 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e035      	b.n	8002474 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002410:	d108      	bne.n	8002424 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002412:	897b      	ldrh	r3, [r7, #10]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002420:	611a      	str	r2, [r3, #16]
 8002422:	e01b      	b.n	800245c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002424:	897b      	ldrh	r3, [r7, #10]
 8002426:	11db      	asrs	r3, r3, #7
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f003 0306 	and.w	r3, r3, #6
 800242e:	b2db      	uxtb	r3, r3
 8002430:	f063 030f 	orn	r3, r3, #15
 8002434:	b2da      	uxtb	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	490e      	ldr	r1, [pc, #56]	; (800247c <I2C_MasterRequestWrite+0xfc>)
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f95d 	bl	8002702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e010      	b.n	8002474 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002452:	897b      	ldrh	r3, [r7, #10]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	4907      	ldr	r1, [pc, #28]	; (8002480 <I2C_MasterRequestWrite+0x100>)
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f94d 	bl	8002702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	00010008 	.word	0x00010008
 8002480:	00010002 	.word	0x00010002

08002484 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	4608      	mov	r0, r1
 800248e:	4611      	mov	r1, r2
 8002490:	461a      	mov	r2, r3
 8002492:	4603      	mov	r3, r0
 8002494:	817b      	strh	r3, [r7, #10]
 8002496:	460b      	mov	r3, r1
 8002498:	813b      	strh	r3, [r7, #8]
 800249a:	4613      	mov	r3, r2
 800249c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f8c2 	bl	8002654 <I2C_WaitOnFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00d      	beq.n	80024f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e4:	d103      	bne.n	80024ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e0aa      	b.n	8002648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024f2:	897b      	ldrh	r3, [r7, #10]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002500:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	6a3a      	ldr	r2, [r7, #32]
 8002506:	4952      	ldr	r1, [pc, #328]	; (8002650 <I2C_RequestMemoryRead+0x1cc>)
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f8fa 	bl	8002702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e097      	b.n	8002648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800252e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002530:	6a39      	ldr	r1, [r7, #32]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f964 	bl	8002800 <I2C_WaitOnTXEFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00d      	beq.n	800255a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2b04      	cmp	r3, #4
 8002544:	d107      	bne.n	8002556 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002554:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e076      	b.n	8002648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d105      	bne.n	800256c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002560:	893b      	ldrh	r3, [r7, #8]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	611a      	str	r2, [r3, #16]
 800256a:	e021      	b.n	80025b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800256c:	893b      	ldrh	r3, [r7, #8]
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	b29b      	uxth	r3, r3
 8002572:	b2da      	uxtb	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800257a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257c:	6a39      	ldr	r1, [r7, #32]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 f93e 	bl	8002800 <I2C_WaitOnTXEFlagUntilTimeout>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00d      	beq.n	80025a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2b04      	cmp	r3, #4
 8002590:	d107      	bne.n	80025a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e050      	b.n	8002648 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025a6:	893b      	ldrh	r3, [r7, #8]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b2:	6a39      	ldr	r1, [r7, #32]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f923 	bl	8002800 <I2C_WaitOnTXEFlagUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00d      	beq.n	80025dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d107      	bne.n	80025d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e035      	b.n	8002648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f82b 	bl	8002654 <I2C_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00d      	beq.n	8002620 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002612:	d103      	bne.n	800261c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e013      	b.n	8002648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002620:	897b      	ldrh	r3, [r7, #10]
 8002622:	b2db      	uxtb	r3, r3
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	b2da      	uxtb	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	6a3a      	ldr	r2, [r7, #32]
 8002634:	4906      	ldr	r1, [pc, #24]	; (8002650 <I2C_RequestMemoryRead+0x1cc>)
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f863 	bl	8002702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	00010002 	.word	0x00010002

08002654 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	4613      	mov	r3, r2
 8002662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002664:	e025      	b.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d021      	beq.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266e:	f7fe ff2f 	bl	80014d0 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d302      	bcc.n	8002684 <I2C_WaitOnFlagUntilTimeout+0x30>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d116      	bne.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2220      	movs	r2, #32
 800268e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f043 0220 	orr.w	r2, r3, #32
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e023      	b.n	80026fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	0c1b      	lsrs	r3, r3, #16
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d10d      	bne.n	80026d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	43da      	mvns	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4013      	ands	r3, r2
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	bf0c      	ite	eq
 80026ce:	2301      	moveq	r3, #1
 80026d0:	2300      	movne	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	e00c      	b.n	80026f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	43da      	mvns	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4013      	ands	r3, r2
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	bf0c      	ite	eq
 80026ea:	2301      	moveq	r3, #1
 80026ec:	2300      	movne	r3, #0
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d0b6      	beq.n	8002666 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002710:	e051      	b.n	80027b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002720:	d123      	bne.n	800276a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002730:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800273a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f043 0204 	orr.w	r2, r3, #4
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e046      	b.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d021      	beq.n	80027b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002772:	f7fe fead 	bl	80014d0 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	429a      	cmp	r2, r3
 8002780:	d302      	bcc.n	8002788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d116      	bne.n	80027b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f043 0220 	orr.w	r2, r3, #32
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e020      	b.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	0c1b      	lsrs	r3, r3, #16
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d10c      	bne.n	80027da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	43da      	mvns	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4013      	ands	r3, r2
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bf14      	ite	ne
 80027d2:	2301      	movne	r3, #1
 80027d4:	2300      	moveq	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	e00b      	b.n	80027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	43da      	mvns	r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	4013      	ands	r3, r2
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf14      	ite	ne
 80027ec:	2301      	movne	r3, #1
 80027ee:	2300      	moveq	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d18d      	bne.n	8002712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800280c:	e02d      	b.n	800286a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f8ce 	bl	80029b0 <I2C_IsAcknowledgeFailed>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e02d      	b.n	800287a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d021      	beq.n	800286a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002826:	f7fe fe53 	bl	80014d0 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	429a      	cmp	r2, r3
 8002834:	d302      	bcc.n	800283c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d116      	bne.n	800286a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f043 0220 	orr.w	r2, r3, #32
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e007      	b.n	800287a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002874:	2b80      	cmp	r3, #128	; 0x80
 8002876:	d1ca      	bne.n	800280e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800288e:	e02d      	b.n	80028ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f88d 	bl	80029b0 <I2C_IsAcknowledgeFailed>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e02d      	b.n	80028fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a6:	d021      	beq.n	80028ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a8:	f7fe fe12 	bl	80014d0 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d302      	bcc.n	80028be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d116      	bne.n	80028ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f043 0220 	orr.w	r2, r3, #32
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e007      	b.n	80028fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d1ca      	bne.n	8002890 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002910:	e042      	b.n	8002998 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b10      	cmp	r3, #16
 800291e:	d119      	bne.n	8002954 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0210 	mvn.w	r2, #16
 8002928:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e029      	b.n	80029a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002954:	f7fe fdbc 	bl	80014d0 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	429a      	cmp	r2, r3
 8002962:	d302      	bcc.n	800296a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d116      	bne.n	8002998 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f043 0220 	orr.w	r2, r3, #32
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e007      	b.n	80029a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a2:	2b40      	cmp	r3, #64	; 0x40
 80029a4:	d1b5      	bne.n	8002912 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c6:	d11b      	bne.n	8002a00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f043 0204 	orr.w	r2, r3, #4
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e272      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 8087 	beq.w	8002b3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a2c:	4b92      	ldr	r3, [pc, #584]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d00c      	beq.n	8002a52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a38:	4b8f      	ldr	r3, [pc, #572]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d112      	bne.n	8002a6a <HAL_RCC_OscConfig+0x5e>
 8002a44:	4b8c      	ldr	r3, [pc, #560]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a50:	d10b      	bne.n	8002a6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a52:	4b89      	ldr	r3, [pc, #548]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d06c      	beq.n	8002b38 <HAL_RCC_OscConfig+0x12c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d168      	bne.n	8002b38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e24c      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a72:	d106      	bne.n	8002a82 <HAL_RCC_OscConfig+0x76>
 8002a74:	4b80      	ldr	r3, [pc, #512]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a7f      	ldr	r2, [pc, #508]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	e02e      	b.n	8002ae0 <HAL_RCC_OscConfig+0xd4>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x98>
 8002a8a:	4b7b      	ldr	r3, [pc, #492]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a7a      	ldr	r2, [pc, #488]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b78      	ldr	r3, [pc, #480]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a77      	ldr	r2, [pc, #476]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e01d      	b.n	8002ae0 <HAL_RCC_OscConfig+0xd4>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0xbc>
 8002aae:	4b72      	ldr	r3, [pc, #456]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a71      	ldr	r2, [pc, #452]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4b6f      	ldr	r3, [pc, #444]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a6e      	ldr	r2, [pc, #440]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCC_OscConfig+0xd4>
 8002ac8:	4b6b      	ldr	r3, [pc, #428]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a6a      	ldr	r2, [pc, #424]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	4b68      	ldr	r3, [pc, #416]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a67      	ldr	r2, [pc, #412]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ade:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d013      	beq.n	8002b10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fe fcf2 	bl	80014d0 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af0:	f7fe fcee 	bl	80014d0 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	; 0x64
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e200      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	4b5d      	ldr	r3, [pc, #372]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0xe4>
 8002b0e:	e014      	b.n	8002b3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7fe fcde 	bl	80014d0 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b18:	f7fe fcda 	bl	80014d0 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	; 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e1ec      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2a:	4b53      	ldr	r3, [pc, #332]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x10c>
 8002b36:	e000      	b.n	8002b3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d063      	beq.n	8002c0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b46:	4b4c      	ldr	r3, [pc, #304]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00b      	beq.n	8002b6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b52:	4b49      	ldr	r3, [pc, #292]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d11c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x18c>
 8002b5e:	4b46      	ldr	r3, [pc, #280]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d116      	bne.n	8002b98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6a:	4b43      	ldr	r3, [pc, #268]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <HAL_RCC_OscConfig+0x176>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d001      	beq.n	8002b82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e1c0      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b82:	4b3d      	ldr	r3, [pc, #244]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4939      	ldr	r1, [pc, #228]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b96:	e03a      	b.n	8002c0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d020      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba0:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <HAL_RCC_OscConfig+0x270>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba6:	f7fe fc93 	bl	80014d0 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bae:	f7fe fc8f 	bl	80014d0 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e1a1      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc0:	4b2d      	ldr	r3, [pc, #180]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bcc:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4927      	ldr	r1, [pc, #156]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	600b      	str	r3, [r1, #0]
 8002be0:	e015      	b.n	8002c0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <HAL_RCC_OscConfig+0x270>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7fe fc72 	bl	80014d0 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf0:	f7fe fc6e 	bl	80014d0 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e180      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c02:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d03a      	beq.n	8002c90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d019      	beq.n	8002c56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c22:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c28:	f7fe fc52 	bl	80014d0 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c30:	f7fe fc4e 	bl	80014d0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e160      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f000 fac4 	bl	80031dc <RCC_Delay>
 8002c54:	e01c      	b.n	8002c90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5c:	f7fe fc38 	bl	80014d0 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c62:	e00f      	b.n	8002c84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c64:	f7fe fc34 	bl	80014d0 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d908      	bls.n	8002c84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e146      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	42420000 	.word	0x42420000
 8002c80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c84:	4b92      	ldr	r3, [pc, #584]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1e9      	bne.n	8002c64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80a6 	beq.w	8002dea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca2:	4b8b      	ldr	r3, [pc, #556]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10d      	bne.n	8002cca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	4b88      	ldr	r3, [pc, #544]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	4a87      	ldr	r2, [pc, #540]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	61d3      	str	r3, [r2, #28]
 8002cba:	4b85      	ldr	r3, [pc, #532]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cca:	4b82      	ldr	r3, [pc, #520]	; (8002ed4 <HAL_RCC_OscConfig+0x4c8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d118      	bne.n	8002d08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd6:	4b7f      	ldr	r3, [pc, #508]	; (8002ed4 <HAL_RCC_OscConfig+0x4c8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a7e      	ldr	r2, [pc, #504]	; (8002ed4 <HAL_RCC_OscConfig+0x4c8>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce2:	f7fe fbf5 	bl	80014d0 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cea:	f7fe fbf1 	bl	80014d0 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b64      	cmp	r3, #100	; 0x64
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e103      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfc:	4b75      	ldr	r3, [pc, #468]	; (8002ed4 <HAL_RCC_OscConfig+0x4c8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x312>
 8002d10:	4b6f      	ldr	r3, [pc, #444]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	4a6e      	ldr	r2, [pc, #440]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6213      	str	r3, [r2, #32]
 8002d1c:	e02d      	b.n	8002d7a <HAL_RCC_OscConfig+0x36e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x334>
 8002d26:	4b6a      	ldr	r3, [pc, #424]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4a69      	ldr	r2, [pc, #420]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6213      	str	r3, [r2, #32]
 8002d32:	4b67      	ldr	r3, [pc, #412]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4a66      	ldr	r2, [pc, #408]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	6213      	str	r3, [r2, #32]
 8002d3e:	e01c      	b.n	8002d7a <HAL_RCC_OscConfig+0x36e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b05      	cmp	r3, #5
 8002d46:	d10c      	bne.n	8002d62 <HAL_RCC_OscConfig+0x356>
 8002d48:	4b61      	ldr	r3, [pc, #388]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	4a60      	ldr	r2, [pc, #384]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002d4e:	f043 0304 	orr.w	r3, r3, #4
 8002d52:	6213      	str	r3, [r2, #32]
 8002d54:	4b5e      	ldr	r3, [pc, #376]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4a5d      	ldr	r2, [pc, #372]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6213      	str	r3, [r2, #32]
 8002d60:	e00b      	b.n	8002d7a <HAL_RCC_OscConfig+0x36e>
 8002d62:	4b5b      	ldr	r3, [pc, #364]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	4a5a      	ldr	r2, [pc, #360]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6213      	str	r3, [r2, #32]
 8002d6e:	4b58      	ldr	r3, [pc, #352]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	4a57      	ldr	r2, [pc, #348]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	f023 0304 	bic.w	r3, r3, #4
 8002d78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d015      	beq.n	8002dae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d82:	f7fe fba5 	bl	80014d0 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7fe fba1 	bl	80014d0 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e0b1      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	4b4b      	ldr	r3, [pc, #300]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ee      	beq.n	8002d8a <HAL_RCC_OscConfig+0x37e>
 8002dac:	e014      	b.n	8002dd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dae:	f7fe fb8f 	bl	80014d0 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7fe fb8b 	bl	80014d0 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e09b      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	4b40      	ldr	r3, [pc, #256]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ee      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d105      	bne.n	8002dea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dde:	4b3c      	ldr	r3, [pc, #240]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	4a3b      	ldr	r2, [pc, #236]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 8087 	beq.w	8002f02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df4:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d061      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d146      	bne.n	8002e96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e08:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <HAL_RCC_OscConfig+0x4cc>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0e:	f7fe fb5f 	bl	80014d0 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e16:	f7fe fb5b 	bl	80014d0 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e06d      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e28:	4b29      	ldr	r3, [pc, #164]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f0      	bne.n	8002e16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3c:	d108      	bne.n	8002e50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e3e:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	4921      	ldr	r1, [pc, #132]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e50:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a19      	ldr	r1, [r3, #32]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	430b      	orrs	r3, r1
 8002e62:	491b      	ldr	r1, [pc, #108]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e68:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <HAL_RCC_OscConfig+0x4cc>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fb2f 	bl	80014d0 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe fb2b 	bl	80014d0 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e03d      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e88:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x46a>
 8002e94:	e035      	b.n	8002f02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <HAL_RCC_OscConfig+0x4cc>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fb18 	bl	80014d0 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7fe fb14 	bl	80014d0 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e026      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x498>
 8002ec2:	e01e      	b.n	8002f02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d107      	bne.n	8002edc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e019      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_RCC_OscConfig+0x500>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d106      	bne.n	8002efe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d001      	beq.n	8002f02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000

08002f10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0d0      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f24:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d910      	bls.n	8002f54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 0207 	bic.w	r2, r3, #7
 8002f3a:	4965      	ldr	r1, [pc, #404]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b63      	ldr	r3, [pc, #396]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0b8      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d020      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f6c:	4b59      	ldr	r3, [pc, #356]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4a58      	ldr	r2, [pc, #352]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f84:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a52      	ldr	r2, [pc, #328]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b50      	ldr	r3, [pc, #320]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	494d      	ldr	r1, [pc, #308]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d040      	beq.n	8003030 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b47      	ldr	r3, [pc, #284]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d115      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e07f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fce:	4b41      	ldr	r3, [pc, #260]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e073      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fde:	4b3d      	ldr	r3, [pc, #244]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e06b      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fee:	4b39      	ldr	r3, [pc, #228]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f023 0203 	bic.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4936      	ldr	r1, [pc, #216]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003000:	f7fe fa66 	bl	80014d0 <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	e00a      	b.n	800301e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003008:	f7fe fa62 	bl	80014d0 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e053      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	4b2d      	ldr	r3, [pc, #180]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 020c 	and.w	r2, r3, #12
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	429a      	cmp	r2, r3
 800302e:	d1eb      	bne.n	8003008 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003030:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d210      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 0207 	bic.w	r2, r3, #7
 8003046:	4922      	ldr	r1, [pc, #136]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e032      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4916      	ldr	r1, [pc, #88]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 800307a:	4313      	orrs	r3, r2
 800307c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800308a:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	490e      	ldr	r1, [pc, #56]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	4313      	orrs	r3, r2
 800309c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800309e:	f000 f821 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80030a2:	4602      	mov	r2, r0
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	490a      	ldr	r1, [pc, #40]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 80030b0:	5ccb      	ldrb	r3, [r1, r3]
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	4a09      	ldr	r2, [pc, #36]	; (80030dc <HAL_RCC_ClockConfig+0x1cc>)
 80030b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x1d0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe f9c4 	bl	800144c <HAL_InitTick>

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40022000 	.word	0x40022000
 80030d4:	40021000 	.word	0x40021000
 80030d8:	080060bc 	.word	0x080060bc
 80030dc:	20000000 	.word	0x20000000
 80030e0:	20000004 	.word	0x20000004

080030e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e4:	b490      	push	{r4, r7}
 80030e6:	b08a      	sub	sp, #40	; 0x28
 80030e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030ea:	4b29      	ldr	r3, [pc, #164]	; (8003190 <HAL_RCC_GetSysClockFreq+0xac>)
 80030ec:	1d3c      	adds	r4, r7, #4
 80030ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030f4:	f240 2301 	movw	r3, #513	; 0x201
 80030f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	2300      	movs	r3, #0
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800310e:	4b21      	ldr	r3, [pc, #132]	; (8003194 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b04      	cmp	r3, #4
 800311c:	d002      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x40>
 800311e:	2b08      	cmp	r3, #8
 8003120:	d003      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0x46>
 8003122:	e02b      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003124:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003126:	623b      	str	r3, [r7, #32]
      break;
 8003128:	e02b      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	0c9b      	lsrs	r3, r3, #18
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	3328      	adds	r3, #40	; 0x28
 8003134:	443b      	add	r3, r7
 8003136:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800313a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d012      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003146:	4b13      	ldr	r3, [pc, #76]	; (8003194 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	0c5b      	lsrs	r3, r3, #17
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	3328      	adds	r3, #40	; 0x28
 8003152:	443b      	add	r3, r7
 8003154:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003158:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	4a0e      	ldr	r2, [pc, #56]	; (8003198 <HAL_RCC_GetSysClockFreq+0xb4>)
 800315e:	fb03 f202 	mul.w	r2, r3, r2
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
 800316a:	e004      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	4a0b      	ldr	r2, [pc, #44]	; (800319c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003170:	fb02 f303 	mul.w	r3, r2, r3
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	623b      	str	r3, [r7, #32]
      break;
 800317a:	e002      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_RCC_GetSysClockFreq+0xb4>)
 800317e:	623b      	str	r3, [r7, #32]
      break;
 8003180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003182:	6a3b      	ldr	r3, [r7, #32]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3728      	adds	r7, #40	; 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bc90      	pop	{r4, r7}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	080060ac 	.word	0x080060ac
 8003194:	40021000 	.word	0x40021000
 8003198:	007a1200 	.word	0x007a1200
 800319c:	003d0900 	.word	0x003d0900

080031a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a4:	4b02      	ldr	r3, [pc, #8]	; (80031b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	20000000 	.word	0x20000000

080031b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031b8:	f7ff fff2 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	0a1b      	lsrs	r3, r3, #8
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	4903      	ldr	r1, [pc, #12]	; (80031d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ca:	5ccb      	ldrb	r3, [r1, r3]
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000
 80031d8:	080060cc 	.word	0x080060cc

080031dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031e4:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <RCC_Delay+0x34>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <RCC_Delay+0x38>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	0a5b      	lsrs	r3, r3, #9
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	fb02 f303 	mul.w	r3, r2, r3
 80031f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031f8:	bf00      	nop
  }
  while (Delay --);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1e5a      	subs	r2, r3, #1
 80031fe:	60fa      	str	r2, [r7, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f9      	bne.n	80031f8 <RCC_Delay+0x1c>
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	20000000 	.word	0x20000000
 8003214:	10624dd3 	.word	0x10624dd3

08003218 <__errno>:
 8003218:	4b01      	ldr	r3, [pc, #4]	; (8003220 <__errno+0x8>)
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	2000000c 	.word	0x2000000c

08003224 <__libc_init_array>:
 8003224:	b570      	push	{r4, r5, r6, lr}
 8003226:	2600      	movs	r6, #0
 8003228:	4d0c      	ldr	r5, [pc, #48]	; (800325c <__libc_init_array+0x38>)
 800322a:	4c0d      	ldr	r4, [pc, #52]	; (8003260 <__libc_init_array+0x3c>)
 800322c:	1b64      	subs	r4, r4, r5
 800322e:	10a4      	asrs	r4, r4, #2
 8003230:	42a6      	cmp	r6, r4
 8003232:	d109      	bne.n	8003248 <__libc_init_array+0x24>
 8003234:	f002 ff10 	bl	8006058 <_init>
 8003238:	2600      	movs	r6, #0
 800323a:	4d0a      	ldr	r5, [pc, #40]	; (8003264 <__libc_init_array+0x40>)
 800323c:	4c0a      	ldr	r4, [pc, #40]	; (8003268 <__libc_init_array+0x44>)
 800323e:	1b64      	subs	r4, r4, r5
 8003240:	10a4      	asrs	r4, r4, #2
 8003242:	42a6      	cmp	r6, r4
 8003244:	d105      	bne.n	8003252 <__libc_init_array+0x2e>
 8003246:	bd70      	pop	{r4, r5, r6, pc}
 8003248:	f855 3b04 	ldr.w	r3, [r5], #4
 800324c:	4798      	blx	r3
 800324e:	3601      	adds	r6, #1
 8003250:	e7ee      	b.n	8003230 <__libc_init_array+0xc>
 8003252:	f855 3b04 	ldr.w	r3, [r5], #4
 8003256:	4798      	blx	r3
 8003258:	3601      	adds	r6, #1
 800325a:	e7f2      	b.n	8003242 <__libc_init_array+0x1e>
 800325c:	080064ac 	.word	0x080064ac
 8003260:	080064ac 	.word	0x080064ac
 8003264:	080064ac 	.word	0x080064ac
 8003268:	080064b0 	.word	0x080064b0

0800326c <memset>:
 800326c:	4603      	mov	r3, r0
 800326e:	4402      	add	r2, r0
 8003270:	4293      	cmp	r3, r2
 8003272:	d100      	bne.n	8003276 <memset+0xa>
 8003274:	4770      	bx	lr
 8003276:	f803 1b01 	strb.w	r1, [r3], #1
 800327a:	e7f9      	b.n	8003270 <memset+0x4>

0800327c <__cvt>:
 800327c:	2b00      	cmp	r3, #0
 800327e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003282:	461f      	mov	r7, r3
 8003284:	bfbb      	ittet	lt
 8003286:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800328a:	461f      	movlt	r7, r3
 800328c:	2300      	movge	r3, #0
 800328e:	232d      	movlt	r3, #45	; 0x2d
 8003290:	b088      	sub	sp, #32
 8003292:	4614      	mov	r4, r2
 8003294:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003296:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003298:	7013      	strb	r3, [r2, #0]
 800329a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800329c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80032a0:	f023 0820 	bic.w	r8, r3, #32
 80032a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032a8:	d005      	beq.n	80032b6 <__cvt+0x3a>
 80032aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80032ae:	d100      	bne.n	80032b2 <__cvt+0x36>
 80032b0:	3501      	adds	r5, #1
 80032b2:	2302      	movs	r3, #2
 80032b4:	e000      	b.n	80032b8 <__cvt+0x3c>
 80032b6:	2303      	movs	r3, #3
 80032b8:	aa07      	add	r2, sp, #28
 80032ba:	9204      	str	r2, [sp, #16]
 80032bc:	aa06      	add	r2, sp, #24
 80032be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80032c2:	e9cd 3500 	strd	r3, r5, [sp]
 80032c6:	4622      	mov	r2, r4
 80032c8:	463b      	mov	r3, r7
 80032ca:	f000 fcf9 	bl	8003cc0 <_dtoa_r>
 80032ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80032d2:	4606      	mov	r6, r0
 80032d4:	d102      	bne.n	80032dc <__cvt+0x60>
 80032d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80032d8:	07db      	lsls	r3, r3, #31
 80032da:	d522      	bpl.n	8003322 <__cvt+0xa6>
 80032dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032e0:	eb06 0905 	add.w	r9, r6, r5
 80032e4:	d110      	bne.n	8003308 <__cvt+0x8c>
 80032e6:	7833      	ldrb	r3, [r6, #0]
 80032e8:	2b30      	cmp	r3, #48	; 0x30
 80032ea:	d10a      	bne.n	8003302 <__cvt+0x86>
 80032ec:	2200      	movs	r2, #0
 80032ee:	2300      	movs	r3, #0
 80032f0:	4620      	mov	r0, r4
 80032f2:	4639      	mov	r1, r7
 80032f4:	f7fd fb58 	bl	80009a8 <__aeabi_dcmpeq>
 80032f8:	b918      	cbnz	r0, 8003302 <__cvt+0x86>
 80032fa:	f1c5 0501 	rsb	r5, r5, #1
 80032fe:	f8ca 5000 	str.w	r5, [sl]
 8003302:	f8da 3000 	ldr.w	r3, [sl]
 8003306:	4499      	add	r9, r3
 8003308:	2200      	movs	r2, #0
 800330a:	2300      	movs	r3, #0
 800330c:	4620      	mov	r0, r4
 800330e:	4639      	mov	r1, r7
 8003310:	f7fd fb4a 	bl	80009a8 <__aeabi_dcmpeq>
 8003314:	b108      	cbz	r0, 800331a <__cvt+0x9e>
 8003316:	f8cd 901c 	str.w	r9, [sp, #28]
 800331a:	2230      	movs	r2, #48	; 0x30
 800331c:	9b07      	ldr	r3, [sp, #28]
 800331e:	454b      	cmp	r3, r9
 8003320:	d307      	bcc.n	8003332 <__cvt+0xb6>
 8003322:	4630      	mov	r0, r6
 8003324:	9b07      	ldr	r3, [sp, #28]
 8003326:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003328:	1b9b      	subs	r3, r3, r6
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	b008      	add	sp, #32
 800332e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003332:	1c59      	adds	r1, r3, #1
 8003334:	9107      	str	r1, [sp, #28]
 8003336:	701a      	strb	r2, [r3, #0]
 8003338:	e7f0      	b.n	800331c <__cvt+0xa0>

0800333a <__exponent>:
 800333a:	4603      	mov	r3, r0
 800333c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800333e:	2900      	cmp	r1, #0
 8003340:	f803 2b02 	strb.w	r2, [r3], #2
 8003344:	bfb6      	itet	lt
 8003346:	222d      	movlt	r2, #45	; 0x2d
 8003348:	222b      	movge	r2, #43	; 0x2b
 800334a:	4249      	neglt	r1, r1
 800334c:	2909      	cmp	r1, #9
 800334e:	7042      	strb	r2, [r0, #1]
 8003350:	dd2b      	ble.n	80033aa <__exponent+0x70>
 8003352:	f10d 0407 	add.w	r4, sp, #7
 8003356:	46a4      	mov	ip, r4
 8003358:	270a      	movs	r7, #10
 800335a:	fb91 f6f7 	sdiv	r6, r1, r7
 800335e:	460a      	mov	r2, r1
 8003360:	46a6      	mov	lr, r4
 8003362:	fb07 1516 	mls	r5, r7, r6, r1
 8003366:	2a63      	cmp	r2, #99	; 0x63
 8003368:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800336c:	4631      	mov	r1, r6
 800336e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003372:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003376:	dcf0      	bgt.n	800335a <__exponent+0x20>
 8003378:	3130      	adds	r1, #48	; 0x30
 800337a:	f1ae 0502 	sub.w	r5, lr, #2
 800337e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003382:	4629      	mov	r1, r5
 8003384:	1c44      	adds	r4, r0, #1
 8003386:	4561      	cmp	r1, ip
 8003388:	d30a      	bcc.n	80033a0 <__exponent+0x66>
 800338a:	f10d 0209 	add.w	r2, sp, #9
 800338e:	eba2 020e 	sub.w	r2, r2, lr
 8003392:	4565      	cmp	r5, ip
 8003394:	bf88      	it	hi
 8003396:	2200      	movhi	r2, #0
 8003398:	4413      	add	r3, r2
 800339a:	1a18      	subs	r0, r3, r0
 800339c:	b003      	add	sp, #12
 800339e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033a4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80033a8:	e7ed      	b.n	8003386 <__exponent+0x4c>
 80033aa:	2330      	movs	r3, #48	; 0x30
 80033ac:	3130      	adds	r1, #48	; 0x30
 80033ae:	7083      	strb	r3, [r0, #2]
 80033b0:	70c1      	strb	r1, [r0, #3]
 80033b2:	1d03      	adds	r3, r0, #4
 80033b4:	e7f1      	b.n	800339a <__exponent+0x60>
	...

080033b8 <_printf_float>:
 80033b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033bc:	b091      	sub	sp, #68	; 0x44
 80033be:	460c      	mov	r4, r1
 80033c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80033c4:	4616      	mov	r6, r2
 80033c6:	461f      	mov	r7, r3
 80033c8:	4605      	mov	r5, r0
 80033ca:	f001 fa67 	bl	800489c <_localeconv_r>
 80033ce:	6803      	ldr	r3, [r0, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	9309      	str	r3, [sp, #36]	; 0x24
 80033d4:	f7fc febc 	bl	8000150 <strlen>
 80033d8:	2300      	movs	r3, #0
 80033da:	930e      	str	r3, [sp, #56]	; 0x38
 80033dc:	f8d8 3000 	ldr.w	r3, [r8]
 80033e0:	900a      	str	r0, [sp, #40]	; 0x28
 80033e2:	3307      	adds	r3, #7
 80033e4:	f023 0307 	bic.w	r3, r3, #7
 80033e8:	f103 0208 	add.w	r2, r3, #8
 80033ec:	f894 9018 	ldrb.w	r9, [r4, #24]
 80033f0:	f8d4 b000 	ldr.w	fp, [r4]
 80033f4:	f8c8 2000 	str.w	r2, [r8]
 80033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003400:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003404:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003408:	930b      	str	r3, [sp, #44]	; 0x2c
 800340a:	f04f 32ff 	mov.w	r2, #4294967295
 800340e:	4640      	mov	r0, r8
 8003410:	4b9c      	ldr	r3, [pc, #624]	; (8003684 <_printf_float+0x2cc>)
 8003412:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003414:	f7fd fafa 	bl	8000a0c <__aeabi_dcmpun>
 8003418:	bb70      	cbnz	r0, 8003478 <_printf_float+0xc0>
 800341a:	f04f 32ff 	mov.w	r2, #4294967295
 800341e:	4640      	mov	r0, r8
 8003420:	4b98      	ldr	r3, [pc, #608]	; (8003684 <_printf_float+0x2cc>)
 8003422:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003424:	f7fd fad4 	bl	80009d0 <__aeabi_dcmple>
 8003428:	bb30      	cbnz	r0, 8003478 <_printf_float+0xc0>
 800342a:	2200      	movs	r2, #0
 800342c:	2300      	movs	r3, #0
 800342e:	4640      	mov	r0, r8
 8003430:	4651      	mov	r1, sl
 8003432:	f7fd fac3 	bl	80009bc <__aeabi_dcmplt>
 8003436:	b110      	cbz	r0, 800343e <_printf_float+0x86>
 8003438:	232d      	movs	r3, #45	; 0x2d
 800343a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800343e:	4b92      	ldr	r3, [pc, #584]	; (8003688 <_printf_float+0x2d0>)
 8003440:	4892      	ldr	r0, [pc, #584]	; (800368c <_printf_float+0x2d4>)
 8003442:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003446:	bf94      	ite	ls
 8003448:	4698      	movls	r8, r3
 800344a:	4680      	movhi	r8, r0
 800344c:	2303      	movs	r3, #3
 800344e:	f04f 0a00 	mov.w	sl, #0
 8003452:	6123      	str	r3, [r4, #16]
 8003454:	f02b 0304 	bic.w	r3, fp, #4
 8003458:	6023      	str	r3, [r4, #0]
 800345a:	4633      	mov	r3, r6
 800345c:	4621      	mov	r1, r4
 800345e:	4628      	mov	r0, r5
 8003460:	9700      	str	r7, [sp, #0]
 8003462:	aa0f      	add	r2, sp, #60	; 0x3c
 8003464:	f000 f9d4 	bl	8003810 <_printf_common>
 8003468:	3001      	adds	r0, #1
 800346a:	f040 8090 	bne.w	800358e <_printf_float+0x1d6>
 800346e:	f04f 30ff 	mov.w	r0, #4294967295
 8003472:	b011      	add	sp, #68	; 0x44
 8003474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003478:	4642      	mov	r2, r8
 800347a:	4653      	mov	r3, sl
 800347c:	4640      	mov	r0, r8
 800347e:	4651      	mov	r1, sl
 8003480:	f7fd fac4 	bl	8000a0c <__aeabi_dcmpun>
 8003484:	b148      	cbz	r0, 800349a <_printf_float+0xe2>
 8003486:	f1ba 0f00 	cmp.w	sl, #0
 800348a:	bfb8      	it	lt
 800348c:	232d      	movlt	r3, #45	; 0x2d
 800348e:	4880      	ldr	r0, [pc, #512]	; (8003690 <_printf_float+0x2d8>)
 8003490:	bfb8      	it	lt
 8003492:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003496:	4b7f      	ldr	r3, [pc, #508]	; (8003694 <_printf_float+0x2dc>)
 8003498:	e7d3      	b.n	8003442 <_printf_float+0x8a>
 800349a:	6863      	ldr	r3, [r4, #4]
 800349c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	d142      	bne.n	800352a <_printf_float+0x172>
 80034a4:	2306      	movs	r3, #6
 80034a6:	6063      	str	r3, [r4, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	9206      	str	r2, [sp, #24]
 80034ac:	aa0e      	add	r2, sp, #56	; 0x38
 80034ae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80034b2:	aa0d      	add	r2, sp, #52	; 0x34
 80034b4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80034b8:	9203      	str	r2, [sp, #12]
 80034ba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80034be:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80034c2:	6023      	str	r3, [r4, #0]
 80034c4:	6863      	ldr	r3, [r4, #4]
 80034c6:	4642      	mov	r2, r8
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	4628      	mov	r0, r5
 80034cc:	4653      	mov	r3, sl
 80034ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80034d0:	f7ff fed4 	bl	800327c <__cvt>
 80034d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034d6:	4680      	mov	r8, r0
 80034d8:	2947      	cmp	r1, #71	; 0x47
 80034da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80034dc:	d108      	bne.n	80034f0 <_printf_float+0x138>
 80034de:	1cc8      	adds	r0, r1, #3
 80034e0:	db02      	blt.n	80034e8 <_printf_float+0x130>
 80034e2:	6863      	ldr	r3, [r4, #4]
 80034e4:	4299      	cmp	r1, r3
 80034e6:	dd40      	ble.n	800356a <_printf_float+0x1b2>
 80034e8:	f1a9 0902 	sub.w	r9, r9, #2
 80034ec:	fa5f f989 	uxtb.w	r9, r9
 80034f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80034f4:	d81f      	bhi.n	8003536 <_printf_float+0x17e>
 80034f6:	464a      	mov	r2, r9
 80034f8:	3901      	subs	r1, #1
 80034fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80034fe:	910d      	str	r1, [sp, #52]	; 0x34
 8003500:	f7ff ff1b 	bl	800333a <__exponent>
 8003504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003506:	4682      	mov	sl, r0
 8003508:	1813      	adds	r3, r2, r0
 800350a:	2a01      	cmp	r2, #1
 800350c:	6123      	str	r3, [r4, #16]
 800350e:	dc02      	bgt.n	8003516 <_printf_float+0x15e>
 8003510:	6822      	ldr	r2, [r4, #0]
 8003512:	07d2      	lsls	r2, r2, #31
 8003514:	d501      	bpl.n	800351a <_printf_float+0x162>
 8003516:	3301      	adds	r3, #1
 8003518:	6123      	str	r3, [r4, #16]
 800351a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800351e:	2b00      	cmp	r3, #0
 8003520:	d09b      	beq.n	800345a <_printf_float+0xa2>
 8003522:	232d      	movs	r3, #45	; 0x2d
 8003524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003528:	e797      	b.n	800345a <_printf_float+0xa2>
 800352a:	2947      	cmp	r1, #71	; 0x47
 800352c:	d1bc      	bne.n	80034a8 <_printf_float+0xf0>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1ba      	bne.n	80034a8 <_printf_float+0xf0>
 8003532:	2301      	movs	r3, #1
 8003534:	e7b7      	b.n	80034a6 <_printf_float+0xee>
 8003536:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800353a:	d118      	bne.n	800356e <_printf_float+0x1b6>
 800353c:	2900      	cmp	r1, #0
 800353e:	6863      	ldr	r3, [r4, #4]
 8003540:	dd0b      	ble.n	800355a <_printf_float+0x1a2>
 8003542:	6121      	str	r1, [r4, #16]
 8003544:	b913      	cbnz	r3, 800354c <_printf_float+0x194>
 8003546:	6822      	ldr	r2, [r4, #0]
 8003548:	07d0      	lsls	r0, r2, #31
 800354a:	d502      	bpl.n	8003552 <_printf_float+0x19a>
 800354c:	3301      	adds	r3, #1
 800354e:	440b      	add	r3, r1
 8003550:	6123      	str	r3, [r4, #16]
 8003552:	f04f 0a00 	mov.w	sl, #0
 8003556:	65a1      	str	r1, [r4, #88]	; 0x58
 8003558:	e7df      	b.n	800351a <_printf_float+0x162>
 800355a:	b913      	cbnz	r3, 8003562 <_printf_float+0x1aa>
 800355c:	6822      	ldr	r2, [r4, #0]
 800355e:	07d2      	lsls	r2, r2, #31
 8003560:	d501      	bpl.n	8003566 <_printf_float+0x1ae>
 8003562:	3302      	adds	r3, #2
 8003564:	e7f4      	b.n	8003550 <_printf_float+0x198>
 8003566:	2301      	movs	r3, #1
 8003568:	e7f2      	b.n	8003550 <_printf_float+0x198>
 800356a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800356e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003570:	4299      	cmp	r1, r3
 8003572:	db05      	blt.n	8003580 <_printf_float+0x1c8>
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	6121      	str	r1, [r4, #16]
 8003578:	07d8      	lsls	r0, r3, #31
 800357a:	d5ea      	bpl.n	8003552 <_printf_float+0x19a>
 800357c:	1c4b      	adds	r3, r1, #1
 800357e:	e7e7      	b.n	8003550 <_printf_float+0x198>
 8003580:	2900      	cmp	r1, #0
 8003582:	bfcc      	ite	gt
 8003584:	2201      	movgt	r2, #1
 8003586:	f1c1 0202 	rsble	r2, r1, #2
 800358a:	4413      	add	r3, r2
 800358c:	e7e0      	b.n	8003550 <_printf_float+0x198>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	055a      	lsls	r2, r3, #21
 8003592:	d407      	bmi.n	80035a4 <_printf_float+0x1ec>
 8003594:	6923      	ldr	r3, [r4, #16]
 8003596:	4642      	mov	r2, r8
 8003598:	4631      	mov	r1, r6
 800359a:	4628      	mov	r0, r5
 800359c:	47b8      	blx	r7
 800359e:	3001      	adds	r0, #1
 80035a0:	d12b      	bne.n	80035fa <_printf_float+0x242>
 80035a2:	e764      	b.n	800346e <_printf_float+0xb6>
 80035a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80035a8:	f240 80dd 	bls.w	8003766 <_printf_float+0x3ae>
 80035ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035b0:	2200      	movs	r2, #0
 80035b2:	2300      	movs	r3, #0
 80035b4:	f7fd f9f8 	bl	80009a8 <__aeabi_dcmpeq>
 80035b8:	2800      	cmp	r0, #0
 80035ba:	d033      	beq.n	8003624 <_printf_float+0x26c>
 80035bc:	2301      	movs	r3, #1
 80035be:	4631      	mov	r1, r6
 80035c0:	4628      	mov	r0, r5
 80035c2:	4a35      	ldr	r2, [pc, #212]	; (8003698 <_printf_float+0x2e0>)
 80035c4:	47b8      	blx	r7
 80035c6:	3001      	adds	r0, #1
 80035c8:	f43f af51 	beq.w	800346e <_printf_float+0xb6>
 80035cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035d0:	429a      	cmp	r2, r3
 80035d2:	db02      	blt.n	80035da <_printf_float+0x222>
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	07d8      	lsls	r0, r3, #31
 80035d8:	d50f      	bpl.n	80035fa <_printf_float+0x242>
 80035da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035de:	4631      	mov	r1, r6
 80035e0:	4628      	mov	r0, r5
 80035e2:	47b8      	blx	r7
 80035e4:	3001      	adds	r0, #1
 80035e6:	f43f af42 	beq.w	800346e <_printf_float+0xb6>
 80035ea:	f04f 0800 	mov.w	r8, #0
 80035ee:	f104 091a 	add.w	r9, r4, #26
 80035f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035f4:	3b01      	subs	r3, #1
 80035f6:	4543      	cmp	r3, r8
 80035f8:	dc09      	bgt.n	800360e <_printf_float+0x256>
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	079b      	lsls	r3, r3, #30
 80035fe:	f100 8102 	bmi.w	8003806 <_printf_float+0x44e>
 8003602:	68e0      	ldr	r0, [r4, #12]
 8003604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003606:	4298      	cmp	r0, r3
 8003608:	bfb8      	it	lt
 800360a:	4618      	movlt	r0, r3
 800360c:	e731      	b.n	8003472 <_printf_float+0xba>
 800360e:	2301      	movs	r3, #1
 8003610:	464a      	mov	r2, r9
 8003612:	4631      	mov	r1, r6
 8003614:	4628      	mov	r0, r5
 8003616:	47b8      	blx	r7
 8003618:	3001      	adds	r0, #1
 800361a:	f43f af28 	beq.w	800346e <_printf_float+0xb6>
 800361e:	f108 0801 	add.w	r8, r8, #1
 8003622:	e7e6      	b.n	80035f2 <_printf_float+0x23a>
 8003624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003626:	2b00      	cmp	r3, #0
 8003628:	dc38      	bgt.n	800369c <_printf_float+0x2e4>
 800362a:	2301      	movs	r3, #1
 800362c:	4631      	mov	r1, r6
 800362e:	4628      	mov	r0, r5
 8003630:	4a19      	ldr	r2, [pc, #100]	; (8003698 <_printf_float+0x2e0>)
 8003632:	47b8      	blx	r7
 8003634:	3001      	adds	r0, #1
 8003636:	f43f af1a 	beq.w	800346e <_printf_float+0xb6>
 800363a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800363e:	4313      	orrs	r3, r2
 8003640:	d102      	bne.n	8003648 <_printf_float+0x290>
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	07d9      	lsls	r1, r3, #31
 8003646:	d5d8      	bpl.n	80035fa <_printf_float+0x242>
 8003648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800364c:	4631      	mov	r1, r6
 800364e:	4628      	mov	r0, r5
 8003650:	47b8      	blx	r7
 8003652:	3001      	adds	r0, #1
 8003654:	f43f af0b 	beq.w	800346e <_printf_float+0xb6>
 8003658:	f04f 0900 	mov.w	r9, #0
 800365c:	f104 0a1a 	add.w	sl, r4, #26
 8003660:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003662:	425b      	negs	r3, r3
 8003664:	454b      	cmp	r3, r9
 8003666:	dc01      	bgt.n	800366c <_printf_float+0x2b4>
 8003668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800366a:	e794      	b.n	8003596 <_printf_float+0x1de>
 800366c:	2301      	movs	r3, #1
 800366e:	4652      	mov	r2, sl
 8003670:	4631      	mov	r1, r6
 8003672:	4628      	mov	r0, r5
 8003674:	47b8      	blx	r7
 8003676:	3001      	adds	r0, #1
 8003678:	f43f aef9 	beq.w	800346e <_printf_float+0xb6>
 800367c:	f109 0901 	add.w	r9, r9, #1
 8003680:	e7ee      	b.n	8003660 <_printf_float+0x2a8>
 8003682:	bf00      	nop
 8003684:	7fefffff 	.word	0x7fefffff
 8003688:	080060d8 	.word	0x080060d8
 800368c:	080060dc 	.word	0x080060dc
 8003690:	080060e4 	.word	0x080060e4
 8003694:	080060e0 	.word	0x080060e0
 8003698:	080060e8 	.word	0x080060e8
 800369c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800369e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036a0:	429a      	cmp	r2, r3
 80036a2:	bfa8      	it	ge
 80036a4:	461a      	movge	r2, r3
 80036a6:	2a00      	cmp	r2, #0
 80036a8:	4691      	mov	r9, r2
 80036aa:	dc37      	bgt.n	800371c <_printf_float+0x364>
 80036ac:	f04f 0b00 	mov.w	fp, #0
 80036b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036b4:	f104 021a 	add.w	r2, r4, #26
 80036b8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80036bc:	ebaa 0309 	sub.w	r3, sl, r9
 80036c0:	455b      	cmp	r3, fp
 80036c2:	dc33      	bgt.n	800372c <_printf_float+0x374>
 80036c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036c8:	429a      	cmp	r2, r3
 80036ca:	db3b      	blt.n	8003744 <_printf_float+0x38c>
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	07da      	lsls	r2, r3, #31
 80036d0:	d438      	bmi.n	8003744 <_printf_float+0x38c>
 80036d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80036d6:	eba3 020a 	sub.w	r2, r3, sl
 80036da:	eba3 0901 	sub.w	r9, r3, r1
 80036de:	4591      	cmp	r9, r2
 80036e0:	bfa8      	it	ge
 80036e2:	4691      	movge	r9, r2
 80036e4:	f1b9 0f00 	cmp.w	r9, #0
 80036e8:	dc34      	bgt.n	8003754 <_printf_float+0x39c>
 80036ea:	f04f 0800 	mov.w	r8, #0
 80036ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036f2:	f104 0a1a 	add.w	sl, r4, #26
 80036f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	eba3 0309 	sub.w	r3, r3, r9
 8003700:	4543      	cmp	r3, r8
 8003702:	f77f af7a 	ble.w	80035fa <_printf_float+0x242>
 8003706:	2301      	movs	r3, #1
 8003708:	4652      	mov	r2, sl
 800370a:	4631      	mov	r1, r6
 800370c:	4628      	mov	r0, r5
 800370e:	47b8      	blx	r7
 8003710:	3001      	adds	r0, #1
 8003712:	f43f aeac 	beq.w	800346e <_printf_float+0xb6>
 8003716:	f108 0801 	add.w	r8, r8, #1
 800371a:	e7ec      	b.n	80036f6 <_printf_float+0x33e>
 800371c:	4613      	mov	r3, r2
 800371e:	4631      	mov	r1, r6
 8003720:	4642      	mov	r2, r8
 8003722:	4628      	mov	r0, r5
 8003724:	47b8      	blx	r7
 8003726:	3001      	adds	r0, #1
 8003728:	d1c0      	bne.n	80036ac <_printf_float+0x2f4>
 800372a:	e6a0      	b.n	800346e <_printf_float+0xb6>
 800372c:	2301      	movs	r3, #1
 800372e:	4631      	mov	r1, r6
 8003730:	4628      	mov	r0, r5
 8003732:	920b      	str	r2, [sp, #44]	; 0x2c
 8003734:	47b8      	blx	r7
 8003736:	3001      	adds	r0, #1
 8003738:	f43f ae99 	beq.w	800346e <_printf_float+0xb6>
 800373c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800373e:	f10b 0b01 	add.w	fp, fp, #1
 8003742:	e7b9      	b.n	80036b8 <_printf_float+0x300>
 8003744:	4631      	mov	r1, r6
 8003746:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800374a:	4628      	mov	r0, r5
 800374c:	47b8      	blx	r7
 800374e:	3001      	adds	r0, #1
 8003750:	d1bf      	bne.n	80036d2 <_printf_float+0x31a>
 8003752:	e68c      	b.n	800346e <_printf_float+0xb6>
 8003754:	464b      	mov	r3, r9
 8003756:	4631      	mov	r1, r6
 8003758:	4628      	mov	r0, r5
 800375a:	eb08 020a 	add.w	r2, r8, sl
 800375e:	47b8      	blx	r7
 8003760:	3001      	adds	r0, #1
 8003762:	d1c2      	bne.n	80036ea <_printf_float+0x332>
 8003764:	e683      	b.n	800346e <_printf_float+0xb6>
 8003766:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003768:	2a01      	cmp	r2, #1
 800376a:	dc01      	bgt.n	8003770 <_printf_float+0x3b8>
 800376c:	07db      	lsls	r3, r3, #31
 800376e:	d537      	bpl.n	80037e0 <_printf_float+0x428>
 8003770:	2301      	movs	r3, #1
 8003772:	4642      	mov	r2, r8
 8003774:	4631      	mov	r1, r6
 8003776:	4628      	mov	r0, r5
 8003778:	47b8      	blx	r7
 800377a:	3001      	adds	r0, #1
 800377c:	f43f ae77 	beq.w	800346e <_printf_float+0xb6>
 8003780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003784:	4631      	mov	r1, r6
 8003786:	4628      	mov	r0, r5
 8003788:	47b8      	blx	r7
 800378a:	3001      	adds	r0, #1
 800378c:	f43f ae6f 	beq.w	800346e <_printf_float+0xb6>
 8003790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003794:	2200      	movs	r2, #0
 8003796:	2300      	movs	r3, #0
 8003798:	f7fd f906 	bl	80009a8 <__aeabi_dcmpeq>
 800379c:	b9d8      	cbnz	r0, 80037d6 <_printf_float+0x41e>
 800379e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037a0:	f108 0201 	add.w	r2, r8, #1
 80037a4:	3b01      	subs	r3, #1
 80037a6:	4631      	mov	r1, r6
 80037a8:	4628      	mov	r0, r5
 80037aa:	47b8      	blx	r7
 80037ac:	3001      	adds	r0, #1
 80037ae:	d10e      	bne.n	80037ce <_printf_float+0x416>
 80037b0:	e65d      	b.n	800346e <_printf_float+0xb6>
 80037b2:	2301      	movs	r3, #1
 80037b4:	464a      	mov	r2, r9
 80037b6:	4631      	mov	r1, r6
 80037b8:	4628      	mov	r0, r5
 80037ba:	47b8      	blx	r7
 80037bc:	3001      	adds	r0, #1
 80037be:	f43f ae56 	beq.w	800346e <_printf_float+0xb6>
 80037c2:	f108 0801 	add.w	r8, r8, #1
 80037c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037c8:	3b01      	subs	r3, #1
 80037ca:	4543      	cmp	r3, r8
 80037cc:	dcf1      	bgt.n	80037b2 <_printf_float+0x3fa>
 80037ce:	4653      	mov	r3, sl
 80037d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80037d4:	e6e0      	b.n	8003598 <_printf_float+0x1e0>
 80037d6:	f04f 0800 	mov.w	r8, #0
 80037da:	f104 091a 	add.w	r9, r4, #26
 80037de:	e7f2      	b.n	80037c6 <_printf_float+0x40e>
 80037e0:	2301      	movs	r3, #1
 80037e2:	4642      	mov	r2, r8
 80037e4:	e7df      	b.n	80037a6 <_printf_float+0x3ee>
 80037e6:	2301      	movs	r3, #1
 80037e8:	464a      	mov	r2, r9
 80037ea:	4631      	mov	r1, r6
 80037ec:	4628      	mov	r0, r5
 80037ee:	47b8      	blx	r7
 80037f0:	3001      	adds	r0, #1
 80037f2:	f43f ae3c 	beq.w	800346e <_printf_float+0xb6>
 80037f6:	f108 0801 	add.w	r8, r8, #1
 80037fa:	68e3      	ldr	r3, [r4, #12]
 80037fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80037fe:	1a5b      	subs	r3, r3, r1
 8003800:	4543      	cmp	r3, r8
 8003802:	dcf0      	bgt.n	80037e6 <_printf_float+0x42e>
 8003804:	e6fd      	b.n	8003602 <_printf_float+0x24a>
 8003806:	f04f 0800 	mov.w	r8, #0
 800380a:	f104 0919 	add.w	r9, r4, #25
 800380e:	e7f4      	b.n	80037fa <_printf_float+0x442>

08003810 <_printf_common>:
 8003810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003814:	4616      	mov	r6, r2
 8003816:	4699      	mov	r9, r3
 8003818:	688a      	ldr	r2, [r1, #8]
 800381a:	690b      	ldr	r3, [r1, #16]
 800381c:	4607      	mov	r7, r0
 800381e:	4293      	cmp	r3, r2
 8003820:	bfb8      	it	lt
 8003822:	4613      	movlt	r3, r2
 8003824:	6033      	str	r3, [r6, #0]
 8003826:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800382a:	460c      	mov	r4, r1
 800382c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003830:	b10a      	cbz	r2, 8003836 <_printf_common+0x26>
 8003832:	3301      	adds	r3, #1
 8003834:	6033      	str	r3, [r6, #0]
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	0699      	lsls	r1, r3, #26
 800383a:	bf42      	ittt	mi
 800383c:	6833      	ldrmi	r3, [r6, #0]
 800383e:	3302      	addmi	r3, #2
 8003840:	6033      	strmi	r3, [r6, #0]
 8003842:	6825      	ldr	r5, [r4, #0]
 8003844:	f015 0506 	ands.w	r5, r5, #6
 8003848:	d106      	bne.n	8003858 <_printf_common+0x48>
 800384a:	f104 0a19 	add.w	sl, r4, #25
 800384e:	68e3      	ldr	r3, [r4, #12]
 8003850:	6832      	ldr	r2, [r6, #0]
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	42ab      	cmp	r3, r5
 8003856:	dc28      	bgt.n	80038aa <_printf_common+0x9a>
 8003858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800385c:	1e13      	subs	r3, r2, #0
 800385e:	6822      	ldr	r2, [r4, #0]
 8003860:	bf18      	it	ne
 8003862:	2301      	movne	r3, #1
 8003864:	0692      	lsls	r2, r2, #26
 8003866:	d42d      	bmi.n	80038c4 <_printf_common+0xb4>
 8003868:	4649      	mov	r1, r9
 800386a:	4638      	mov	r0, r7
 800386c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003870:	47c0      	blx	r8
 8003872:	3001      	adds	r0, #1
 8003874:	d020      	beq.n	80038b8 <_printf_common+0xa8>
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	68e5      	ldr	r5, [r4, #12]
 800387a:	f003 0306 	and.w	r3, r3, #6
 800387e:	2b04      	cmp	r3, #4
 8003880:	bf18      	it	ne
 8003882:	2500      	movne	r5, #0
 8003884:	6832      	ldr	r2, [r6, #0]
 8003886:	f04f 0600 	mov.w	r6, #0
 800388a:	68a3      	ldr	r3, [r4, #8]
 800388c:	bf08      	it	eq
 800388e:	1aad      	subeq	r5, r5, r2
 8003890:	6922      	ldr	r2, [r4, #16]
 8003892:	bf08      	it	eq
 8003894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003898:	4293      	cmp	r3, r2
 800389a:	bfc4      	itt	gt
 800389c:	1a9b      	subgt	r3, r3, r2
 800389e:	18ed      	addgt	r5, r5, r3
 80038a0:	341a      	adds	r4, #26
 80038a2:	42b5      	cmp	r5, r6
 80038a4:	d11a      	bne.n	80038dc <_printf_common+0xcc>
 80038a6:	2000      	movs	r0, #0
 80038a8:	e008      	b.n	80038bc <_printf_common+0xac>
 80038aa:	2301      	movs	r3, #1
 80038ac:	4652      	mov	r2, sl
 80038ae:	4649      	mov	r1, r9
 80038b0:	4638      	mov	r0, r7
 80038b2:	47c0      	blx	r8
 80038b4:	3001      	adds	r0, #1
 80038b6:	d103      	bne.n	80038c0 <_printf_common+0xb0>
 80038b8:	f04f 30ff 	mov.w	r0, #4294967295
 80038bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c0:	3501      	adds	r5, #1
 80038c2:	e7c4      	b.n	800384e <_printf_common+0x3e>
 80038c4:	2030      	movs	r0, #48	; 0x30
 80038c6:	18e1      	adds	r1, r4, r3
 80038c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038d2:	4422      	add	r2, r4
 80038d4:	3302      	adds	r3, #2
 80038d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038da:	e7c5      	b.n	8003868 <_printf_common+0x58>
 80038dc:	2301      	movs	r3, #1
 80038de:	4622      	mov	r2, r4
 80038e0:	4649      	mov	r1, r9
 80038e2:	4638      	mov	r0, r7
 80038e4:	47c0      	blx	r8
 80038e6:	3001      	adds	r0, #1
 80038e8:	d0e6      	beq.n	80038b8 <_printf_common+0xa8>
 80038ea:	3601      	adds	r6, #1
 80038ec:	e7d9      	b.n	80038a2 <_printf_common+0x92>
	...

080038f0 <_printf_i>:
 80038f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038f4:	7e0f      	ldrb	r7, [r1, #24]
 80038f6:	4691      	mov	r9, r2
 80038f8:	2f78      	cmp	r7, #120	; 0x78
 80038fa:	4680      	mov	r8, r0
 80038fc:	460c      	mov	r4, r1
 80038fe:	469a      	mov	sl, r3
 8003900:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003902:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003906:	d807      	bhi.n	8003918 <_printf_i+0x28>
 8003908:	2f62      	cmp	r7, #98	; 0x62
 800390a:	d80a      	bhi.n	8003922 <_printf_i+0x32>
 800390c:	2f00      	cmp	r7, #0
 800390e:	f000 80d9 	beq.w	8003ac4 <_printf_i+0x1d4>
 8003912:	2f58      	cmp	r7, #88	; 0x58
 8003914:	f000 80a4 	beq.w	8003a60 <_printf_i+0x170>
 8003918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800391c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003920:	e03a      	b.n	8003998 <_printf_i+0xa8>
 8003922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003926:	2b15      	cmp	r3, #21
 8003928:	d8f6      	bhi.n	8003918 <_printf_i+0x28>
 800392a:	a101      	add	r1, pc, #4	; (adr r1, 8003930 <_printf_i+0x40>)
 800392c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003930:	08003989 	.word	0x08003989
 8003934:	0800399d 	.word	0x0800399d
 8003938:	08003919 	.word	0x08003919
 800393c:	08003919 	.word	0x08003919
 8003940:	08003919 	.word	0x08003919
 8003944:	08003919 	.word	0x08003919
 8003948:	0800399d 	.word	0x0800399d
 800394c:	08003919 	.word	0x08003919
 8003950:	08003919 	.word	0x08003919
 8003954:	08003919 	.word	0x08003919
 8003958:	08003919 	.word	0x08003919
 800395c:	08003aab 	.word	0x08003aab
 8003960:	080039cd 	.word	0x080039cd
 8003964:	08003a8d 	.word	0x08003a8d
 8003968:	08003919 	.word	0x08003919
 800396c:	08003919 	.word	0x08003919
 8003970:	08003acd 	.word	0x08003acd
 8003974:	08003919 	.word	0x08003919
 8003978:	080039cd 	.word	0x080039cd
 800397c:	08003919 	.word	0x08003919
 8003980:	08003919 	.word	0x08003919
 8003984:	08003a95 	.word	0x08003a95
 8003988:	682b      	ldr	r3, [r5, #0]
 800398a:	1d1a      	adds	r2, r3, #4
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	602a      	str	r2, [r5, #0]
 8003990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003998:	2301      	movs	r3, #1
 800399a:	e0a4      	b.n	8003ae6 <_printf_i+0x1f6>
 800399c:	6820      	ldr	r0, [r4, #0]
 800399e:	6829      	ldr	r1, [r5, #0]
 80039a0:	0606      	lsls	r6, r0, #24
 80039a2:	f101 0304 	add.w	r3, r1, #4
 80039a6:	d50a      	bpl.n	80039be <_printf_i+0xce>
 80039a8:	680e      	ldr	r6, [r1, #0]
 80039aa:	602b      	str	r3, [r5, #0]
 80039ac:	2e00      	cmp	r6, #0
 80039ae:	da03      	bge.n	80039b8 <_printf_i+0xc8>
 80039b0:	232d      	movs	r3, #45	; 0x2d
 80039b2:	4276      	negs	r6, r6
 80039b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039b8:	230a      	movs	r3, #10
 80039ba:	485e      	ldr	r0, [pc, #376]	; (8003b34 <_printf_i+0x244>)
 80039bc:	e019      	b.n	80039f2 <_printf_i+0x102>
 80039be:	680e      	ldr	r6, [r1, #0]
 80039c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039c4:	602b      	str	r3, [r5, #0]
 80039c6:	bf18      	it	ne
 80039c8:	b236      	sxthne	r6, r6
 80039ca:	e7ef      	b.n	80039ac <_printf_i+0xbc>
 80039cc:	682b      	ldr	r3, [r5, #0]
 80039ce:	6820      	ldr	r0, [r4, #0]
 80039d0:	1d19      	adds	r1, r3, #4
 80039d2:	6029      	str	r1, [r5, #0]
 80039d4:	0601      	lsls	r1, r0, #24
 80039d6:	d501      	bpl.n	80039dc <_printf_i+0xec>
 80039d8:	681e      	ldr	r6, [r3, #0]
 80039da:	e002      	b.n	80039e2 <_printf_i+0xf2>
 80039dc:	0646      	lsls	r6, r0, #25
 80039de:	d5fb      	bpl.n	80039d8 <_printf_i+0xe8>
 80039e0:	881e      	ldrh	r6, [r3, #0]
 80039e2:	2f6f      	cmp	r7, #111	; 0x6f
 80039e4:	bf0c      	ite	eq
 80039e6:	2308      	moveq	r3, #8
 80039e8:	230a      	movne	r3, #10
 80039ea:	4852      	ldr	r0, [pc, #328]	; (8003b34 <_printf_i+0x244>)
 80039ec:	2100      	movs	r1, #0
 80039ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039f2:	6865      	ldr	r5, [r4, #4]
 80039f4:	2d00      	cmp	r5, #0
 80039f6:	bfa8      	it	ge
 80039f8:	6821      	ldrge	r1, [r4, #0]
 80039fa:	60a5      	str	r5, [r4, #8]
 80039fc:	bfa4      	itt	ge
 80039fe:	f021 0104 	bicge.w	r1, r1, #4
 8003a02:	6021      	strge	r1, [r4, #0]
 8003a04:	b90e      	cbnz	r6, 8003a0a <_printf_i+0x11a>
 8003a06:	2d00      	cmp	r5, #0
 8003a08:	d04d      	beq.n	8003aa6 <_printf_i+0x1b6>
 8003a0a:	4615      	mov	r5, r2
 8003a0c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a10:	fb03 6711 	mls	r7, r3, r1, r6
 8003a14:	5dc7      	ldrb	r7, [r0, r7]
 8003a16:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a1a:	4637      	mov	r7, r6
 8003a1c:	42bb      	cmp	r3, r7
 8003a1e:	460e      	mov	r6, r1
 8003a20:	d9f4      	bls.n	8003a0c <_printf_i+0x11c>
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d10b      	bne.n	8003a3e <_printf_i+0x14e>
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	07de      	lsls	r6, r3, #31
 8003a2a:	d508      	bpl.n	8003a3e <_printf_i+0x14e>
 8003a2c:	6923      	ldr	r3, [r4, #16]
 8003a2e:	6861      	ldr	r1, [r4, #4]
 8003a30:	4299      	cmp	r1, r3
 8003a32:	bfde      	ittt	le
 8003a34:	2330      	movle	r3, #48	; 0x30
 8003a36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a3e:	1b52      	subs	r2, r2, r5
 8003a40:	6122      	str	r2, [r4, #16]
 8003a42:	464b      	mov	r3, r9
 8003a44:	4621      	mov	r1, r4
 8003a46:	4640      	mov	r0, r8
 8003a48:	f8cd a000 	str.w	sl, [sp]
 8003a4c:	aa03      	add	r2, sp, #12
 8003a4e:	f7ff fedf 	bl	8003810 <_printf_common>
 8003a52:	3001      	adds	r0, #1
 8003a54:	d14c      	bne.n	8003af0 <_printf_i+0x200>
 8003a56:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5a:	b004      	add	sp, #16
 8003a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a60:	4834      	ldr	r0, [pc, #208]	; (8003b34 <_printf_i+0x244>)
 8003a62:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a66:	6829      	ldr	r1, [r5, #0]
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a6e:	6029      	str	r1, [r5, #0]
 8003a70:	061d      	lsls	r5, r3, #24
 8003a72:	d514      	bpl.n	8003a9e <_printf_i+0x1ae>
 8003a74:	07df      	lsls	r7, r3, #31
 8003a76:	bf44      	itt	mi
 8003a78:	f043 0320 	orrmi.w	r3, r3, #32
 8003a7c:	6023      	strmi	r3, [r4, #0]
 8003a7e:	b91e      	cbnz	r6, 8003a88 <_printf_i+0x198>
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	f023 0320 	bic.w	r3, r3, #32
 8003a86:	6023      	str	r3, [r4, #0]
 8003a88:	2310      	movs	r3, #16
 8003a8a:	e7af      	b.n	80039ec <_printf_i+0xfc>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	f043 0320 	orr.w	r3, r3, #32
 8003a92:	6023      	str	r3, [r4, #0]
 8003a94:	2378      	movs	r3, #120	; 0x78
 8003a96:	4828      	ldr	r0, [pc, #160]	; (8003b38 <_printf_i+0x248>)
 8003a98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a9c:	e7e3      	b.n	8003a66 <_printf_i+0x176>
 8003a9e:	0659      	lsls	r1, r3, #25
 8003aa0:	bf48      	it	mi
 8003aa2:	b2b6      	uxthmi	r6, r6
 8003aa4:	e7e6      	b.n	8003a74 <_printf_i+0x184>
 8003aa6:	4615      	mov	r5, r2
 8003aa8:	e7bb      	b.n	8003a22 <_printf_i+0x132>
 8003aaa:	682b      	ldr	r3, [r5, #0]
 8003aac:	6826      	ldr	r6, [r4, #0]
 8003aae:	1d18      	adds	r0, r3, #4
 8003ab0:	6961      	ldr	r1, [r4, #20]
 8003ab2:	6028      	str	r0, [r5, #0]
 8003ab4:	0635      	lsls	r5, r6, #24
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	d501      	bpl.n	8003abe <_printf_i+0x1ce>
 8003aba:	6019      	str	r1, [r3, #0]
 8003abc:	e002      	b.n	8003ac4 <_printf_i+0x1d4>
 8003abe:	0670      	lsls	r0, r6, #25
 8003ac0:	d5fb      	bpl.n	8003aba <_printf_i+0x1ca>
 8003ac2:	8019      	strh	r1, [r3, #0]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	4615      	mov	r5, r2
 8003ac8:	6123      	str	r3, [r4, #16]
 8003aca:	e7ba      	b.n	8003a42 <_printf_i+0x152>
 8003acc:	682b      	ldr	r3, [r5, #0]
 8003ace:	2100      	movs	r1, #0
 8003ad0:	1d1a      	adds	r2, r3, #4
 8003ad2:	602a      	str	r2, [r5, #0]
 8003ad4:	681d      	ldr	r5, [r3, #0]
 8003ad6:	6862      	ldr	r2, [r4, #4]
 8003ad8:	4628      	mov	r0, r5
 8003ada:	f000 feeb 	bl	80048b4 <memchr>
 8003ade:	b108      	cbz	r0, 8003ae4 <_printf_i+0x1f4>
 8003ae0:	1b40      	subs	r0, r0, r5
 8003ae2:	6060      	str	r0, [r4, #4]
 8003ae4:	6863      	ldr	r3, [r4, #4]
 8003ae6:	6123      	str	r3, [r4, #16]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aee:	e7a8      	b.n	8003a42 <_printf_i+0x152>
 8003af0:	462a      	mov	r2, r5
 8003af2:	4649      	mov	r1, r9
 8003af4:	4640      	mov	r0, r8
 8003af6:	6923      	ldr	r3, [r4, #16]
 8003af8:	47d0      	blx	sl
 8003afa:	3001      	adds	r0, #1
 8003afc:	d0ab      	beq.n	8003a56 <_printf_i+0x166>
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	079b      	lsls	r3, r3, #30
 8003b02:	d413      	bmi.n	8003b2c <_printf_i+0x23c>
 8003b04:	68e0      	ldr	r0, [r4, #12]
 8003b06:	9b03      	ldr	r3, [sp, #12]
 8003b08:	4298      	cmp	r0, r3
 8003b0a:	bfb8      	it	lt
 8003b0c:	4618      	movlt	r0, r3
 8003b0e:	e7a4      	b.n	8003a5a <_printf_i+0x16a>
 8003b10:	2301      	movs	r3, #1
 8003b12:	4632      	mov	r2, r6
 8003b14:	4649      	mov	r1, r9
 8003b16:	4640      	mov	r0, r8
 8003b18:	47d0      	blx	sl
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d09b      	beq.n	8003a56 <_printf_i+0x166>
 8003b1e:	3501      	adds	r5, #1
 8003b20:	68e3      	ldr	r3, [r4, #12]
 8003b22:	9903      	ldr	r1, [sp, #12]
 8003b24:	1a5b      	subs	r3, r3, r1
 8003b26:	42ab      	cmp	r3, r5
 8003b28:	dcf2      	bgt.n	8003b10 <_printf_i+0x220>
 8003b2a:	e7eb      	b.n	8003b04 <_printf_i+0x214>
 8003b2c:	2500      	movs	r5, #0
 8003b2e:	f104 0619 	add.w	r6, r4, #25
 8003b32:	e7f5      	b.n	8003b20 <_printf_i+0x230>
 8003b34:	080060ea 	.word	0x080060ea
 8003b38:	080060fb 	.word	0x080060fb

08003b3c <sniprintf>:
 8003b3c:	b40c      	push	{r2, r3}
 8003b3e:	b530      	push	{r4, r5, lr}
 8003b40:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <sniprintf+0x64>)
 8003b42:	1e0c      	subs	r4, r1, #0
 8003b44:	681d      	ldr	r5, [r3, #0]
 8003b46:	b09d      	sub	sp, #116	; 0x74
 8003b48:	da08      	bge.n	8003b5c <sniprintf+0x20>
 8003b4a:	238b      	movs	r3, #139	; 0x8b
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b50:	602b      	str	r3, [r5, #0]
 8003b52:	b01d      	add	sp, #116	; 0x74
 8003b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b58:	b002      	add	sp, #8
 8003b5a:	4770      	bx	lr
 8003b5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003b60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003b64:	bf0c      	ite	eq
 8003b66:	4623      	moveq	r3, r4
 8003b68:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003b6c:	9304      	str	r3, [sp, #16]
 8003b6e:	9307      	str	r3, [sp, #28]
 8003b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b74:	9002      	str	r0, [sp, #8]
 8003b76:	9006      	str	r0, [sp, #24]
 8003b78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	ab21      	add	r3, sp, #132	; 0x84
 8003b80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003b82:	a902      	add	r1, sp, #8
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	f001 fb7f 	bl	8005288 <_svfiprintf_r>
 8003b8a:	1c43      	adds	r3, r0, #1
 8003b8c:	bfbc      	itt	lt
 8003b8e:	238b      	movlt	r3, #139	; 0x8b
 8003b90:	602b      	strlt	r3, [r5, #0]
 8003b92:	2c00      	cmp	r4, #0
 8003b94:	d0dd      	beq.n	8003b52 <sniprintf+0x16>
 8003b96:	2200      	movs	r2, #0
 8003b98:	9b02      	ldr	r3, [sp, #8]
 8003b9a:	701a      	strb	r2, [r3, #0]
 8003b9c:	e7d9      	b.n	8003b52 <sniprintf+0x16>
 8003b9e:	bf00      	nop
 8003ba0:	2000000c 	.word	0x2000000c

08003ba4 <quorem>:
 8003ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba8:	6903      	ldr	r3, [r0, #16]
 8003baa:	690c      	ldr	r4, [r1, #16]
 8003bac:	4607      	mov	r7, r0
 8003bae:	42a3      	cmp	r3, r4
 8003bb0:	f2c0 8082 	blt.w	8003cb8 <quorem+0x114>
 8003bb4:	3c01      	subs	r4, #1
 8003bb6:	f100 0514 	add.w	r5, r0, #20
 8003bba:	f101 0814 	add.w	r8, r1, #20
 8003bbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003bc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003bd4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003bd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003bdc:	d331      	bcc.n	8003c42 <quorem+0x9e>
 8003bde:	f04f 0e00 	mov.w	lr, #0
 8003be2:	4640      	mov	r0, r8
 8003be4:	46ac      	mov	ip, r5
 8003be6:	46f2      	mov	sl, lr
 8003be8:	f850 2b04 	ldr.w	r2, [r0], #4
 8003bec:	b293      	uxth	r3, r2
 8003bee:	fb06 e303 	mla	r3, r6, r3, lr
 8003bf2:	0c12      	lsrs	r2, r2, #16
 8003bf4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	fb06 e202 	mla	r2, r6, r2, lr
 8003bfe:	ebaa 0303 	sub.w	r3, sl, r3
 8003c02:	f8dc a000 	ldr.w	sl, [ip]
 8003c06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003c0a:	fa1f fa8a 	uxth.w	sl, sl
 8003c0e:	4453      	add	r3, sl
 8003c10:	f8dc a000 	ldr.w	sl, [ip]
 8003c14:	b292      	uxth	r2, r2
 8003c16:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003c1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c24:	4581      	cmp	r9, r0
 8003c26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003c2a:	f84c 3b04 	str.w	r3, [ip], #4
 8003c2e:	d2db      	bcs.n	8003be8 <quorem+0x44>
 8003c30:	f855 300b 	ldr.w	r3, [r5, fp]
 8003c34:	b92b      	cbnz	r3, 8003c42 <quorem+0x9e>
 8003c36:	9b01      	ldr	r3, [sp, #4]
 8003c38:	3b04      	subs	r3, #4
 8003c3a:	429d      	cmp	r5, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	d32f      	bcc.n	8003ca0 <quorem+0xfc>
 8003c40:	613c      	str	r4, [r7, #16]
 8003c42:	4638      	mov	r0, r7
 8003c44:	f001 f8d0 	bl	8004de8 <__mcmp>
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	db25      	blt.n	8003c98 <quorem+0xf4>
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	f04f 0c00 	mov.w	ip, #0
 8003c52:	3601      	adds	r6, #1
 8003c54:	f858 1b04 	ldr.w	r1, [r8], #4
 8003c58:	f8d0 e000 	ldr.w	lr, [r0]
 8003c5c:	b28b      	uxth	r3, r1
 8003c5e:	ebac 0303 	sub.w	r3, ip, r3
 8003c62:	fa1f f28e 	uxth.w	r2, lr
 8003c66:	4413      	add	r3, r2
 8003c68:	0c0a      	lsrs	r2, r1, #16
 8003c6a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003c6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c78:	45c1      	cmp	r9, r8
 8003c7a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003c7e:	f840 3b04 	str.w	r3, [r0], #4
 8003c82:	d2e7      	bcs.n	8003c54 <quorem+0xb0>
 8003c84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c8c:	b922      	cbnz	r2, 8003c98 <quorem+0xf4>
 8003c8e:	3b04      	subs	r3, #4
 8003c90:	429d      	cmp	r5, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	d30a      	bcc.n	8003cac <quorem+0x108>
 8003c96:	613c      	str	r4, [r7, #16]
 8003c98:	4630      	mov	r0, r6
 8003c9a:	b003      	add	sp, #12
 8003c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	3b04      	subs	r3, #4
 8003ca4:	2a00      	cmp	r2, #0
 8003ca6:	d1cb      	bne.n	8003c40 <quorem+0x9c>
 8003ca8:	3c01      	subs	r4, #1
 8003caa:	e7c6      	b.n	8003c3a <quorem+0x96>
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	3b04      	subs	r3, #4
 8003cb0:	2a00      	cmp	r2, #0
 8003cb2:	d1f0      	bne.n	8003c96 <quorem+0xf2>
 8003cb4:	3c01      	subs	r4, #1
 8003cb6:	e7eb      	b.n	8003c90 <quorem+0xec>
 8003cb8:	2000      	movs	r0, #0
 8003cba:	e7ee      	b.n	8003c9a <quorem+0xf6>
 8003cbc:	0000      	movs	r0, r0
	...

08003cc0 <_dtoa_r>:
 8003cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc4:	4616      	mov	r6, r2
 8003cc6:	461f      	mov	r7, r3
 8003cc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003cca:	b099      	sub	sp, #100	; 0x64
 8003ccc:	4605      	mov	r5, r0
 8003cce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003cd2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003cd6:	b974      	cbnz	r4, 8003cf6 <_dtoa_r+0x36>
 8003cd8:	2010      	movs	r0, #16
 8003cda:	f000 fde3 	bl	80048a4 <malloc>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	6268      	str	r0, [r5, #36]	; 0x24
 8003ce2:	b920      	cbnz	r0, 8003cee <_dtoa_r+0x2e>
 8003ce4:	21ea      	movs	r1, #234	; 0xea
 8003ce6:	4ba8      	ldr	r3, [pc, #672]	; (8003f88 <_dtoa_r+0x2c8>)
 8003ce8:	48a8      	ldr	r0, [pc, #672]	; (8003f8c <_dtoa_r+0x2cc>)
 8003cea:	f001 fbdd 	bl	80054a8 <__assert_func>
 8003cee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003cf2:	6004      	str	r4, [r0, #0]
 8003cf4:	60c4      	str	r4, [r0, #12]
 8003cf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003cf8:	6819      	ldr	r1, [r3, #0]
 8003cfa:	b151      	cbz	r1, 8003d12 <_dtoa_r+0x52>
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	2301      	movs	r3, #1
 8003d00:	4093      	lsls	r3, r2
 8003d02:	604a      	str	r2, [r1, #4]
 8003d04:	608b      	str	r3, [r1, #8]
 8003d06:	4628      	mov	r0, r5
 8003d08:	f000 fe30 	bl	800496c <_Bfree>
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	1e3b      	subs	r3, r7, #0
 8003d14:	bfaf      	iteee	ge
 8003d16:	2300      	movge	r3, #0
 8003d18:	2201      	movlt	r2, #1
 8003d1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003d1e:	9305      	strlt	r3, [sp, #20]
 8003d20:	bfa8      	it	ge
 8003d22:	f8c8 3000 	strge.w	r3, [r8]
 8003d26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003d2a:	4b99      	ldr	r3, [pc, #612]	; (8003f90 <_dtoa_r+0x2d0>)
 8003d2c:	bfb8      	it	lt
 8003d2e:	f8c8 2000 	strlt.w	r2, [r8]
 8003d32:	ea33 0309 	bics.w	r3, r3, r9
 8003d36:	d119      	bne.n	8003d6c <_dtoa_r+0xac>
 8003d38:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003d44:	4333      	orrs	r3, r6
 8003d46:	f000 857f 	beq.w	8004848 <_dtoa_r+0xb88>
 8003d4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d4c:	b953      	cbnz	r3, 8003d64 <_dtoa_r+0xa4>
 8003d4e:	4b91      	ldr	r3, [pc, #580]	; (8003f94 <_dtoa_r+0x2d4>)
 8003d50:	e022      	b.n	8003d98 <_dtoa_r+0xd8>
 8003d52:	4b91      	ldr	r3, [pc, #580]	; (8003f98 <_dtoa_r+0x2d8>)
 8003d54:	9303      	str	r3, [sp, #12]
 8003d56:	3308      	adds	r3, #8
 8003d58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	9803      	ldr	r0, [sp, #12]
 8003d5e:	b019      	add	sp, #100	; 0x64
 8003d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d64:	4b8b      	ldr	r3, [pc, #556]	; (8003f94 <_dtoa_r+0x2d4>)
 8003d66:	9303      	str	r3, [sp, #12]
 8003d68:	3303      	adds	r3, #3
 8003d6a:	e7f5      	b.n	8003d58 <_dtoa_r+0x98>
 8003d6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003d70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003d74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f7fc fe14 	bl	80009a8 <__aeabi_dcmpeq>
 8003d80:	4680      	mov	r8, r0
 8003d82:	b158      	cbz	r0, 8003d9c <_dtoa_r+0xdc>
 8003d84:	2301      	movs	r3, #1
 8003d86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 8558 	beq.w	8004842 <_dtoa_r+0xb82>
 8003d92:	4882      	ldr	r0, [pc, #520]	; (8003f9c <_dtoa_r+0x2dc>)
 8003d94:	6018      	str	r0, [r3, #0]
 8003d96:	1e43      	subs	r3, r0, #1
 8003d98:	9303      	str	r3, [sp, #12]
 8003d9a:	e7df      	b.n	8003d5c <_dtoa_r+0x9c>
 8003d9c:	ab16      	add	r3, sp, #88	; 0x58
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	ab17      	add	r3, sp, #92	; 0x5c
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	4628      	mov	r0, r5
 8003da6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003daa:	f001 f8c5 	bl	8004f38 <__d2b>
 8003dae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003db2:	4683      	mov	fp, r0
 8003db4:	2c00      	cmp	r4, #0
 8003db6:	d07f      	beq.n	8003eb8 <_dtoa_r+0x1f8>
 8003db8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003dbe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003dc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dc6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003dca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003dce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	4b72      	ldr	r3, [pc, #456]	; (8003fa0 <_dtoa_r+0x2e0>)
 8003dd6:	f7fc f9c7 	bl	8000168 <__aeabi_dsub>
 8003dda:	a365      	add	r3, pc, #404	; (adr r3, 8003f70 <_dtoa_r+0x2b0>)
 8003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de0:	f7fc fb7a 	bl	80004d8 <__aeabi_dmul>
 8003de4:	a364      	add	r3, pc, #400	; (adr r3, 8003f78 <_dtoa_r+0x2b8>)
 8003de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dea:	f7fc f9bf 	bl	800016c <__adddf3>
 8003dee:	4606      	mov	r6, r0
 8003df0:	4620      	mov	r0, r4
 8003df2:	460f      	mov	r7, r1
 8003df4:	f7fc fb06 	bl	8000404 <__aeabi_i2d>
 8003df8:	a361      	add	r3, pc, #388	; (adr r3, 8003f80 <_dtoa_r+0x2c0>)
 8003dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfe:	f7fc fb6b 	bl	80004d8 <__aeabi_dmul>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4630      	mov	r0, r6
 8003e08:	4639      	mov	r1, r7
 8003e0a:	f7fc f9af 	bl	800016c <__adddf3>
 8003e0e:	4606      	mov	r6, r0
 8003e10:	460f      	mov	r7, r1
 8003e12:	f7fc fe11 	bl	8000a38 <__aeabi_d2iz>
 8003e16:	2200      	movs	r2, #0
 8003e18:	4682      	mov	sl, r0
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	4639      	mov	r1, r7
 8003e20:	f7fc fdcc 	bl	80009bc <__aeabi_dcmplt>
 8003e24:	b148      	cbz	r0, 8003e3a <_dtoa_r+0x17a>
 8003e26:	4650      	mov	r0, sl
 8003e28:	f7fc faec 	bl	8000404 <__aeabi_i2d>
 8003e2c:	4632      	mov	r2, r6
 8003e2e:	463b      	mov	r3, r7
 8003e30:	f7fc fdba 	bl	80009a8 <__aeabi_dcmpeq>
 8003e34:	b908      	cbnz	r0, 8003e3a <_dtoa_r+0x17a>
 8003e36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e3a:	f1ba 0f16 	cmp.w	sl, #22
 8003e3e:	d858      	bhi.n	8003ef2 <_dtoa_r+0x232>
 8003e40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e44:	4b57      	ldr	r3, [pc, #348]	; (8003fa4 <_dtoa_r+0x2e4>)
 8003e46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	f7fc fdb5 	bl	80009bc <__aeabi_dcmplt>
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d04f      	beq.n	8003ef6 <_dtoa_r+0x236>
 8003e56:	2300      	movs	r3, #0
 8003e58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003e60:	1b1c      	subs	r4, r3, r4
 8003e62:	1e63      	subs	r3, r4, #1
 8003e64:	9309      	str	r3, [sp, #36]	; 0x24
 8003e66:	bf49      	itett	mi
 8003e68:	f1c4 0301 	rsbmi	r3, r4, #1
 8003e6c:	2300      	movpl	r3, #0
 8003e6e:	9306      	strmi	r3, [sp, #24]
 8003e70:	2300      	movmi	r3, #0
 8003e72:	bf54      	ite	pl
 8003e74:	9306      	strpl	r3, [sp, #24]
 8003e76:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003e78:	f1ba 0f00 	cmp.w	sl, #0
 8003e7c:	db3d      	blt.n	8003efa <_dtoa_r+0x23a>
 8003e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e80:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003e84:	4453      	add	r3, sl
 8003e86:	9309      	str	r3, [sp, #36]	; 0x24
 8003e88:	2300      	movs	r3, #0
 8003e8a:	930a      	str	r3, [sp, #40]	; 0x28
 8003e8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e8e:	2b09      	cmp	r3, #9
 8003e90:	f200 808c 	bhi.w	8003fac <_dtoa_r+0x2ec>
 8003e94:	2b05      	cmp	r3, #5
 8003e96:	bfc4      	itt	gt
 8003e98:	3b04      	subgt	r3, #4
 8003e9a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003e9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e9e:	bfc8      	it	gt
 8003ea0:	2400      	movgt	r4, #0
 8003ea2:	f1a3 0302 	sub.w	r3, r3, #2
 8003ea6:	bfd8      	it	le
 8003ea8:	2401      	movle	r4, #1
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	f200 808a 	bhi.w	8003fc4 <_dtoa_r+0x304>
 8003eb0:	e8df f003 	tbb	[pc, r3]
 8003eb4:	5b4d4f2d 	.word	0x5b4d4f2d
 8003eb8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003ebc:	441c      	add	r4, r3
 8003ebe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	bfc3      	ittte	gt
 8003ec6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003eca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003ece:	fa09 f303 	lslgt.w	r3, r9, r3
 8003ed2:	f1c3 0320 	rsble	r3, r3, #32
 8003ed6:	bfc6      	itte	gt
 8003ed8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003edc:	4318      	orrgt	r0, r3
 8003ede:	fa06 f003 	lslle.w	r0, r6, r3
 8003ee2:	f7fc fa7f 	bl	80003e4 <__aeabi_ui2d>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003eec:	3c01      	subs	r4, #1
 8003eee:	9313      	str	r3, [sp, #76]	; 0x4c
 8003ef0:	e76f      	b.n	8003dd2 <_dtoa_r+0x112>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e7b2      	b.n	8003e5c <_dtoa_r+0x19c>
 8003ef6:	900f      	str	r0, [sp, #60]	; 0x3c
 8003ef8:	e7b1      	b.n	8003e5e <_dtoa_r+0x19e>
 8003efa:	9b06      	ldr	r3, [sp, #24]
 8003efc:	eba3 030a 	sub.w	r3, r3, sl
 8003f00:	9306      	str	r3, [sp, #24]
 8003f02:	f1ca 0300 	rsb	r3, sl, #0
 8003f06:	930a      	str	r3, [sp, #40]	; 0x28
 8003f08:	2300      	movs	r3, #0
 8003f0a:	930e      	str	r3, [sp, #56]	; 0x38
 8003f0c:	e7be      	b.n	8003e8c <_dtoa_r+0x1cc>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	dc58      	bgt.n	8003fca <_dtoa_r+0x30a>
 8003f18:	f04f 0901 	mov.w	r9, #1
 8003f1c:	464b      	mov	r3, r9
 8003f1e:	f8cd 9020 	str.w	r9, [sp, #32]
 8003f22:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8003f26:	2200      	movs	r2, #0
 8003f28:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003f2a:	6042      	str	r2, [r0, #4]
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	f102 0614 	add.w	r6, r2, #20
 8003f32:	429e      	cmp	r6, r3
 8003f34:	6841      	ldr	r1, [r0, #4]
 8003f36:	d94e      	bls.n	8003fd6 <_dtoa_r+0x316>
 8003f38:	4628      	mov	r0, r5
 8003f3a:	f000 fcd7 	bl	80048ec <_Balloc>
 8003f3e:	9003      	str	r0, [sp, #12]
 8003f40:	2800      	cmp	r0, #0
 8003f42:	d14c      	bne.n	8003fde <_dtoa_r+0x31e>
 8003f44:	4602      	mov	r2, r0
 8003f46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003f4a:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <_dtoa_r+0x2e8>)
 8003f4c:	e6cc      	b.n	8003ce8 <_dtoa_r+0x28>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e7de      	b.n	8003f10 <_dtoa_r+0x250>
 8003f52:	2300      	movs	r3, #0
 8003f54:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f58:	eb0a 0903 	add.w	r9, sl, r3
 8003f5c:	f109 0301 	add.w	r3, r9, #1
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	9308      	str	r3, [sp, #32]
 8003f64:	bfb8      	it	lt
 8003f66:	2301      	movlt	r3, #1
 8003f68:	e7dd      	b.n	8003f26 <_dtoa_r+0x266>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e7f2      	b.n	8003f54 <_dtoa_r+0x294>
 8003f6e:	bf00      	nop
 8003f70:	636f4361 	.word	0x636f4361
 8003f74:	3fd287a7 	.word	0x3fd287a7
 8003f78:	8b60c8b3 	.word	0x8b60c8b3
 8003f7c:	3fc68a28 	.word	0x3fc68a28
 8003f80:	509f79fb 	.word	0x509f79fb
 8003f84:	3fd34413 	.word	0x3fd34413
 8003f88:	08006119 	.word	0x08006119
 8003f8c:	08006130 	.word	0x08006130
 8003f90:	7ff00000 	.word	0x7ff00000
 8003f94:	08006115 	.word	0x08006115
 8003f98:	0800610c 	.word	0x0800610c
 8003f9c:	080060e9 	.word	0x080060e9
 8003fa0:	3ff80000 	.word	0x3ff80000
 8003fa4:	08006220 	.word	0x08006220
 8003fa8:	0800618b 	.word	0x0800618b
 8003fac:	2401      	movs	r4, #1
 8003fae:	2300      	movs	r3, #0
 8003fb0:	940b      	str	r4, [sp, #44]	; 0x2c
 8003fb2:	9322      	str	r3, [sp, #136]	; 0x88
 8003fb4:	f04f 39ff 	mov.w	r9, #4294967295
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2312      	movs	r3, #18
 8003fbc:	f8cd 9020 	str.w	r9, [sp, #32]
 8003fc0:	9223      	str	r2, [sp, #140]	; 0x8c
 8003fc2:	e7b0      	b.n	8003f26 <_dtoa_r+0x266>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fc8:	e7f4      	b.n	8003fb4 <_dtoa_r+0x2f4>
 8003fca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8003fce:	464b      	mov	r3, r9
 8003fd0:	f8cd 9020 	str.w	r9, [sp, #32]
 8003fd4:	e7a7      	b.n	8003f26 <_dtoa_r+0x266>
 8003fd6:	3101      	adds	r1, #1
 8003fd8:	6041      	str	r1, [r0, #4]
 8003fda:	0052      	lsls	r2, r2, #1
 8003fdc:	e7a7      	b.n	8003f2e <_dtoa_r+0x26e>
 8003fde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003fe0:	9a03      	ldr	r2, [sp, #12]
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	9b08      	ldr	r3, [sp, #32]
 8003fe6:	2b0e      	cmp	r3, #14
 8003fe8:	f200 80a8 	bhi.w	800413c <_dtoa_r+0x47c>
 8003fec:	2c00      	cmp	r4, #0
 8003fee:	f000 80a5 	beq.w	800413c <_dtoa_r+0x47c>
 8003ff2:	f1ba 0f00 	cmp.w	sl, #0
 8003ff6:	dd34      	ble.n	8004062 <_dtoa_r+0x3a2>
 8003ff8:	4a9a      	ldr	r2, [pc, #616]	; (8004264 <_dtoa_r+0x5a4>)
 8003ffa:	f00a 030f 	and.w	r3, sl, #15
 8003ffe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004002:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004006:	e9d3 3400 	ldrd	r3, r4, [r3]
 800400a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800400e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004012:	d016      	beq.n	8004042 <_dtoa_r+0x382>
 8004014:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004018:	4b93      	ldr	r3, [pc, #588]	; (8004268 <_dtoa_r+0x5a8>)
 800401a:	2703      	movs	r7, #3
 800401c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004020:	f7fc fb84 	bl	800072c <__aeabi_ddiv>
 8004024:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004028:	f004 040f 	and.w	r4, r4, #15
 800402c:	4e8e      	ldr	r6, [pc, #568]	; (8004268 <_dtoa_r+0x5a8>)
 800402e:	b954      	cbnz	r4, 8004046 <_dtoa_r+0x386>
 8004030:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004034:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004038:	f7fc fb78 	bl	800072c <__aeabi_ddiv>
 800403c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004040:	e029      	b.n	8004096 <_dtoa_r+0x3d6>
 8004042:	2702      	movs	r7, #2
 8004044:	e7f2      	b.n	800402c <_dtoa_r+0x36c>
 8004046:	07e1      	lsls	r1, r4, #31
 8004048:	d508      	bpl.n	800405c <_dtoa_r+0x39c>
 800404a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800404e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004052:	f7fc fa41 	bl	80004d8 <__aeabi_dmul>
 8004056:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800405a:	3701      	adds	r7, #1
 800405c:	1064      	asrs	r4, r4, #1
 800405e:	3608      	adds	r6, #8
 8004060:	e7e5      	b.n	800402e <_dtoa_r+0x36e>
 8004062:	f000 80a5 	beq.w	80041b0 <_dtoa_r+0x4f0>
 8004066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800406a:	f1ca 0400 	rsb	r4, sl, #0
 800406e:	4b7d      	ldr	r3, [pc, #500]	; (8004264 <_dtoa_r+0x5a4>)
 8004070:	f004 020f 	and.w	r2, r4, #15
 8004074:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407c:	f7fc fa2c 	bl	80004d8 <__aeabi_dmul>
 8004080:	2702      	movs	r7, #2
 8004082:	2300      	movs	r3, #0
 8004084:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004088:	4e77      	ldr	r6, [pc, #476]	; (8004268 <_dtoa_r+0x5a8>)
 800408a:	1124      	asrs	r4, r4, #4
 800408c:	2c00      	cmp	r4, #0
 800408e:	f040 8084 	bne.w	800419a <_dtoa_r+0x4da>
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1d2      	bne.n	800403c <_dtoa_r+0x37c>
 8004096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 808b 	beq.w	80041b4 <_dtoa_r+0x4f4>
 800409e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80040a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80040a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80040aa:	2200      	movs	r2, #0
 80040ac:	4b6f      	ldr	r3, [pc, #444]	; (800426c <_dtoa_r+0x5ac>)
 80040ae:	f7fc fc85 	bl	80009bc <__aeabi_dcmplt>
 80040b2:	2800      	cmp	r0, #0
 80040b4:	d07e      	beq.n	80041b4 <_dtoa_r+0x4f4>
 80040b6:	9b08      	ldr	r3, [sp, #32]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d07b      	beq.n	80041b4 <_dtoa_r+0x4f4>
 80040bc:	f1b9 0f00 	cmp.w	r9, #0
 80040c0:	dd38      	ble.n	8004134 <_dtoa_r+0x474>
 80040c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80040c6:	2200      	movs	r2, #0
 80040c8:	4b69      	ldr	r3, [pc, #420]	; (8004270 <_dtoa_r+0x5b0>)
 80040ca:	f7fc fa05 	bl	80004d8 <__aeabi_dmul>
 80040ce:	464c      	mov	r4, r9
 80040d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040d4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80040d8:	3701      	adds	r7, #1
 80040da:	4638      	mov	r0, r7
 80040dc:	f7fc f992 	bl	8000404 <__aeabi_i2d>
 80040e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040e4:	f7fc f9f8 	bl	80004d8 <__aeabi_dmul>
 80040e8:	2200      	movs	r2, #0
 80040ea:	4b62      	ldr	r3, [pc, #392]	; (8004274 <_dtoa_r+0x5b4>)
 80040ec:	f7fc f83e 	bl	800016c <__adddf3>
 80040f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80040f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80040f8:	9611      	str	r6, [sp, #68]	; 0x44
 80040fa:	2c00      	cmp	r4, #0
 80040fc:	d15d      	bne.n	80041ba <_dtoa_r+0x4fa>
 80040fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004102:	2200      	movs	r2, #0
 8004104:	4b5c      	ldr	r3, [pc, #368]	; (8004278 <_dtoa_r+0x5b8>)
 8004106:	f7fc f82f 	bl	8000168 <__aeabi_dsub>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004112:	4633      	mov	r3, r6
 8004114:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004116:	f7fc fc6f 	bl	80009f8 <__aeabi_dcmpgt>
 800411a:	2800      	cmp	r0, #0
 800411c:	f040 829c 	bne.w	8004658 <_dtoa_r+0x998>
 8004120:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004124:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004126:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800412a:	f7fc fc47 	bl	80009bc <__aeabi_dcmplt>
 800412e:	2800      	cmp	r0, #0
 8004130:	f040 8290 	bne.w	8004654 <_dtoa_r+0x994>
 8004134:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004138:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800413c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800413e:	2b00      	cmp	r3, #0
 8004140:	f2c0 8152 	blt.w	80043e8 <_dtoa_r+0x728>
 8004144:	f1ba 0f0e 	cmp.w	sl, #14
 8004148:	f300 814e 	bgt.w	80043e8 <_dtoa_r+0x728>
 800414c:	4b45      	ldr	r3, [pc, #276]	; (8004264 <_dtoa_r+0x5a4>)
 800414e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004152:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004156:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800415a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800415c:	2b00      	cmp	r3, #0
 800415e:	f280 80db 	bge.w	8004318 <_dtoa_r+0x658>
 8004162:	9b08      	ldr	r3, [sp, #32]
 8004164:	2b00      	cmp	r3, #0
 8004166:	f300 80d7 	bgt.w	8004318 <_dtoa_r+0x658>
 800416a:	f040 8272 	bne.w	8004652 <_dtoa_r+0x992>
 800416e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004172:	2200      	movs	r2, #0
 8004174:	4b40      	ldr	r3, [pc, #256]	; (8004278 <_dtoa_r+0x5b8>)
 8004176:	f7fc f9af 	bl	80004d8 <__aeabi_dmul>
 800417a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800417e:	f7fc fc31 	bl	80009e4 <__aeabi_dcmpge>
 8004182:	9c08      	ldr	r4, [sp, #32]
 8004184:	4626      	mov	r6, r4
 8004186:	2800      	cmp	r0, #0
 8004188:	f040 8248 	bne.w	800461c <_dtoa_r+0x95c>
 800418c:	2331      	movs	r3, #49	; 0x31
 800418e:	9f03      	ldr	r7, [sp, #12]
 8004190:	f10a 0a01 	add.w	sl, sl, #1
 8004194:	f807 3b01 	strb.w	r3, [r7], #1
 8004198:	e244      	b.n	8004624 <_dtoa_r+0x964>
 800419a:	07e2      	lsls	r2, r4, #31
 800419c:	d505      	bpl.n	80041aa <_dtoa_r+0x4ea>
 800419e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80041a2:	f7fc f999 	bl	80004d8 <__aeabi_dmul>
 80041a6:	2301      	movs	r3, #1
 80041a8:	3701      	adds	r7, #1
 80041aa:	1064      	asrs	r4, r4, #1
 80041ac:	3608      	adds	r6, #8
 80041ae:	e76d      	b.n	800408c <_dtoa_r+0x3cc>
 80041b0:	2702      	movs	r7, #2
 80041b2:	e770      	b.n	8004096 <_dtoa_r+0x3d6>
 80041b4:	46d0      	mov	r8, sl
 80041b6:	9c08      	ldr	r4, [sp, #32]
 80041b8:	e78f      	b.n	80040da <_dtoa_r+0x41a>
 80041ba:	9903      	ldr	r1, [sp, #12]
 80041bc:	4b29      	ldr	r3, [pc, #164]	; (8004264 <_dtoa_r+0x5a4>)
 80041be:	4421      	add	r1, r4
 80041c0:	9112      	str	r1, [sp, #72]	; 0x48
 80041c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80041c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80041cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80041d0:	2900      	cmp	r1, #0
 80041d2:	d055      	beq.n	8004280 <_dtoa_r+0x5c0>
 80041d4:	2000      	movs	r0, #0
 80041d6:	4929      	ldr	r1, [pc, #164]	; (800427c <_dtoa_r+0x5bc>)
 80041d8:	f7fc faa8 	bl	800072c <__aeabi_ddiv>
 80041dc:	463b      	mov	r3, r7
 80041de:	4632      	mov	r2, r6
 80041e0:	f7fb ffc2 	bl	8000168 <__aeabi_dsub>
 80041e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041e8:	9f03      	ldr	r7, [sp, #12]
 80041ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041ee:	f7fc fc23 	bl	8000a38 <__aeabi_d2iz>
 80041f2:	4604      	mov	r4, r0
 80041f4:	f7fc f906 	bl	8000404 <__aeabi_i2d>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004200:	f7fb ffb2 	bl	8000168 <__aeabi_dsub>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	3430      	adds	r4, #48	; 0x30
 800420a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800420e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004212:	f807 4b01 	strb.w	r4, [r7], #1
 8004216:	f7fc fbd1 	bl	80009bc <__aeabi_dcmplt>
 800421a:	2800      	cmp	r0, #0
 800421c:	d174      	bne.n	8004308 <_dtoa_r+0x648>
 800421e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004222:	2000      	movs	r0, #0
 8004224:	4911      	ldr	r1, [pc, #68]	; (800426c <_dtoa_r+0x5ac>)
 8004226:	f7fb ff9f 	bl	8000168 <__aeabi_dsub>
 800422a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800422e:	f7fc fbc5 	bl	80009bc <__aeabi_dcmplt>
 8004232:	2800      	cmp	r0, #0
 8004234:	f040 80b7 	bne.w	80043a6 <_dtoa_r+0x6e6>
 8004238:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800423a:	429f      	cmp	r7, r3
 800423c:	f43f af7a 	beq.w	8004134 <_dtoa_r+0x474>
 8004240:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004244:	2200      	movs	r2, #0
 8004246:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <_dtoa_r+0x5b0>)
 8004248:	f7fc f946 	bl	80004d8 <__aeabi_dmul>
 800424c:	2200      	movs	r2, #0
 800424e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <_dtoa_r+0x5b0>)
 8004258:	f7fc f93e 	bl	80004d8 <__aeabi_dmul>
 800425c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004260:	e7c3      	b.n	80041ea <_dtoa_r+0x52a>
 8004262:	bf00      	nop
 8004264:	08006220 	.word	0x08006220
 8004268:	080061f8 	.word	0x080061f8
 800426c:	3ff00000 	.word	0x3ff00000
 8004270:	40240000 	.word	0x40240000
 8004274:	401c0000 	.word	0x401c0000
 8004278:	40140000 	.word	0x40140000
 800427c:	3fe00000 	.word	0x3fe00000
 8004280:	4630      	mov	r0, r6
 8004282:	4639      	mov	r1, r7
 8004284:	f7fc f928 	bl	80004d8 <__aeabi_dmul>
 8004288:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800428a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800428e:	9c03      	ldr	r4, [sp, #12]
 8004290:	9314      	str	r3, [sp, #80]	; 0x50
 8004292:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004296:	f7fc fbcf 	bl	8000a38 <__aeabi_d2iz>
 800429a:	9015      	str	r0, [sp, #84]	; 0x54
 800429c:	f7fc f8b2 	bl	8000404 <__aeabi_i2d>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042a8:	f7fb ff5e 	bl	8000168 <__aeabi_dsub>
 80042ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80042ae:	4606      	mov	r6, r0
 80042b0:	3330      	adds	r3, #48	; 0x30
 80042b2:	f804 3b01 	strb.w	r3, [r4], #1
 80042b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80042b8:	460f      	mov	r7, r1
 80042ba:	429c      	cmp	r4, r3
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	d124      	bne.n	800430c <_dtoa_r+0x64c>
 80042c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80042c6:	4bb0      	ldr	r3, [pc, #704]	; (8004588 <_dtoa_r+0x8c8>)
 80042c8:	f7fb ff50 	bl	800016c <__adddf3>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4630      	mov	r0, r6
 80042d2:	4639      	mov	r1, r7
 80042d4:	f7fc fb90 	bl	80009f8 <__aeabi_dcmpgt>
 80042d8:	2800      	cmp	r0, #0
 80042da:	d163      	bne.n	80043a4 <_dtoa_r+0x6e4>
 80042dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80042e0:	2000      	movs	r0, #0
 80042e2:	49a9      	ldr	r1, [pc, #676]	; (8004588 <_dtoa_r+0x8c8>)
 80042e4:	f7fb ff40 	bl	8000168 <__aeabi_dsub>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4630      	mov	r0, r6
 80042ee:	4639      	mov	r1, r7
 80042f0:	f7fc fb64 	bl	80009bc <__aeabi_dcmplt>
 80042f4:	2800      	cmp	r0, #0
 80042f6:	f43f af1d 	beq.w	8004134 <_dtoa_r+0x474>
 80042fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80042fc:	1e7b      	subs	r3, r7, #1
 80042fe:	9314      	str	r3, [sp, #80]	; 0x50
 8004300:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004304:	2b30      	cmp	r3, #48	; 0x30
 8004306:	d0f8      	beq.n	80042fa <_dtoa_r+0x63a>
 8004308:	46c2      	mov	sl, r8
 800430a:	e03b      	b.n	8004384 <_dtoa_r+0x6c4>
 800430c:	4b9f      	ldr	r3, [pc, #636]	; (800458c <_dtoa_r+0x8cc>)
 800430e:	f7fc f8e3 	bl	80004d8 <__aeabi_dmul>
 8004312:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004316:	e7bc      	b.n	8004292 <_dtoa_r+0x5d2>
 8004318:	9f03      	ldr	r7, [sp, #12]
 800431a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800431e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004322:	4640      	mov	r0, r8
 8004324:	4649      	mov	r1, r9
 8004326:	f7fc fa01 	bl	800072c <__aeabi_ddiv>
 800432a:	f7fc fb85 	bl	8000a38 <__aeabi_d2iz>
 800432e:	4604      	mov	r4, r0
 8004330:	f7fc f868 	bl	8000404 <__aeabi_i2d>
 8004334:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004338:	f7fc f8ce 	bl	80004d8 <__aeabi_dmul>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4640      	mov	r0, r8
 8004342:	4649      	mov	r1, r9
 8004344:	f7fb ff10 	bl	8000168 <__aeabi_dsub>
 8004348:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800434c:	f807 6b01 	strb.w	r6, [r7], #1
 8004350:	9e03      	ldr	r6, [sp, #12]
 8004352:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004356:	1bbe      	subs	r6, r7, r6
 8004358:	45b4      	cmp	ip, r6
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	d136      	bne.n	80043ce <_dtoa_r+0x70e>
 8004360:	f7fb ff04 	bl	800016c <__adddf3>
 8004364:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004368:	4680      	mov	r8, r0
 800436a:	4689      	mov	r9, r1
 800436c:	f7fc fb44 	bl	80009f8 <__aeabi_dcmpgt>
 8004370:	bb58      	cbnz	r0, 80043ca <_dtoa_r+0x70a>
 8004372:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004376:	4640      	mov	r0, r8
 8004378:	4649      	mov	r1, r9
 800437a:	f7fc fb15 	bl	80009a8 <__aeabi_dcmpeq>
 800437e:	b108      	cbz	r0, 8004384 <_dtoa_r+0x6c4>
 8004380:	07e1      	lsls	r1, r4, #31
 8004382:	d422      	bmi.n	80043ca <_dtoa_r+0x70a>
 8004384:	4628      	mov	r0, r5
 8004386:	4659      	mov	r1, fp
 8004388:	f000 faf0 	bl	800496c <_Bfree>
 800438c:	2300      	movs	r3, #0
 800438e:	703b      	strb	r3, [r7, #0]
 8004390:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004392:	f10a 0001 	add.w	r0, sl, #1
 8004396:	6018      	str	r0, [r3, #0]
 8004398:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800439a:	2b00      	cmp	r3, #0
 800439c:	f43f acde 	beq.w	8003d5c <_dtoa_r+0x9c>
 80043a0:	601f      	str	r7, [r3, #0]
 80043a2:	e4db      	b.n	8003d5c <_dtoa_r+0x9c>
 80043a4:	4627      	mov	r7, r4
 80043a6:	463b      	mov	r3, r7
 80043a8:	461f      	mov	r7, r3
 80043aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043ae:	2a39      	cmp	r2, #57	; 0x39
 80043b0:	d107      	bne.n	80043c2 <_dtoa_r+0x702>
 80043b2:	9a03      	ldr	r2, [sp, #12]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d1f7      	bne.n	80043a8 <_dtoa_r+0x6e8>
 80043b8:	2230      	movs	r2, #48	; 0x30
 80043ba:	9903      	ldr	r1, [sp, #12]
 80043bc:	f108 0801 	add.w	r8, r8, #1
 80043c0:	700a      	strb	r2, [r1, #0]
 80043c2:	781a      	ldrb	r2, [r3, #0]
 80043c4:	3201      	adds	r2, #1
 80043c6:	701a      	strb	r2, [r3, #0]
 80043c8:	e79e      	b.n	8004308 <_dtoa_r+0x648>
 80043ca:	46d0      	mov	r8, sl
 80043cc:	e7eb      	b.n	80043a6 <_dtoa_r+0x6e6>
 80043ce:	2200      	movs	r2, #0
 80043d0:	4b6e      	ldr	r3, [pc, #440]	; (800458c <_dtoa_r+0x8cc>)
 80043d2:	f7fc f881 	bl	80004d8 <__aeabi_dmul>
 80043d6:	2200      	movs	r2, #0
 80043d8:	2300      	movs	r3, #0
 80043da:	4680      	mov	r8, r0
 80043dc:	4689      	mov	r9, r1
 80043de:	f7fc fae3 	bl	80009a8 <__aeabi_dcmpeq>
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d09b      	beq.n	800431e <_dtoa_r+0x65e>
 80043e6:	e7cd      	b.n	8004384 <_dtoa_r+0x6c4>
 80043e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043ea:	2a00      	cmp	r2, #0
 80043ec:	f000 80d0 	beq.w	8004590 <_dtoa_r+0x8d0>
 80043f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80043f2:	2a01      	cmp	r2, #1
 80043f4:	f300 80ae 	bgt.w	8004554 <_dtoa_r+0x894>
 80043f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80043fa:	2a00      	cmp	r2, #0
 80043fc:	f000 80a6 	beq.w	800454c <_dtoa_r+0x88c>
 8004400:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004404:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004406:	9f06      	ldr	r7, [sp, #24]
 8004408:	9a06      	ldr	r2, [sp, #24]
 800440a:	2101      	movs	r1, #1
 800440c:	441a      	add	r2, r3
 800440e:	9206      	str	r2, [sp, #24]
 8004410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004412:	4628      	mov	r0, r5
 8004414:	441a      	add	r2, r3
 8004416:	9209      	str	r2, [sp, #36]	; 0x24
 8004418:	f000 fb5e 	bl	8004ad8 <__i2b>
 800441c:	4606      	mov	r6, r0
 800441e:	2f00      	cmp	r7, #0
 8004420:	dd0c      	ble.n	800443c <_dtoa_r+0x77c>
 8004422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	dd09      	ble.n	800443c <_dtoa_r+0x77c>
 8004428:	42bb      	cmp	r3, r7
 800442a:	bfa8      	it	ge
 800442c:	463b      	movge	r3, r7
 800442e:	9a06      	ldr	r2, [sp, #24]
 8004430:	1aff      	subs	r7, r7, r3
 8004432:	1ad2      	subs	r2, r2, r3
 8004434:	9206      	str	r2, [sp, #24]
 8004436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	9309      	str	r3, [sp, #36]	; 0x24
 800443c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800443e:	b1f3      	cbz	r3, 800447e <_dtoa_r+0x7be>
 8004440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 80a8 	beq.w	8004598 <_dtoa_r+0x8d8>
 8004448:	2c00      	cmp	r4, #0
 800444a:	dd10      	ble.n	800446e <_dtoa_r+0x7ae>
 800444c:	4631      	mov	r1, r6
 800444e:	4622      	mov	r2, r4
 8004450:	4628      	mov	r0, r5
 8004452:	f000 fbff 	bl	8004c54 <__pow5mult>
 8004456:	465a      	mov	r2, fp
 8004458:	4601      	mov	r1, r0
 800445a:	4606      	mov	r6, r0
 800445c:	4628      	mov	r0, r5
 800445e:	f000 fb51 	bl	8004b04 <__multiply>
 8004462:	4680      	mov	r8, r0
 8004464:	4659      	mov	r1, fp
 8004466:	4628      	mov	r0, r5
 8004468:	f000 fa80 	bl	800496c <_Bfree>
 800446c:	46c3      	mov	fp, r8
 800446e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004470:	1b1a      	subs	r2, r3, r4
 8004472:	d004      	beq.n	800447e <_dtoa_r+0x7be>
 8004474:	4659      	mov	r1, fp
 8004476:	4628      	mov	r0, r5
 8004478:	f000 fbec 	bl	8004c54 <__pow5mult>
 800447c:	4683      	mov	fp, r0
 800447e:	2101      	movs	r1, #1
 8004480:	4628      	mov	r0, r5
 8004482:	f000 fb29 	bl	8004ad8 <__i2b>
 8004486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004488:	4604      	mov	r4, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	f340 8086 	ble.w	800459c <_dtoa_r+0x8dc>
 8004490:	461a      	mov	r2, r3
 8004492:	4601      	mov	r1, r0
 8004494:	4628      	mov	r0, r5
 8004496:	f000 fbdd 	bl	8004c54 <__pow5mult>
 800449a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800449c:	4604      	mov	r4, r0
 800449e:	2b01      	cmp	r3, #1
 80044a0:	dd7f      	ble.n	80045a2 <_dtoa_r+0x8e2>
 80044a2:	f04f 0800 	mov.w	r8, #0
 80044a6:	6923      	ldr	r3, [r4, #16]
 80044a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80044ac:	6918      	ldr	r0, [r3, #16]
 80044ae:	f000 fac5 	bl	8004a3c <__hi0bits>
 80044b2:	f1c0 0020 	rsb	r0, r0, #32
 80044b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b8:	4418      	add	r0, r3
 80044ba:	f010 001f 	ands.w	r0, r0, #31
 80044be:	f000 8092 	beq.w	80045e6 <_dtoa_r+0x926>
 80044c2:	f1c0 0320 	rsb	r3, r0, #32
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	f340 808a 	ble.w	80045e0 <_dtoa_r+0x920>
 80044cc:	f1c0 001c 	rsb	r0, r0, #28
 80044d0:	9b06      	ldr	r3, [sp, #24]
 80044d2:	4407      	add	r7, r0
 80044d4:	4403      	add	r3, r0
 80044d6:	9306      	str	r3, [sp, #24]
 80044d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044da:	4403      	add	r3, r0
 80044dc:	9309      	str	r3, [sp, #36]	; 0x24
 80044de:	9b06      	ldr	r3, [sp, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	dd05      	ble.n	80044f0 <_dtoa_r+0x830>
 80044e4:	4659      	mov	r1, fp
 80044e6:	461a      	mov	r2, r3
 80044e8:	4628      	mov	r0, r5
 80044ea:	f000 fc0d 	bl	8004d08 <__lshift>
 80044ee:	4683      	mov	fp, r0
 80044f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	dd05      	ble.n	8004502 <_dtoa_r+0x842>
 80044f6:	4621      	mov	r1, r4
 80044f8:	461a      	mov	r2, r3
 80044fa:	4628      	mov	r0, r5
 80044fc:	f000 fc04 	bl	8004d08 <__lshift>
 8004500:	4604      	mov	r4, r0
 8004502:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004504:	2b00      	cmp	r3, #0
 8004506:	d070      	beq.n	80045ea <_dtoa_r+0x92a>
 8004508:	4621      	mov	r1, r4
 800450a:	4658      	mov	r0, fp
 800450c:	f000 fc6c 	bl	8004de8 <__mcmp>
 8004510:	2800      	cmp	r0, #0
 8004512:	da6a      	bge.n	80045ea <_dtoa_r+0x92a>
 8004514:	2300      	movs	r3, #0
 8004516:	4659      	mov	r1, fp
 8004518:	220a      	movs	r2, #10
 800451a:	4628      	mov	r0, r5
 800451c:	f000 fa48 	bl	80049b0 <__multadd>
 8004520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004522:	4683      	mov	fp, r0
 8004524:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8194 	beq.w	8004856 <_dtoa_r+0xb96>
 800452e:	4631      	mov	r1, r6
 8004530:	2300      	movs	r3, #0
 8004532:	220a      	movs	r2, #10
 8004534:	4628      	mov	r0, r5
 8004536:	f000 fa3b 	bl	80049b0 <__multadd>
 800453a:	f1b9 0f00 	cmp.w	r9, #0
 800453e:	4606      	mov	r6, r0
 8004540:	f300 8093 	bgt.w	800466a <_dtoa_r+0x9aa>
 8004544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004546:	2b02      	cmp	r3, #2
 8004548:	dc57      	bgt.n	80045fa <_dtoa_r+0x93a>
 800454a:	e08e      	b.n	800466a <_dtoa_r+0x9aa>
 800454c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800454e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004552:	e757      	b.n	8004404 <_dtoa_r+0x744>
 8004554:	9b08      	ldr	r3, [sp, #32]
 8004556:	1e5c      	subs	r4, r3, #1
 8004558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800455a:	42a3      	cmp	r3, r4
 800455c:	bfb7      	itett	lt
 800455e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004560:	1b1c      	subge	r4, r3, r4
 8004562:	1ae2      	sublt	r2, r4, r3
 8004564:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004566:	bfbe      	ittt	lt
 8004568:	940a      	strlt	r4, [sp, #40]	; 0x28
 800456a:	189b      	addlt	r3, r3, r2
 800456c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800456e:	9b08      	ldr	r3, [sp, #32]
 8004570:	bfb8      	it	lt
 8004572:	2400      	movlt	r4, #0
 8004574:	2b00      	cmp	r3, #0
 8004576:	bfbb      	ittet	lt
 8004578:	9b06      	ldrlt	r3, [sp, #24]
 800457a:	9a08      	ldrlt	r2, [sp, #32]
 800457c:	9f06      	ldrge	r7, [sp, #24]
 800457e:	1a9f      	sublt	r7, r3, r2
 8004580:	bfac      	ite	ge
 8004582:	9b08      	ldrge	r3, [sp, #32]
 8004584:	2300      	movlt	r3, #0
 8004586:	e73f      	b.n	8004408 <_dtoa_r+0x748>
 8004588:	3fe00000 	.word	0x3fe00000
 800458c:	40240000 	.word	0x40240000
 8004590:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004592:	9f06      	ldr	r7, [sp, #24]
 8004594:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004596:	e742      	b.n	800441e <_dtoa_r+0x75e>
 8004598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800459a:	e76b      	b.n	8004474 <_dtoa_r+0x7b4>
 800459c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800459e:	2b01      	cmp	r3, #1
 80045a0:	dc19      	bgt.n	80045d6 <_dtoa_r+0x916>
 80045a2:	9b04      	ldr	r3, [sp, #16]
 80045a4:	b9bb      	cbnz	r3, 80045d6 <_dtoa_r+0x916>
 80045a6:	9b05      	ldr	r3, [sp, #20]
 80045a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045ac:	b99b      	cbnz	r3, 80045d6 <_dtoa_r+0x916>
 80045ae:	9b05      	ldr	r3, [sp, #20]
 80045b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045b4:	0d1b      	lsrs	r3, r3, #20
 80045b6:	051b      	lsls	r3, r3, #20
 80045b8:	b183      	cbz	r3, 80045dc <_dtoa_r+0x91c>
 80045ba:	f04f 0801 	mov.w	r8, #1
 80045be:	9b06      	ldr	r3, [sp, #24]
 80045c0:	3301      	adds	r3, #1
 80045c2:	9306      	str	r3, [sp, #24]
 80045c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045c6:	3301      	adds	r3, #1
 80045c8:	9309      	str	r3, [sp, #36]	; 0x24
 80045ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f47f af6a 	bne.w	80044a6 <_dtoa_r+0x7e6>
 80045d2:	2001      	movs	r0, #1
 80045d4:	e76f      	b.n	80044b6 <_dtoa_r+0x7f6>
 80045d6:	f04f 0800 	mov.w	r8, #0
 80045da:	e7f6      	b.n	80045ca <_dtoa_r+0x90a>
 80045dc:	4698      	mov	r8, r3
 80045de:	e7f4      	b.n	80045ca <_dtoa_r+0x90a>
 80045e0:	f43f af7d 	beq.w	80044de <_dtoa_r+0x81e>
 80045e4:	4618      	mov	r0, r3
 80045e6:	301c      	adds	r0, #28
 80045e8:	e772      	b.n	80044d0 <_dtoa_r+0x810>
 80045ea:	9b08      	ldr	r3, [sp, #32]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	dc36      	bgt.n	800465e <_dtoa_r+0x99e>
 80045f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	dd33      	ble.n	800465e <_dtoa_r+0x99e>
 80045f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045fa:	f1b9 0f00 	cmp.w	r9, #0
 80045fe:	d10d      	bne.n	800461c <_dtoa_r+0x95c>
 8004600:	4621      	mov	r1, r4
 8004602:	464b      	mov	r3, r9
 8004604:	2205      	movs	r2, #5
 8004606:	4628      	mov	r0, r5
 8004608:	f000 f9d2 	bl	80049b0 <__multadd>
 800460c:	4601      	mov	r1, r0
 800460e:	4604      	mov	r4, r0
 8004610:	4658      	mov	r0, fp
 8004612:	f000 fbe9 	bl	8004de8 <__mcmp>
 8004616:	2800      	cmp	r0, #0
 8004618:	f73f adb8 	bgt.w	800418c <_dtoa_r+0x4cc>
 800461c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800461e:	9f03      	ldr	r7, [sp, #12]
 8004620:	ea6f 0a03 	mvn.w	sl, r3
 8004624:	f04f 0800 	mov.w	r8, #0
 8004628:	4621      	mov	r1, r4
 800462a:	4628      	mov	r0, r5
 800462c:	f000 f99e 	bl	800496c <_Bfree>
 8004630:	2e00      	cmp	r6, #0
 8004632:	f43f aea7 	beq.w	8004384 <_dtoa_r+0x6c4>
 8004636:	f1b8 0f00 	cmp.w	r8, #0
 800463a:	d005      	beq.n	8004648 <_dtoa_r+0x988>
 800463c:	45b0      	cmp	r8, r6
 800463e:	d003      	beq.n	8004648 <_dtoa_r+0x988>
 8004640:	4641      	mov	r1, r8
 8004642:	4628      	mov	r0, r5
 8004644:	f000 f992 	bl	800496c <_Bfree>
 8004648:	4631      	mov	r1, r6
 800464a:	4628      	mov	r0, r5
 800464c:	f000 f98e 	bl	800496c <_Bfree>
 8004650:	e698      	b.n	8004384 <_dtoa_r+0x6c4>
 8004652:	2400      	movs	r4, #0
 8004654:	4626      	mov	r6, r4
 8004656:	e7e1      	b.n	800461c <_dtoa_r+0x95c>
 8004658:	46c2      	mov	sl, r8
 800465a:	4626      	mov	r6, r4
 800465c:	e596      	b.n	800418c <_dtoa_r+0x4cc>
 800465e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004660:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80fd 	beq.w	8004864 <_dtoa_r+0xba4>
 800466a:	2f00      	cmp	r7, #0
 800466c:	dd05      	ble.n	800467a <_dtoa_r+0x9ba>
 800466e:	4631      	mov	r1, r6
 8004670:	463a      	mov	r2, r7
 8004672:	4628      	mov	r0, r5
 8004674:	f000 fb48 	bl	8004d08 <__lshift>
 8004678:	4606      	mov	r6, r0
 800467a:	f1b8 0f00 	cmp.w	r8, #0
 800467e:	d05c      	beq.n	800473a <_dtoa_r+0xa7a>
 8004680:	4628      	mov	r0, r5
 8004682:	6871      	ldr	r1, [r6, #4]
 8004684:	f000 f932 	bl	80048ec <_Balloc>
 8004688:	4607      	mov	r7, r0
 800468a:	b928      	cbnz	r0, 8004698 <_dtoa_r+0x9d8>
 800468c:	4602      	mov	r2, r0
 800468e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004692:	4b7f      	ldr	r3, [pc, #508]	; (8004890 <_dtoa_r+0xbd0>)
 8004694:	f7ff bb28 	b.w	8003ce8 <_dtoa_r+0x28>
 8004698:	6932      	ldr	r2, [r6, #16]
 800469a:	f106 010c 	add.w	r1, r6, #12
 800469e:	3202      	adds	r2, #2
 80046a0:	0092      	lsls	r2, r2, #2
 80046a2:	300c      	adds	r0, #12
 80046a4:	f000 f914 	bl	80048d0 <memcpy>
 80046a8:	2201      	movs	r2, #1
 80046aa:	4639      	mov	r1, r7
 80046ac:	4628      	mov	r0, r5
 80046ae:	f000 fb2b 	bl	8004d08 <__lshift>
 80046b2:	46b0      	mov	r8, r6
 80046b4:	4606      	mov	r6, r0
 80046b6:	9b03      	ldr	r3, [sp, #12]
 80046b8:	3301      	adds	r3, #1
 80046ba:	9308      	str	r3, [sp, #32]
 80046bc:	9b03      	ldr	r3, [sp, #12]
 80046be:	444b      	add	r3, r9
 80046c0:	930a      	str	r3, [sp, #40]	; 0x28
 80046c2:	9b04      	ldr	r3, [sp, #16]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	9309      	str	r3, [sp, #36]	; 0x24
 80046ca:	9b08      	ldr	r3, [sp, #32]
 80046cc:	4621      	mov	r1, r4
 80046ce:	3b01      	subs	r3, #1
 80046d0:	4658      	mov	r0, fp
 80046d2:	9304      	str	r3, [sp, #16]
 80046d4:	f7ff fa66 	bl	8003ba4 <quorem>
 80046d8:	4603      	mov	r3, r0
 80046da:	4641      	mov	r1, r8
 80046dc:	3330      	adds	r3, #48	; 0x30
 80046de:	9006      	str	r0, [sp, #24]
 80046e0:	4658      	mov	r0, fp
 80046e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80046e4:	f000 fb80 	bl	8004de8 <__mcmp>
 80046e8:	4632      	mov	r2, r6
 80046ea:	4681      	mov	r9, r0
 80046ec:	4621      	mov	r1, r4
 80046ee:	4628      	mov	r0, r5
 80046f0:	f000 fb96 	bl	8004e20 <__mdiff>
 80046f4:	68c2      	ldr	r2, [r0, #12]
 80046f6:	4607      	mov	r7, r0
 80046f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046fa:	bb02      	cbnz	r2, 800473e <_dtoa_r+0xa7e>
 80046fc:	4601      	mov	r1, r0
 80046fe:	4658      	mov	r0, fp
 8004700:	f000 fb72 	bl	8004de8 <__mcmp>
 8004704:	4602      	mov	r2, r0
 8004706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004708:	4639      	mov	r1, r7
 800470a:	4628      	mov	r0, r5
 800470c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004710:	f000 f92c 	bl	800496c <_Bfree>
 8004714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004718:	9f08      	ldr	r7, [sp, #32]
 800471a:	ea43 0102 	orr.w	r1, r3, r2
 800471e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004720:	430b      	orrs	r3, r1
 8004722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004724:	d10d      	bne.n	8004742 <_dtoa_r+0xa82>
 8004726:	2b39      	cmp	r3, #57	; 0x39
 8004728:	d029      	beq.n	800477e <_dtoa_r+0xabe>
 800472a:	f1b9 0f00 	cmp.w	r9, #0
 800472e:	dd01      	ble.n	8004734 <_dtoa_r+0xa74>
 8004730:	9b06      	ldr	r3, [sp, #24]
 8004732:	3331      	adds	r3, #49	; 0x31
 8004734:	9a04      	ldr	r2, [sp, #16]
 8004736:	7013      	strb	r3, [r2, #0]
 8004738:	e776      	b.n	8004628 <_dtoa_r+0x968>
 800473a:	4630      	mov	r0, r6
 800473c:	e7b9      	b.n	80046b2 <_dtoa_r+0x9f2>
 800473e:	2201      	movs	r2, #1
 8004740:	e7e2      	b.n	8004708 <_dtoa_r+0xa48>
 8004742:	f1b9 0f00 	cmp.w	r9, #0
 8004746:	db06      	blt.n	8004756 <_dtoa_r+0xa96>
 8004748:	9922      	ldr	r1, [sp, #136]	; 0x88
 800474a:	ea41 0909 	orr.w	r9, r1, r9
 800474e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004750:	ea59 0101 	orrs.w	r1, r9, r1
 8004754:	d120      	bne.n	8004798 <_dtoa_r+0xad8>
 8004756:	2a00      	cmp	r2, #0
 8004758:	ddec      	ble.n	8004734 <_dtoa_r+0xa74>
 800475a:	4659      	mov	r1, fp
 800475c:	2201      	movs	r2, #1
 800475e:	4628      	mov	r0, r5
 8004760:	9308      	str	r3, [sp, #32]
 8004762:	f000 fad1 	bl	8004d08 <__lshift>
 8004766:	4621      	mov	r1, r4
 8004768:	4683      	mov	fp, r0
 800476a:	f000 fb3d 	bl	8004de8 <__mcmp>
 800476e:	2800      	cmp	r0, #0
 8004770:	9b08      	ldr	r3, [sp, #32]
 8004772:	dc02      	bgt.n	800477a <_dtoa_r+0xaba>
 8004774:	d1de      	bne.n	8004734 <_dtoa_r+0xa74>
 8004776:	07da      	lsls	r2, r3, #31
 8004778:	d5dc      	bpl.n	8004734 <_dtoa_r+0xa74>
 800477a:	2b39      	cmp	r3, #57	; 0x39
 800477c:	d1d8      	bne.n	8004730 <_dtoa_r+0xa70>
 800477e:	2339      	movs	r3, #57	; 0x39
 8004780:	9a04      	ldr	r2, [sp, #16]
 8004782:	7013      	strb	r3, [r2, #0]
 8004784:	463b      	mov	r3, r7
 8004786:	461f      	mov	r7, r3
 8004788:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800478c:	3b01      	subs	r3, #1
 800478e:	2a39      	cmp	r2, #57	; 0x39
 8004790:	d050      	beq.n	8004834 <_dtoa_r+0xb74>
 8004792:	3201      	adds	r2, #1
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	e747      	b.n	8004628 <_dtoa_r+0x968>
 8004798:	2a00      	cmp	r2, #0
 800479a:	dd03      	ble.n	80047a4 <_dtoa_r+0xae4>
 800479c:	2b39      	cmp	r3, #57	; 0x39
 800479e:	d0ee      	beq.n	800477e <_dtoa_r+0xabe>
 80047a0:	3301      	adds	r3, #1
 80047a2:	e7c7      	b.n	8004734 <_dtoa_r+0xa74>
 80047a4:	9a08      	ldr	r2, [sp, #32]
 80047a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80047a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80047ac:	428a      	cmp	r2, r1
 80047ae:	d02a      	beq.n	8004806 <_dtoa_r+0xb46>
 80047b0:	4659      	mov	r1, fp
 80047b2:	2300      	movs	r3, #0
 80047b4:	220a      	movs	r2, #10
 80047b6:	4628      	mov	r0, r5
 80047b8:	f000 f8fa 	bl	80049b0 <__multadd>
 80047bc:	45b0      	cmp	r8, r6
 80047be:	4683      	mov	fp, r0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	f04f 020a 	mov.w	r2, #10
 80047c8:	4641      	mov	r1, r8
 80047ca:	4628      	mov	r0, r5
 80047cc:	d107      	bne.n	80047de <_dtoa_r+0xb1e>
 80047ce:	f000 f8ef 	bl	80049b0 <__multadd>
 80047d2:	4680      	mov	r8, r0
 80047d4:	4606      	mov	r6, r0
 80047d6:	9b08      	ldr	r3, [sp, #32]
 80047d8:	3301      	adds	r3, #1
 80047da:	9308      	str	r3, [sp, #32]
 80047dc:	e775      	b.n	80046ca <_dtoa_r+0xa0a>
 80047de:	f000 f8e7 	bl	80049b0 <__multadd>
 80047e2:	4631      	mov	r1, r6
 80047e4:	4680      	mov	r8, r0
 80047e6:	2300      	movs	r3, #0
 80047e8:	220a      	movs	r2, #10
 80047ea:	4628      	mov	r0, r5
 80047ec:	f000 f8e0 	bl	80049b0 <__multadd>
 80047f0:	4606      	mov	r6, r0
 80047f2:	e7f0      	b.n	80047d6 <_dtoa_r+0xb16>
 80047f4:	f1b9 0f00 	cmp.w	r9, #0
 80047f8:	bfcc      	ite	gt
 80047fa:	464f      	movgt	r7, r9
 80047fc:	2701      	movle	r7, #1
 80047fe:	f04f 0800 	mov.w	r8, #0
 8004802:	9a03      	ldr	r2, [sp, #12]
 8004804:	4417      	add	r7, r2
 8004806:	4659      	mov	r1, fp
 8004808:	2201      	movs	r2, #1
 800480a:	4628      	mov	r0, r5
 800480c:	9308      	str	r3, [sp, #32]
 800480e:	f000 fa7b 	bl	8004d08 <__lshift>
 8004812:	4621      	mov	r1, r4
 8004814:	4683      	mov	fp, r0
 8004816:	f000 fae7 	bl	8004de8 <__mcmp>
 800481a:	2800      	cmp	r0, #0
 800481c:	dcb2      	bgt.n	8004784 <_dtoa_r+0xac4>
 800481e:	d102      	bne.n	8004826 <_dtoa_r+0xb66>
 8004820:	9b08      	ldr	r3, [sp, #32]
 8004822:	07db      	lsls	r3, r3, #31
 8004824:	d4ae      	bmi.n	8004784 <_dtoa_r+0xac4>
 8004826:	463b      	mov	r3, r7
 8004828:	461f      	mov	r7, r3
 800482a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800482e:	2a30      	cmp	r2, #48	; 0x30
 8004830:	d0fa      	beq.n	8004828 <_dtoa_r+0xb68>
 8004832:	e6f9      	b.n	8004628 <_dtoa_r+0x968>
 8004834:	9a03      	ldr	r2, [sp, #12]
 8004836:	429a      	cmp	r2, r3
 8004838:	d1a5      	bne.n	8004786 <_dtoa_r+0xac6>
 800483a:	2331      	movs	r3, #49	; 0x31
 800483c:	f10a 0a01 	add.w	sl, sl, #1
 8004840:	e779      	b.n	8004736 <_dtoa_r+0xa76>
 8004842:	4b14      	ldr	r3, [pc, #80]	; (8004894 <_dtoa_r+0xbd4>)
 8004844:	f7ff baa8 	b.w	8003d98 <_dtoa_r+0xd8>
 8004848:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800484a:	2b00      	cmp	r3, #0
 800484c:	f47f aa81 	bne.w	8003d52 <_dtoa_r+0x92>
 8004850:	4b11      	ldr	r3, [pc, #68]	; (8004898 <_dtoa_r+0xbd8>)
 8004852:	f7ff baa1 	b.w	8003d98 <_dtoa_r+0xd8>
 8004856:	f1b9 0f00 	cmp.w	r9, #0
 800485a:	dc03      	bgt.n	8004864 <_dtoa_r+0xba4>
 800485c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800485e:	2b02      	cmp	r3, #2
 8004860:	f73f aecb 	bgt.w	80045fa <_dtoa_r+0x93a>
 8004864:	9f03      	ldr	r7, [sp, #12]
 8004866:	4621      	mov	r1, r4
 8004868:	4658      	mov	r0, fp
 800486a:	f7ff f99b 	bl	8003ba4 <quorem>
 800486e:	9a03      	ldr	r2, [sp, #12]
 8004870:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004874:	f807 3b01 	strb.w	r3, [r7], #1
 8004878:	1aba      	subs	r2, r7, r2
 800487a:	4591      	cmp	r9, r2
 800487c:	ddba      	ble.n	80047f4 <_dtoa_r+0xb34>
 800487e:	4659      	mov	r1, fp
 8004880:	2300      	movs	r3, #0
 8004882:	220a      	movs	r2, #10
 8004884:	4628      	mov	r0, r5
 8004886:	f000 f893 	bl	80049b0 <__multadd>
 800488a:	4683      	mov	fp, r0
 800488c:	e7eb      	b.n	8004866 <_dtoa_r+0xba6>
 800488e:	bf00      	nop
 8004890:	0800618b 	.word	0x0800618b
 8004894:	080060e8 	.word	0x080060e8
 8004898:	0800610c 	.word	0x0800610c

0800489c <_localeconv_r>:
 800489c:	4800      	ldr	r0, [pc, #0]	; (80048a0 <_localeconv_r+0x4>)
 800489e:	4770      	bx	lr
 80048a0:	20000160 	.word	0x20000160

080048a4 <malloc>:
 80048a4:	4b02      	ldr	r3, [pc, #8]	; (80048b0 <malloc+0xc>)
 80048a6:	4601      	mov	r1, r0
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	f000 bc1d 	b.w	80050e8 <_malloc_r>
 80048ae:	bf00      	nop
 80048b0:	2000000c 	.word	0x2000000c

080048b4 <memchr>:
 80048b4:	4603      	mov	r3, r0
 80048b6:	b510      	push	{r4, lr}
 80048b8:	b2c9      	uxtb	r1, r1
 80048ba:	4402      	add	r2, r0
 80048bc:	4293      	cmp	r3, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	d101      	bne.n	80048c6 <memchr+0x12>
 80048c2:	2000      	movs	r0, #0
 80048c4:	e003      	b.n	80048ce <memchr+0x1a>
 80048c6:	7804      	ldrb	r4, [r0, #0]
 80048c8:	3301      	adds	r3, #1
 80048ca:	428c      	cmp	r4, r1
 80048cc:	d1f6      	bne.n	80048bc <memchr+0x8>
 80048ce:	bd10      	pop	{r4, pc}

080048d0 <memcpy>:
 80048d0:	440a      	add	r2, r1
 80048d2:	4291      	cmp	r1, r2
 80048d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80048d8:	d100      	bne.n	80048dc <memcpy+0xc>
 80048da:	4770      	bx	lr
 80048dc:	b510      	push	{r4, lr}
 80048de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048e2:	4291      	cmp	r1, r2
 80048e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048e8:	d1f9      	bne.n	80048de <memcpy+0xe>
 80048ea:	bd10      	pop	{r4, pc}

080048ec <_Balloc>:
 80048ec:	b570      	push	{r4, r5, r6, lr}
 80048ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80048f0:	4604      	mov	r4, r0
 80048f2:	460d      	mov	r5, r1
 80048f4:	b976      	cbnz	r6, 8004914 <_Balloc+0x28>
 80048f6:	2010      	movs	r0, #16
 80048f8:	f7ff ffd4 	bl	80048a4 <malloc>
 80048fc:	4602      	mov	r2, r0
 80048fe:	6260      	str	r0, [r4, #36]	; 0x24
 8004900:	b920      	cbnz	r0, 800490c <_Balloc+0x20>
 8004902:	2166      	movs	r1, #102	; 0x66
 8004904:	4b17      	ldr	r3, [pc, #92]	; (8004964 <_Balloc+0x78>)
 8004906:	4818      	ldr	r0, [pc, #96]	; (8004968 <_Balloc+0x7c>)
 8004908:	f000 fdce 	bl	80054a8 <__assert_func>
 800490c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004910:	6006      	str	r6, [r0, #0]
 8004912:	60c6      	str	r6, [r0, #12]
 8004914:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004916:	68f3      	ldr	r3, [r6, #12]
 8004918:	b183      	cbz	r3, 800493c <_Balloc+0x50>
 800491a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004922:	b9b8      	cbnz	r0, 8004954 <_Balloc+0x68>
 8004924:	2101      	movs	r1, #1
 8004926:	fa01 f605 	lsl.w	r6, r1, r5
 800492a:	1d72      	adds	r2, r6, #5
 800492c:	4620      	mov	r0, r4
 800492e:	0092      	lsls	r2, r2, #2
 8004930:	f000 fb5e 	bl	8004ff0 <_calloc_r>
 8004934:	b160      	cbz	r0, 8004950 <_Balloc+0x64>
 8004936:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800493a:	e00e      	b.n	800495a <_Balloc+0x6e>
 800493c:	2221      	movs	r2, #33	; 0x21
 800493e:	2104      	movs	r1, #4
 8004940:	4620      	mov	r0, r4
 8004942:	f000 fb55 	bl	8004ff0 <_calloc_r>
 8004946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004948:	60f0      	str	r0, [r6, #12]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e4      	bne.n	800491a <_Balloc+0x2e>
 8004950:	2000      	movs	r0, #0
 8004952:	bd70      	pop	{r4, r5, r6, pc}
 8004954:	6802      	ldr	r2, [r0, #0]
 8004956:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800495a:	2300      	movs	r3, #0
 800495c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004960:	e7f7      	b.n	8004952 <_Balloc+0x66>
 8004962:	bf00      	nop
 8004964:	08006119 	.word	0x08006119
 8004968:	0800619c 	.word	0x0800619c

0800496c <_Bfree>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004970:	4605      	mov	r5, r0
 8004972:	460c      	mov	r4, r1
 8004974:	b976      	cbnz	r6, 8004994 <_Bfree+0x28>
 8004976:	2010      	movs	r0, #16
 8004978:	f7ff ff94 	bl	80048a4 <malloc>
 800497c:	4602      	mov	r2, r0
 800497e:	6268      	str	r0, [r5, #36]	; 0x24
 8004980:	b920      	cbnz	r0, 800498c <_Bfree+0x20>
 8004982:	218a      	movs	r1, #138	; 0x8a
 8004984:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <_Bfree+0x3c>)
 8004986:	4809      	ldr	r0, [pc, #36]	; (80049ac <_Bfree+0x40>)
 8004988:	f000 fd8e 	bl	80054a8 <__assert_func>
 800498c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004990:	6006      	str	r6, [r0, #0]
 8004992:	60c6      	str	r6, [r0, #12]
 8004994:	b13c      	cbz	r4, 80049a6 <_Bfree+0x3a>
 8004996:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004998:	6862      	ldr	r2, [r4, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049a0:	6021      	str	r1, [r4, #0]
 80049a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80049a6:	bd70      	pop	{r4, r5, r6, pc}
 80049a8:	08006119 	.word	0x08006119
 80049ac:	0800619c 	.word	0x0800619c

080049b0 <__multadd>:
 80049b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b4:	4607      	mov	r7, r0
 80049b6:	460c      	mov	r4, r1
 80049b8:	461e      	mov	r6, r3
 80049ba:	2000      	movs	r0, #0
 80049bc:	690d      	ldr	r5, [r1, #16]
 80049be:	f101 0c14 	add.w	ip, r1, #20
 80049c2:	f8dc 3000 	ldr.w	r3, [ip]
 80049c6:	3001      	adds	r0, #1
 80049c8:	b299      	uxth	r1, r3
 80049ca:	fb02 6101 	mla	r1, r2, r1, r6
 80049ce:	0c1e      	lsrs	r6, r3, #16
 80049d0:	0c0b      	lsrs	r3, r1, #16
 80049d2:	fb02 3306 	mla	r3, r2, r6, r3
 80049d6:	b289      	uxth	r1, r1
 80049d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80049dc:	4285      	cmp	r5, r0
 80049de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80049e2:	f84c 1b04 	str.w	r1, [ip], #4
 80049e6:	dcec      	bgt.n	80049c2 <__multadd+0x12>
 80049e8:	b30e      	cbz	r6, 8004a2e <__multadd+0x7e>
 80049ea:	68a3      	ldr	r3, [r4, #8]
 80049ec:	42ab      	cmp	r3, r5
 80049ee:	dc19      	bgt.n	8004a24 <__multadd+0x74>
 80049f0:	6861      	ldr	r1, [r4, #4]
 80049f2:	4638      	mov	r0, r7
 80049f4:	3101      	adds	r1, #1
 80049f6:	f7ff ff79 	bl	80048ec <_Balloc>
 80049fa:	4680      	mov	r8, r0
 80049fc:	b928      	cbnz	r0, 8004a0a <__multadd+0x5a>
 80049fe:	4602      	mov	r2, r0
 8004a00:	21b5      	movs	r1, #181	; 0xb5
 8004a02:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <__multadd+0x84>)
 8004a04:	480c      	ldr	r0, [pc, #48]	; (8004a38 <__multadd+0x88>)
 8004a06:	f000 fd4f 	bl	80054a8 <__assert_func>
 8004a0a:	6922      	ldr	r2, [r4, #16]
 8004a0c:	f104 010c 	add.w	r1, r4, #12
 8004a10:	3202      	adds	r2, #2
 8004a12:	0092      	lsls	r2, r2, #2
 8004a14:	300c      	adds	r0, #12
 8004a16:	f7ff ff5b 	bl	80048d0 <memcpy>
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	4638      	mov	r0, r7
 8004a1e:	f7ff ffa5 	bl	800496c <_Bfree>
 8004a22:	4644      	mov	r4, r8
 8004a24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004a28:	3501      	adds	r5, #1
 8004a2a:	615e      	str	r6, [r3, #20]
 8004a2c:	6125      	str	r5, [r4, #16]
 8004a2e:	4620      	mov	r0, r4
 8004a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a34:	0800618b 	.word	0x0800618b
 8004a38:	0800619c 	.word	0x0800619c

08004a3c <__hi0bits>:
 8004a3c:	0c02      	lsrs	r2, r0, #16
 8004a3e:	0412      	lsls	r2, r2, #16
 8004a40:	4603      	mov	r3, r0
 8004a42:	b9ca      	cbnz	r2, 8004a78 <__hi0bits+0x3c>
 8004a44:	0403      	lsls	r3, r0, #16
 8004a46:	2010      	movs	r0, #16
 8004a48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004a4c:	bf04      	itt	eq
 8004a4e:	021b      	lsleq	r3, r3, #8
 8004a50:	3008      	addeq	r0, #8
 8004a52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004a56:	bf04      	itt	eq
 8004a58:	011b      	lsleq	r3, r3, #4
 8004a5a:	3004      	addeq	r0, #4
 8004a5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004a60:	bf04      	itt	eq
 8004a62:	009b      	lsleq	r3, r3, #2
 8004a64:	3002      	addeq	r0, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	db05      	blt.n	8004a76 <__hi0bits+0x3a>
 8004a6a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004a6e:	f100 0001 	add.w	r0, r0, #1
 8004a72:	bf08      	it	eq
 8004a74:	2020      	moveq	r0, #32
 8004a76:	4770      	bx	lr
 8004a78:	2000      	movs	r0, #0
 8004a7a:	e7e5      	b.n	8004a48 <__hi0bits+0xc>

08004a7c <__lo0bits>:
 8004a7c:	6803      	ldr	r3, [r0, #0]
 8004a7e:	4602      	mov	r2, r0
 8004a80:	f013 0007 	ands.w	r0, r3, #7
 8004a84:	d00b      	beq.n	8004a9e <__lo0bits+0x22>
 8004a86:	07d9      	lsls	r1, r3, #31
 8004a88:	d421      	bmi.n	8004ace <__lo0bits+0x52>
 8004a8a:	0798      	lsls	r0, r3, #30
 8004a8c:	bf49      	itett	mi
 8004a8e:	085b      	lsrmi	r3, r3, #1
 8004a90:	089b      	lsrpl	r3, r3, #2
 8004a92:	2001      	movmi	r0, #1
 8004a94:	6013      	strmi	r3, [r2, #0]
 8004a96:	bf5c      	itt	pl
 8004a98:	2002      	movpl	r0, #2
 8004a9a:	6013      	strpl	r3, [r2, #0]
 8004a9c:	4770      	bx	lr
 8004a9e:	b299      	uxth	r1, r3
 8004aa0:	b909      	cbnz	r1, 8004aa6 <__lo0bits+0x2a>
 8004aa2:	2010      	movs	r0, #16
 8004aa4:	0c1b      	lsrs	r3, r3, #16
 8004aa6:	b2d9      	uxtb	r1, r3
 8004aa8:	b909      	cbnz	r1, 8004aae <__lo0bits+0x32>
 8004aaa:	3008      	adds	r0, #8
 8004aac:	0a1b      	lsrs	r3, r3, #8
 8004aae:	0719      	lsls	r1, r3, #28
 8004ab0:	bf04      	itt	eq
 8004ab2:	091b      	lsreq	r3, r3, #4
 8004ab4:	3004      	addeq	r0, #4
 8004ab6:	0799      	lsls	r1, r3, #30
 8004ab8:	bf04      	itt	eq
 8004aba:	089b      	lsreq	r3, r3, #2
 8004abc:	3002      	addeq	r0, #2
 8004abe:	07d9      	lsls	r1, r3, #31
 8004ac0:	d403      	bmi.n	8004aca <__lo0bits+0x4e>
 8004ac2:	085b      	lsrs	r3, r3, #1
 8004ac4:	f100 0001 	add.w	r0, r0, #1
 8004ac8:	d003      	beq.n	8004ad2 <__lo0bits+0x56>
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	4770      	bx	lr
 8004ace:	2000      	movs	r0, #0
 8004ad0:	4770      	bx	lr
 8004ad2:	2020      	movs	r0, #32
 8004ad4:	4770      	bx	lr
	...

08004ad8 <__i2b>:
 8004ad8:	b510      	push	{r4, lr}
 8004ada:	460c      	mov	r4, r1
 8004adc:	2101      	movs	r1, #1
 8004ade:	f7ff ff05 	bl	80048ec <_Balloc>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	b928      	cbnz	r0, 8004af2 <__i2b+0x1a>
 8004ae6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004aea:	4b04      	ldr	r3, [pc, #16]	; (8004afc <__i2b+0x24>)
 8004aec:	4804      	ldr	r0, [pc, #16]	; (8004b00 <__i2b+0x28>)
 8004aee:	f000 fcdb 	bl	80054a8 <__assert_func>
 8004af2:	2301      	movs	r3, #1
 8004af4:	6144      	str	r4, [r0, #20]
 8004af6:	6103      	str	r3, [r0, #16]
 8004af8:	bd10      	pop	{r4, pc}
 8004afa:	bf00      	nop
 8004afc:	0800618b 	.word	0x0800618b
 8004b00:	0800619c 	.word	0x0800619c

08004b04 <__multiply>:
 8004b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b08:	4691      	mov	r9, r2
 8004b0a:	690a      	ldr	r2, [r1, #16]
 8004b0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004b10:	460c      	mov	r4, r1
 8004b12:	429a      	cmp	r2, r3
 8004b14:	bfbe      	ittt	lt
 8004b16:	460b      	movlt	r3, r1
 8004b18:	464c      	movlt	r4, r9
 8004b1a:	4699      	movlt	r9, r3
 8004b1c:	6927      	ldr	r7, [r4, #16]
 8004b1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004b22:	68a3      	ldr	r3, [r4, #8]
 8004b24:	6861      	ldr	r1, [r4, #4]
 8004b26:	eb07 060a 	add.w	r6, r7, sl
 8004b2a:	42b3      	cmp	r3, r6
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	bfb8      	it	lt
 8004b30:	3101      	addlt	r1, #1
 8004b32:	f7ff fedb 	bl	80048ec <_Balloc>
 8004b36:	b930      	cbnz	r0, 8004b46 <__multiply+0x42>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	f240 115d 	movw	r1, #349	; 0x15d
 8004b3e:	4b43      	ldr	r3, [pc, #268]	; (8004c4c <__multiply+0x148>)
 8004b40:	4843      	ldr	r0, [pc, #268]	; (8004c50 <__multiply+0x14c>)
 8004b42:	f000 fcb1 	bl	80054a8 <__assert_func>
 8004b46:	f100 0514 	add.w	r5, r0, #20
 8004b4a:	462b      	mov	r3, r5
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004b52:	4543      	cmp	r3, r8
 8004b54:	d321      	bcc.n	8004b9a <__multiply+0x96>
 8004b56:	f104 0314 	add.w	r3, r4, #20
 8004b5a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004b5e:	f109 0314 	add.w	r3, r9, #20
 8004b62:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004b66:	9202      	str	r2, [sp, #8]
 8004b68:	1b3a      	subs	r2, r7, r4
 8004b6a:	3a15      	subs	r2, #21
 8004b6c:	f022 0203 	bic.w	r2, r2, #3
 8004b70:	3204      	adds	r2, #4
 8004b72:	f104 0115 	add.w	r1, r4, #21
 8004b76:	428f      	cmp	r7, r1
 8004b78:	bf38      	it	cc
 8004b7a:	2204      	movcc	r2, #4
 8004b7c:	9201      	str	r2, [sp, #4]
 8004b7e:	9a02      	ldr	r2, [sp, #8]
 8004b80:	9303      	str	r3, [sp, #12]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d80c      	bhi.n	8004ba0 <__multiply+0x9c>
 8004b86:	2e00      	cmp	r6, #0
 8004b88:	dd03      	ble.n	8004b92 <__multiply+0x8e>
 8004b8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d059      	beq.n	8004c46 <__multiply+0x142>
 8004b92:	6106      	str	r6, [r0, #16]
 8004b94:	b005      	add	sp, #20
 8004b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b9a:	f843 2b04 	str.w	r2, [r3], #4
 8004b9e:	e7d8      	b.n	8004b52 <__multiply+0x4e>
 8004ba0:	f8b3 a000 	ldrh.w	sl, [r3]
 8004ba4:	f1ba 0f00 	cmp.w	sl, #0
 8004ba8:	d023      	beq.n	8004bf2 <__multiply+0xee>
 8004baa:	46a9      	mov	r9, r5
 8004bac:	f04f 0c00 	mov.w	ip, #0
 8004bb0:	f104 0e14 	add.w	lr, r4, #20
 8004bb4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004bb8:	f8d9 1000 	ldr.w	r1, [r9]
 8004bbc:	fa1f fb82 	uxth.w	fp, r2
 8004bc0:	b289      	uxth	r1, r1
 8004bc2:	fb0a 110b 	mla	r1, sl, fp, r1
 8004bc6:	4461      	add	r1, ip
 8004bc8:	f8d9 c000 	ldr.w	ip, [r9]
 8004bcc:	0c12      	lsrs	r2, r2, #16
 8004bce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004bd2:	fb0a c202 	mla	r2, sl, r2, ip
 8004bd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004bda:	b289      	uxth	r1, r1
 8004bdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004be0:	4577      	cmp	r7, lr
 8004be2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004be6:	f849 1b04 	str.w	r1, [r9], #4
 8004bea:	d8e3      	bhi.n	8004bb4 <__multiply+0xb0>
 8004bec:	9a01      	ldr	r2, [sp, #4]
 8004bee:	f845 c002 	str.w	ip, [r5, r2]
 8004bf2:	9a03      	ldr	r2, [sp, #12]
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004bfa:	f1b9 0f00 	cmp.w	r9, #0
 8004bfe:	d020      	beq.n	8004c42 <__multiply+0x13e>
 8004c00:	46ae      	mov	lr, r5
 8004c02:	f04f 0a00 	mov.w	sl, #0
 8004c06:	6829      	ldr	r1, [r5, #0]
 8004c08:	f104 0c14 	add.w	ip, r4, #20
 8004c0c:	f8bc b000 	ldrh.w	fp, [ip]
 8004c10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004c14:	b289      	uxth	r1, r1
 8004c16:	fb09 220b 	mla	r2, r9, fp, r2
 8004c1a:	4492      	add	sl, r2
 8004c1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004c20:	f84e 1b04 	str.w	r1, [lr], #4
 8004c24:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004c28:	f8be 1000 	ldrh.w	r1, [lr]
 8004c2c:	0c12      	lsrs	r2, r2, #16
 8004c2e:	fb09 1102 	mla	r1, r9, r2, r1
 8004c32:	4567      	cmp	r7, ip
 8004c34:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004c38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004c3c:	d8e6      	bhi.n	8004c0c <__multiply+0x108>
 8004c3e:	9a01      	ldr	r2, [sp, #4]
 8004c40:	50a9      	str	r1, [r5, r2]
 8004c42:	3504      	adds	r5, #4
 8004c44:	e79b      	b.n	8004b7e <__multiply+0x7a>
 8004c46:	3e01      	subs	r6, #1
 8004c48:	e79d      	b.n	8004b86 <__multiply+0x82>
 8004c4a:	bf00      	nop
 8004c4c:	0800618b 	.word	0x0800618b
 8004c50:	0800619c 	.word	0x0800619c

08004c54 <__pow5mult>:
 8004c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c58:	4615      	mov	r5, r2
 8004c5a:	f012 0203 	ands.w	r2, r2, #3
 8004c5e:	4606      	mov	r6, r0
 8004c60:	460f      	mov	r7, r1
 8004c62:	d007      	beq.n	8004c74 <__pow5mult+0x20>
 8004c64:	4c25      	ldr	r4, [pc, #148]	; (8004cfc <__pow5mult+0xa8>)
 8004c66:	3a01      	subs	r2, #1
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004c6e:	f7ff fe9f 	bl	80049b0 <__multadd>
 8004c72:	4607      	mov	r7, r0
 8004c74:	10ad      	asrs	r5, r5, #2
 8004c76:	d03d      	beq.n	8004cf4 <__pow5mult+0xa0>
 8004c78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004c7a:	b97c      	cbnz	r4, 8004c9c <__pow5mult+0x48>
 8004c7c:	2010      	movs	r0, #16
 8004c7e:	f7ff fe11 	bl	80048a4 <malloc>
 8004c82:	4602      	mov	r2, r0
 8004c84:	6270      	str	r0, [r6, #36]	; 0x24
 8004c86:	b928      	cbnz	r0, 8004c94 <__pow5mult+0x40>
 8004c88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004c8c:	4b1c      	ldr	r3, [pc, #112]	; (8004d00 <__pow5mult+0xac>)
 8004c8e:	481d      	ldr	r0, [pc, #116]	; (8004d04 <__pow5mult+0xb0>)
 8004c90:	f000 fc0a 	bl	80054a8 <__assert_func>
 8004c94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c98:	6004      	str	r4, [r0, #0]
 8004c9a:	60c4      	str	r4, [r0, #12]
 8004c9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004ca0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ca4:	b94c      	cbnz	r4, 8004cba <__pow5mult+0x66>
 8004ca6:	f240 2171 	movw	r1, #625	; 0x271
 8004caa:	4630      	mov	r0, r6
 8004cac:	f7ff ff14 	bl	8004ad8 <__i2b>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	f8c8 0008 	str.w	r0, [r8, #8]
 8004cb8:	6003      	str	r3, [r0, #0]
 8004cba:	f04f 0900 	mov.w	r9, #0
 8004cbe:	07eb      	lsls	r3, r5, #31
 8004cc0:	d50a      	bpl.n	8004cd8 <__pow5mult+0x84>
 8004cc2:	4639      	mov	r1, r7
 8004cc4:	4622      	mov	r2, r4
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	f7ff ff1c 	bl	8004b04 <__multiply>
 8004ccc:	4680      	mov	r8, r0
 8004cce:	4639      	mov	r1, r7
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f7ff fe4b 	bl	800496c <_Bfree>
 8004cd6:	4647      	mov	r7, r8
 8004cd8:	106d      	asrs	r5, r5, #1
 8004cda:	d00b      	beq.n	8004cf4 <__pow5mult+0xa0>
 8004cdc:	6820      	ldr	r0, [r4, #0]
 8004cde:	b938      	cbnz	r0, 8004cf0 <__pow5mult+0x9c>
 8004ce0:	4622      	mov	r2, r4
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	f7ff ff0d 	bl	8004b04 <__multiply>
 8004cea:	6020      	str	r0, [r4, #0]
 8004cec:	f8c0 9000 	str.w	r9, [r0]
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	e7e4      	b.n	8004cbe <__pow5mult+0x6a>
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cfa:	bf00      	nop
 8004cfc:	080062e8 	.word	0x080062e8
 8004d00:	08006119 	.word	0x08006119
 8004d04:	0800619c 	.word	0x0800619c

08004d08 <__lshift>:
 8004d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d0c:	460c      	mov	r4, r1
 8004d0e:	4607      	mov	r7, r0
 8004d10:	4691      	mov	r9, r2
 8004d12:	6923      	ldr	r3, [r4, #16]
 8004d14:	6849      	ldr	r1, [r1, #4]
 8004d16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004d1a:	68a3      	ldr	r3, [r4, #8]
 8004d1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004d20:	f108 0601 	add.w	r6, r8, #1
 8004d24:	42b3      	cmp	r3, r6
 8004d26:	db0b      	blt.n	8004d40 <__lshift+0x38>
 8004d28:	4638      	mov	r0, r7
 8004d2a:	f7ff fddf 	bl	80048ec <_Balloc>
 8004d2e:	4605      	mov	r5, r0
 8004d30:	b948      	cbnz	r0, 8004d46 <__lshift+0x3e>
 8004d32:	4602      	mov	r2, r0
 8004d34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004d38:	4b29      	ldr	r3, [pc, #164]	; (8004de0 <__lshift+0xd8>)
 8004d3a:	482a      	ldr	r0, [pc, #168]	; (8004de4 <__lshift+0xdc>)
 8004d3c:	f000 fbb4 	bl	80054a8 <__assert_func>
 8004d40:	3101      	adds	r1, #1
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	e7ee      	b.n	8004d24 <__lshift+0x1c>
 8004d46:	2300      	movs	r3, #0
 8004d48:	f100 0114 	add.w	r1, r0, #20
 8004d4c:	f100 0210 	add.w	r2, r0, #16
 8004d50:	4618      	mov	r0, r3
 8004d52:	4553      	cmp	r3, sl
 8004d54:	db37      	blt.n	8004dc6 <__lshift+0xbe>
 8004d56:	6920      	ldr	r0, [r4, #16]
 8004d58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d5c:	f104 0314 	add.w	r3, r4, #20
 8004d60:	f019 091f 	ands.w	r9, r9, #31
 8004d64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004d68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004d6c:	d02f      	beq.n	8004dce <__lshift+0xc6>
 8004d6e:	468a      	mov	sl, r1
 8004d70:	f04f 0c00 	mov.w	ip, #0
 8004d74:	f1c9 0e20 	rsb	lr, r9, #32
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	fa02 f209 	lsl.w	r2, r2, r9
 8004d7e:	ea42 020c 	orr.w	r2, r2, ip
 8004d82:	f84a 2b04 	str.w	r2, [sl], #4
 8004d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d8a:	4298      	cmp	r0, r3
 8004d8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004d90:	d8f2      	bhi.n	8004d78 <__lshift+0x70>
 8004d92:	1b03      	subs	r3, r0, r4
 8004d94:	3b15      	subs	r3, #21
 8004d96:	f023 0303 	bic.w	r3, r3, #3
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	f104 0215 	add.w	r2, r4, #21
 8004da0:	4290      	cmp	r0, r2
 8004da2:	bf38      	it	cc
 8004da4:	2304      	movcc	r3, #4
 8004da6:	f841 c003 	str.w	ip, [r1, r3]
 8004daa:	f1bc 0f00 	cmp.w	ip, #0
 8004dae:	d001      	beq.n	8004db4 <__lshift+0xac>
 8004db0:	f108 0602 	add.w	r6, r8, #2
 8004db4:	3e01      	subs	r6, #1
 8004db6:	4638      	mov	r0, r7
 8004db8:	4621      	mov	r1, r4
 8004dba:	612e      	str	r6, [r5, #16]
 8004dbc:	f7ff fdd6 	bl	800496c <_Bfree>
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8004dca:	3301      	adds	r3, #1
 8004dcc:	e7c1      	b.n	8004d52 <__lshift+0x4a>
 8004dce:	3904      	subs	r1, #4
 8004dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dd4:	4298      	cmp	r0, r3
 8004dd6:	f841 2f04 	str.w	r2, [r1, #4]!
 8004dda:	d8f9      	bhi.n	8004dd0 <__lshift+0xc8>
 8004ddc:	e7ea      	b.n	8004db4 <__lshift+0xac>
 8004dde:	bf00      	nop
 8004de0:	0800618b 	.word	0x0800618b
 8004de4:	0800619c 	.word	0x0800619c

08004de8 <__mcmp>:
 8004de8:	4603      	mov	r3, r0
 8004dea:	690a      	ldr	r2, [r1, #16]
 8004dec:	6900      	ldr	r0, [r0, #16]
 8004dee:	b530      	push	{r4, r5, lr}
 8004df0:	1a80      	subs	r0, r0, r2
 8004df2:	d10d      	bne.n	8004e10 <__mcmp+0x28>
 8004df4:	3314      	adds	r3, #20
 8004df6:	3114      	adds	r1, #20
 8004df8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004dfc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004e00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004e04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004e08:	4295      	cmp	r5, r2
 8004e0a:	d002      	beq.n	8004e12 <__mcmp+0x2a>
 8004e0c:	d304      	bcc.n	8004e18 <__mcmp+0x30>
 8004e0e:	2001      	movs	r0, #1
 8004e10:	bd30      	pop	{r4, r5, pc}
 8004e12:	42a3      	cmp	r3, r4
 8004e14:	d3f4      	bcc.n	8004e00 <__mcmp+0x18>
 8004e16:	e7fb      	b.n	8004e10 <__mcmp+0x28>
 8004e18:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1c:	e7f8      	b.n	8004e10 <__mcmp+0x28>
	...

08004e20 <__mdiff>:
 8004e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e24:	460d      	mov	r5, r1
 8004e26:	4607      	mov	r7, r0
 8004e28:	4611      	mov	r1, r2
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	4614      	mov	r4, r2
 8004e2e:	f7ff ffdb 	bl	8004de8 <__mcmp>
 8004e32:	1e06      	subs	r6, r0, #0
 8004e34:	d111      	bne.n	8004e5a <__mdiff+0x3a>
 8004e36:	4631      	mov	r1, r6
 8004e38:	4638      	mov	r0, r7
 8004e3a:	f7ff fd57 	bl	80048ec <_Balloc>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	b928      	cbnz	r0, 8004e4e <__mdiff+0x2e>
 8004e42:	f240 2132 	movw	r1, #562	; 0x232
 8004e46:	4b3a      	ldr	r3, [pc, #232]	; (8004f30 <__mdiff+0x110>)
 8004e48:	483a      	ldr	r0, [pc, #232]	; (8004f34 <__mdiff+0x114>)
 8004e4a:	f000 fb2d 	bl	80054a8 <__assert_func>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004e54:	4610      	mov	r0, r2
 8004e56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5a:	bfa4      	itt	ge
 8004e5c:	4623      	movge	r3, r4
 8004e5e:	462c      	movge	r4, r5
 8004e60:	4638      	mov	r0, r7
 8004e62:	6861      	ldr	r1, [r4, #4]
 8004e64:	bfa6      	itte	ge
 8004e66:	461d      	movge	r5, r3
 8004e68:	2600      	movge	r6, #0
 8004e6a:	2601      	movlt	r6, #1
 8004e6c:	f7ff fd3e 	bl	80048ec <_Balloc>
 8004e70:	4602      	mov	r2, r0
 8004e72:	b918      	cbnz	r0, 8004e7c <__mdiff+0x5c>
 8004e74:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004e78:	4b2d      	ldr	r3, [pc, #180]	; (8004f30 <__mdiff+0x110>)
 8004e7a:	e7e5      	b.n	8004e48 <__mdiff+0x28>
 8004e7c:	f102 0814 	add.w	r8, r2, #20
 8004e80:	46c2      	mov	sl, r8
 8004e82:	f04f 0c00 	mov.w	ip, #0
 8004e86:	6927      	ldr	r7, [r4, #16]
 8004e88:	60c6      	str	r6, [r0, #12]
 8004e8a:	692e      	ldr	r6, [r5, #16]
 8004e8c:	f104 0014 	add.w	r0, r4, #20
 8004e90:	f105 0914 	add.w	r9, r5, #20
 8004e94:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004e98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004e9c:	3410      	adds	r4, #16
 8004e9e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004ea2:	f859 3b04 	ldr.w	r3, [r9], #4
 8004ea6:	fa1f f18b 	uxth.w	r1, fp
 8004eaa:	448c      	add	ip, r1
 8004eac:	b299      	uxth	r1, r3
 8004eae:	0c1b      	lsrs	r3, r3, #16
 8004eb0:	ebac 0101 	sub.w	r1, ip, r1
 8004eb4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004eb8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004ebc:	b289      	uxth	r1, r1
 8004ebe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004ec2:	454e      	cmp	r6, r9
 8004ec4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004ec8:	f84a 3b04 	str.w	r3, [sl], #4
 8004ecc:	d8e7      	bhi.n	8004e9e <__mdiff+0x7e>
 8004ece:	1b73      	subs	r3, r6, r5
 8004ed0:	3b15      	subs	r3, #21
 8004ed2:	f023 0303 	bic.w	r3, r3, #3
 8004ed6:	3515      	adds	r5, #21
 8004ed8:	3304      	adds	r3, #4
 8004eda:	42ae      	cmp	r6, r5
 8004edc:	bf38      	it	cc
 8004ede:	2304      	movcc	r3, #4
 8004ee0:	4418      	add	r0, r3
 8004ee2:	4443      	add	r3, r8
 8004ee4:	461e      	mov	r6, r3
 8004ee6:	4605      	mov	r5, r0
 8004ee8:	4575      	cmp	r5, lr
 8004eea:	d30e      	bcc.n	8004f0a <__mdiff+0xea>
 8004eec:	f10e 0103 	add.w	r1, lr, #3
 8004ef0:	1a09      	subs	r1, r1, r0
 8004ef2:	f021 0103 	bic.w	r1, r1, #3
 8004ef6:	3803      	subs	r0, #3
 8004ef8:	4586      	cmp	lr, r0
 8004efa:	bf38      	it	cc
 8004efc:	2100      	movcc	r1, #0
 8004efe:	4419      	add	r1, r3
 8004f00:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004f04:	b18b      	cbz	r3, 8004f2a <__mdiff+0x10a>
 8004f06:	6117      	str	r7, [r2, #16]
 8004f08:	e7a4      	b.n	8004e54 <__mdiff+0x34>
 8004f0a:	f855 8b04 	ldr.w	r8, [r5], #4
 8004f0e:	fa1f f188 	uxth.w	r1, r8
 8004f12:	4461      	add	r1, ip
 8004f14:	140c      	asrs	r4, r1, #16
 8004f16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004f1a:	b289      	uxth	r1, r1
 8004f1c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004f20:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004f24:	f846 1b04 	str.w	r1, [r6], #4
 8004f28:	e7de      	b.n	8004ee8 <__mdiff+0xc8>
 8004f2a:	3f01      	subs	r7, #1
 8004f2c:	e7e8      	b.n	8004f00 <__mdiff+0xe0>
 8004f2e:	bf00      	nop
 8004f30:	0800618b 	.word	0x0800618b
 8004f34:	0800619c 	.word	0x0800619c

08004f38 <__d2b>:
 8004f38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004f42:	4690      	mov	r8, r2
 8004f44:	461d      	mov	r5, r3
 8004f46:	f7ff fcd1 	bl	80048ec <_Balloc>
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	b930      	cbnz	r0, 8004f5c <__d2b+0x24>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	f240 310a 	movw	r1, #778	; 0x30a
 8004f54:	4b24      	ldr	r3, [pc, #144]	; (8004fe8 <__d2b+0xb0>)
 8004f56:	4825      	ldr	r0, [pc, #148]	; (8004fec <__d2b+0xb4>)
 8004f58:	f000 faa6 	bl	80054a8 <__assert_func>
 8004f5c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004f60:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004f64:	bb2d      	cbnz	r5, 8004fb2 <__d2b+0x7a>
 8004f66:	9301      	str	r3, [sp, #4]
 8004f68:	f1b8 0300 	subs.w	r3, r8, #0
 8004f6c:	d026      	beq.n	8004fbc <__d2b+0x84>
 8004f6e:	4668      	mov	r0, sp
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	f7ff fd83 	bl	8004a7c <__lo0bits>
 8004f76:	9900      	ldr	r1, [sp, #0]
 8004f78:	b1f0      	cbz	r0, 8004fb8 <__d2b+0x80>
 8004f7a:	9a01      	ldr	r2, [sp, #4]
 8004f7c:	f1c0 0320 	rsb	r3, r0, #32
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	430b      	orrs	r3, r1
 8004f86:	40c2      	lsrs	r2, r0
 8004f88:	6163      	str	r3, [r4, #20]
 8004f8a:	9201      	str	r2, [sp, #4]
 8004f8c:	9b01      	ldr	r3, [sp, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	bf14      	ite	ne
 8004f92:	2102      	movne	r1, #2
 8004f94:	2101      	moveq	r1, #1
 8004f96:	61a3      	str	r3, [r4, #24]
 8004f98:	6121      	str	r1, [r4, #16]
 8004f9a:	b1c5      	cbz	r5, 8004fce <__d2b+0x96>
 8004f9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004fa0:	4405      	add	r5, r0
 8004fa2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004fa6:	603d      	str	r5, [r7, #0]
 8004fa8:	6030      	str	r0, [r6, #0]
 8004faa:	4620      	mov	r0, r4
 8004fac:	b002      	add	sp, #8
 8004fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fb6:	e7d6      	b.n	8004f66 <__d2b+0x2e>
 8004fb8:	6161      	str	r1, [r4, #20]
 8004fba:	e7e7      	b.n	8004f8c <__d2b+0x54>
 8004fbc:	a801      	add	r0, sp, #4
 8004fbe:	f7ff fd5d 	bl	8004a7c <__lo0bits>
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	9b01      	ldr	r3, [sp, #4]
 8004fc6:	6121      	str	r1, [r4, #16]
 8004fc8:	6163      	str	r3, [r4, #20]
 8004fca:	3020      	adds	r0, #32
 8004fcc:	e7e5      	b.n	8004f9a <__d2b+0x62>
 8004fce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004fd2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004fd6:	6038      	str	r0, [r7, #0]
 8004fd8:	6918      	ldr	r0, [r3, #16]
 8004fda:	f7ff fd2f 	bl	8004a3c <__hi0bits>
 8004fde:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004fe2:	6031      	str	r1, [r6, #0]
 8004fe4:	e7e1      	b.n	8004faa <__d2b+0x72>
 8004fe6:	bf00      	nop
 8004fe8:	0800618b 	.word	0x0800618b
 8004fec:	0800619c 	.word	0x0800619c

08004ff0 <_calloc_r>:
 8004ff0:	b570      	push	{r4, r5, r6, lr}
 8004ff2:	fba1 5402 	umull	r5, r4, r1, r2
 8004ff6:	b934      	cbnz	r4, 8005006 <_calloc_r+0x16>
 8004ff8:	4629      	mov	r1, r5
 8004ffa:	f000 f875 	bl	80050e8 <_malloc_r>
 8004ffe:	4606      	mov	r6, r0
 8005000:	b928      	cbnz	r0, 800500e <_calloc_r+0x1e>
 8005002:	4630      	mov	r0, r6
 8005004:	bd70      	pop	{r4, r5, r6, pc}
 8005006:	220c      	movs	r2, #12
 8005008:	2600      	movs	r6, #0
 800500a:	6002      	str	r2, [r0, #0]
 800500c:	e7f9      	b.n	8005002 <_calloc_r+0x12>
 800500e:	462a      	mov	r2, r5
 8005010:	4621      	mov	r1, r4
 8005012:	f7fe f92b 	bl	800326c <memset>
 8005016:	e7f4      	b.n	8005002 <_calloc_r+0x12>

08005018 <_free_r>:
 8005018:	b538      	push	{r3, r4, r5, lr}
 800501a:	4605      	mov	r5, r0
 800501c:	2900      	cmp	r1, #0
 800501e:	d040      	beq.n	80050a2 <_free_r+0x8a>
 8005020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005024:	1f0c      	subs	r4, r1, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	bfb8      	it	lt
 800502a:	18e4      	addlt	r4, r4, r3
 800502c:	f000 fa98 	bl	8005560 <__malloc_lock>
 8005030:	4a1c      	ldr	r2, [pc, #112]	; (80050a4 <_free_r+0x8c>)
 8005032:	6813      	ldr	r3, [r2, #0]
 8005034:	b933      	cbnz	r3, 8005044 <_free_r+0x2c>
 8005036:	6063      	str	r3, [r4, #4]
 8005038:	6014      	str	r4, [r2, #0]
 800503a:	4628      	mov	r0, r5
 800503c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005040:	f000 ba94 	b.w	800556c <__malloc_unlock>
 8005044:	42a3      	cmp	r3, r4
 8005046:	d908      	bls.n	800505a <_free_r+0x42>
 8005048:	6820      	ldr	r0, [r4, #0]
 800504a:	1821      	adds	r1, r4, r0
 800504c:	428b      	cmp	r3, r1
 800504e:	bf01      	itttt	eq
 8005050:	6819      	ldreq	r1, [r3, #0]
 8005052:	685b      	ldreq	r3, [r3, #4]
 8005054:	1809      	addeq	r1, r1, r0
 8005056:	6021      	streq	r1, [r4, #0]
 8005058:	e7ed      	b.n	8005036 <_free_r+0x1e>
 800505a:	461a      	mov	r2, r3
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	b10b      	cbz	r3, 8005064 <_free_r+0x4c>
 8005060:	42a3      	cmp	r3, r4
 8005062:	d9fa      	bls.n	800505a <_free_r+0x42>
 8005064:	6811      	ldr	r1, [r2, #0]
 8005066:	1850      	adds	r0, r2, r1
 8005068:	42a0      	cmp	r0, r4
 800506a:	d10b      	bne.n	8005084 <_free_r+0x6c>
 800506c:	6820      	ldr	r0, [r4, #0]
 800506e:	4401      	add	r1, r0
 8005070:	1850      	adds	r0, r2, r1
 8005072:	4283      	cmp	r3, r0
 8005074:	6011      	str	r1, [r2, #0]
 8005076:	d1e0      	bne.n	800503a <_free_r+0x22>
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4401      	add	r1, r0
 800507e:	6011      	str	r1, [r2, #0]
 8005080:	6053      	str	r3, [r2, #4]
 8005082:	e7da      	b.n	800503a <_free_r+0x22>
 8005084:	d902      	bls.n	800508c <_free_r+0x74>
 8005086:	230c      	movs	r3, #12
 8005088:	602b      	str	r3, [r5, #0]
 800508a:	e7d6      	b.n	800503a <_free_r+0x22>
 800508c:	6820      	ldr	r0, [r4, #0]
 800508e:	1821      	adds	r1, r4, r0
 8005090:	428b      	cmp	r3, r1
 8005092:	bf01      	itttt	eq
 8005094:	6819      	ldreq	r1, [r3, #0]
 8005096:	685b      	ldreq	r3, [r3, #4]
 8005098:	1809      	addeq	r1, r1, r0
 800509a:	6021      	streq	r1, [r4, #0]
 800509c:	6063      	str	r3, [r4, #4]
 800509e:	6054      	str	r4, [r2, #4]
 80050a0:	e7cb      	b.n	800503a <_free_r+0x22>
 80050a2:	bd38      	pop	{r3, r4, r5, pc}
 80050a4:	20000270 	.word	0x20000270

080050a8 <sbrk_aligned>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	4e0e      	ldr	r6, [pc, #56]	; (80050e4 <sbrk_aligned+0x3c>)
 80050ac:	460c      	mov	r4, r1
 80050ae:	6831      	ldr	r1, [r6, #0]
 80050b0:	4605      	mov	r5, r0
 80050b2:	b911      	cbnz	r1, 80050ba <sbrk_aligned+0x12>
 80050b4:	f000 f9e8 	bl	8005488 <_sbrk_r>
 80050b8:	6030      	str	r0, [r6, #0]
 80050ba:	4621      	mov	r1, r4
 80050bc:	4628      	mov	r0, r5
 80050be:	f000 f9e3 	bl	8005488 <_sbrk_r>
 80050c2:	1c43      	adds	r3, r0, #1
 80050c4:	d00a      	beq.n	80050dc <sbrk_aligned+0x34>
 80050c6:	1cc4      	adds	r4, r0, #3
 80050c8:	f024 0403 	bic.w	r4, r4, #3
 80050cc:	42a0      	cmp	r0, r4
 80050ce:	d007      	beq.n	80050e0 <sbrk_aligned+0x38>
 80050d0:	1a21      	subs	r1, r4, r0
 80050d2:	4628      	mov	r0, r5
 80050d4:	f000 f9d8 	bl	8005488 <_sbrk_r>
 80050d8:	3001      	adds	r0, #1
 80050da:	d101      	bne.n	80050e0 <sbrk_aligned+0x38>
 80050dc:	f04f 34ff 	mov.w	r4, #4294967295
 80050e0:	4620      	mov	r0, r4
 80050e2:	bd70      	pop	{r4, r5, r6, pc}
 80050e4:	20000274 	.word	0x20000274

080050e8 <_malloc_r>:
 80050e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ec:	1ccd      	adds	r5, r1, #3
 80050ee:	f025 0503 	bic.w	r5, r5, #3
 80050f2:	3508      	adds	r5, #8
 80050f4:	2d0c      	cmp	r5, #12
 80050f6:	bf38      	it	cc
 80050f8:	250c      	movcc	r5, #12
 80050fa:	2d00      	cmp	r5, #0
 80050fc:	4607      	mov	r7, r0
 80050fe:	db01      	blt.n	8005104 <_malloc_r+0x1c>
 8005100:	42a9      	cmp	r1, r5
 8005102:	d905      	bls.n	8005110 <_malloc_r+0x28>
 8005104:	230c      	movs	r3, #12
 8005106:	2600      	movs	r6, #0
 8005108:	603b      	str	r3, [r7, #0]
 800510a:	4630      	mov	r0, r6
 800510c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005110:	4e2e      	ldr	r6, [pc, #184]	; (80051cc <_malloc_r+0xe4>)
 8005112:	f000 fa25 	bl	8005560 <__malloc_lock>
 8005116:	6833      	ldr	r3, [r6, #0]
 8005118:	461c      	mov	r4, r3
 800511a:	bb34      	cbnz	r4, 800516a <_malloc_r+0x82>
 800511c:	4629      	mov	r1, r5
 800511e:	4638      	mov	r0, r7
 8005120:	f7ff ffc2 	bl	80050a8 <sbrk_aligned>
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	4604      	mov	r4, r0
 8005128:	d14d      	bne.n	80051c6 <_malloc_r+0xde>
 800512a:	6834      	ldr	r4, [r6, #0]
 800512c:	4626      	mov	r6, r4
 800512e:	2e00      	cmp	r6, #0
 8005130:	d140      	bne.n	80051b4 <_malloc_r+0xcc>
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	4631      	mov	r1, r6
 8005136:	4638      	mov	r0, r7
 8005138:	eb04 0803 	add.w	r8, r4, r3
 800513c:	f000 f9a4 	bl	8005488 <_sbrk_r>
 8005140:	4580      	cmp	r8, r0
 8005142:	d13a      	bne.n	80051ba <_malloc_r+0xd2>
 8005144:	6821      	ldr	r1, [r4, #0]
 8005146:	3503      	adds	r5, #3
 8005148:	1a6d      	subs	r5, r5, r1
 800514a:	f025 0503 	bic.w	r5, r5, #3
 800514e:	3508      	adds	r5, #8
 8005150:	2d0c      	cmp	r5, #12
 8005152:	bf38      	it	cc
 8005154:	250c      	movcc	r5, #12
 8005156:	4638      	mov	r0, r7
 8005158:	4629      	mov	r1, r5
 800515a:	f7ff ffa5 	bl	80050a8 <sbrk_aligned>
 800515e:	3001      	adds	r0, #1
 8005160:	d02b      	beq.n	80051ba <_malloc_r+0xd2>
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	442b      	add	r3, r5
 8005166:	6023      	str	r3, [r4, #0]
 8005168:	e00e      	b.n	8005188 <_malloc_r+0xa0>
 800516a:	6822      	ldr	r2, [r4, #0]
 800516c:	1b52      	subs	r2, r2, r5
 800516e:	d41e      	bmi.n	80051ae <_malloc_r+0xc6>
 8005170:	2a0b      	cmp	r2, #11
 8005172:	d916      	bls.n	80051a2 <_malloc_r+0xba>
 8005174:	1961      	adds	r1, r4, r5
 8005176:	42a3      	cmp	r3, r4
 8005178:	6025      	str	r5, [r4, #0]
 800517a:	bf18      	it	ne
 800517c:	6059      	strne	r1, [r3, #4]
 800517e:	6863      	ldr	r3, [r4, #4]
 8005180:	bf08      	it	eq
 8005182:	6031      	streq	r1, [r6, #0]
 8005184:	5162      	str	r2, [r4, r5]
 8005186:	604b      	str	r3, [r1, #4]
 8005188:	4638      	mov	r0, r7
 800518a:	f104 060b 	add.w	r6, r4, #11
 800518e:	f000 f9ed 	bl	800556c <__malloc_unlock>
 8005192:	f026 0607 	bic.w	r6, r6, #7
 8005196:	1d23      	adds	r3, r4, #4
 8005198:	1af2      	subs	r2, r6, r3
 800519a:	d0b6      	beq.n	800510a <_malloc_r+0x22>
 800519c:	1b9b      	subs	r3, r3, r6
 800519e:	50a3      	str	r3, [r4, r2]
 80051a0:	e7b3      	b.n	800510a <_malloc_r+0x22>
 80051a2:	6862      	ldr	r2, [r4, #4]
 80051a4:	42a3      	cmp	r3, r4
 80051a6:	bf0c      	ite	eq
 80051a8:	6032      	streq	r2, [r6, #0]
 80051aa:	605a      	strne	r2, [r3, #4]
 80051ac:	e7ec      	b.n	8005188 <_malloc_r+0xa0>
 80051ae:	4623      	mov	r3, r4
 80051b0:	6864      	ldr	r4, [r4, #4]
 80051b2:	e7b2      	b.n	800511a <_malloc_r+0x32>
 80051b4:	4634      	mov	r4, r6
 80051b6:	6876      	ldr	r6, [r6, #4]
 80051b8:	e7b9      	b.n	800512e <_malloc_r+0x46>
 80051ba:	230c      	movs	r3, #12
 80051bc:	4638      	mov	r0, r7
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	f000 f9d4 	bl	800556c <__malloc_unlock>
 80051c4:	e7a1      	b.n	800510a <_malloc_r+0x22>
 80051c6:	6025      	str	r5, [r4, #0]
 80051c8:	e7de      	b.n	8005188 <_malloc_r+0xa0>
 80051ca:	bf00      	nop
 80051cc:	20000270 	.word	0x20000270

080051d0 <__ssputs_r>:
 80051d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d4:	688e      	ldr	r6, [r1, #8]
 80051d6:	4682      	mov	sl, r0
 80051d8:	429e      	cmp	r6, r3
 80051da:	460c      	mov	r4, r1
 80051dc:	4690      	mov	r8, r2
 80051de:	461f      	mov	r7, r3
 80051e0:	d838      	bhi.n	8005254 <__ssputs_r+0x84>
 80051e2:	898a      	ldrh	r2, [r1, #12]
 80051e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051e8:	d032      	beq.n	8005250 <__ssputs_r+0x80>
 80051ea:	6825      	ldr	r5, [r4, #0]
 80051ec:	6909      	ldr	r1, [r1, #16]
 80051ee:	3301      	adds	r3, #1
 80051f0:	eba5 0901 	sub.w	r9, r5, r1
 80051f4:	6965      	ldr	r5, [r4, #20]
 80051f6:	444b      	add	r3, r9
 80051f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005200:	106d      	asrs	r5, r5, #1
 8005202:	429d      	cmp	r5, r3
 8005204:	bf38      	it	cc
 8005206:	461d      	movcc	r5, r3
 8005208:	0553      	lsls	r3, r2, #21
 800520a:	d531      	bpl.n	8005270 <__ssputs_r+0xa0>
 800520c:	4629      	mov	r1, r5
 800520e:	f7ff ff6b 	bl	80050e8 <_malloc_r>
 8005212:	4606      	mov	r6, r0
 8005214:	b950      	cbnz	r0, 800522c <__ssputs_r+0x5c>
 8005216:	230c      	movs	r3, #12
 8005218:	f04f 30ff 	mov.w	r0, #4294967295
 800521c:	f8ca 3000 	str.w	r3, [sl]
 8005220:	89a3      	ldrh	r3, [r4, #12]
 8005222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005226:	81a3      	strh	r3, [r4, #12]
 8005228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522c:	464a      	mov	r2, r9
 800522e:	6921      	ldr	r1, [r4, #16]
 8005230:	f7ff fb4e 	bl	80048d0 <memcpy>
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800523a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523e:	81a3      	strh	r3, [r4, #12]
 8005240:	6126      	str	r6, [r4, #16]
 8005242:	444e      	add	r6, r9
 8005244:	6026      	str	r6, [r4, #0]
 8005246:	463e      	mov	r6, r7
 8005248:	6165      	str	r5, [r4, #20]
 800524a:	eba5 0509 	sub.w	r5, r5, r9
 800524e:	60a5      	str	r5, [r4, #8]
 8005250:	42be      	cmp	r6, r7
 8005252:	d900      	bls.n	8005256 <__ssputs_r+0x86>
 8005254:	463e      	mov	r6, r7
 8005256:	4632      	mov	r2, r6
 8005258:	4641      	mov	r1, r8
 800525a:	6820      	ldr	r0, [r4, #0]
 800525c:	f000 f966 	bl	800552c <memmove>
 8005260:	68a3      	ldr	r3, [r4, #8]
 8005262:	2000      	movs	r0, #0
 8005264:	1b9b      	subs	r3, r3, r6
 8005266:	60a3      	str	r3, [r4, #8]
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	4433      	add	r3, r6
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	e7db      	b.n	8005228 <__ssputs_r+0x58>
 8005270:	462a      	mov	r2, r5
 8005272:	f000 f981 	bl	8005578 <_realloc_r>
 8005276:	4606      	mov	r6, r0
 8005278:	2800      	cmp	r0, #0
 800527a:	d1e1      	bne.n	8005240 <__ssputs_r+0x70>
 800527c:	4650      	mov	r0, sl
 800527e:	6921      	ldr	r1, [r4, #16]
 8005280:	f7ff feca 	bl	8005018 <_free_r>
 8005284:	e7c7      	b.n	8005216 <__ssputs_r+0x46>
	...

08005288 <_svfiprintf_r>:
 8005288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528c:	4698      	mov	r8, r3
 800528e:	898b      	ldrh	r3, [r1, #12]
 8005290:	4607      	mov	r7, r0
 8005292:	061b      	lsls	r3, r3, #24
 8005294:	460d      	mov	r5, r1
 8005296:	4614      	mov	r4, r2
 8005298:	b09d      	sub	sp, #116	; 0x74
 800529a:	d50e      	bpl.n	80052ba <_svfiprintf_r+0x32>
 800529c:	690b      	ldr	r3, [r1, #16]
 800529e:	b963      	cbnz	r3, 80052ba <_svfiprintf_r+0x32>
 80052a0:	2140      	movs	r1, #64	; 0x40
 80052a2:	f7ff ff21 	bl	80050e8 <_malloc_r>
 80052a6:	6028      	str	r0, [r5, #0]
 80052a8:	6128      	str	r0, [r5, #16]
 80052aa:	b920      	cbnz	r0, 80052b6 <_svfiprintf_r+0x2e>
 80052ac:	230c      	movs	r3, #12
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	f04f 30ff 	mov.w	r0, #4294967295
 80052b4:	e0d1      	b.n	800545a <_svfiprintf_r+0x1d2>
 80052b6:	2340      	movs	r3, #64	; 0x40
 80052b8:	616b      	str	r3, [r5, #20]
 80052ba:	2300      	movs	r3, #0
 80052bc:	9309      	str	r3, [sp, #36]	; 0x24
 80052be:	2320      	movs	r3, #32
 80052c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052c4:	2330      	movs	r3, #48	; 0x30
 80052c6:	f04f 0901 	mov.w	r9, #1
 80052ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80052ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005474 <_svfiprintf_r+0x1ec>
 80052d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052d6:	4623      	mov	r3, r4
 80052d8:	469a      	mov	sl, r3
 80052da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052de:	b10a      	cbz	r2, 80052e4 <_svfiprintf_r+0x5c>
 80052e0:	2a25      	cmp	r2, #37	; 0x25
 80052e2:	d1f9      	bne.n	80052d8 <_svfiprintf_r+0x50>
 80052e4:	ebba 0b04 	subs.w	fp, sl, r4
 80052e8:	d00b      	beq.n	8005302 <_svfiprintf_r+0x7a>
 80052ea:	465b      	mov	r3, fp
 80052ec:	4622      	mov	r2, r4
 80052ee:	4629      	mov	r1, r5
 80052f0:	4638      	mov	r0, r7
 80052f2:	f7ff ff6d 	bl	80051d0 <__ssputs_r>
 80052f6:	3001      	adds	r0, #1
 80052f8:	f000 80aa 	beq.w	8005450 <_svfiprintf_r+0x1c8>
 80052fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052fe:	445a      	add	r2, fp
 8005300:	9209      	str	r2, [sp, #36]	; 0x24
 8005302:	f89a 3000 	ldrb.w	r3, [sl]
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 80a2 	beq.w	8005450 <_svfiprintf_r+0x1c8>
 800530c:	2300      	movs	r3, #0
 800530e:	f04f 32ff 	mov.w	r2, #4294967295
 8005312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005316:	f10a 0a01 	add.w	sl, sl, #1
 800531a:	9304      	str	r3, [sp, #16]
 800531c:	9307      	str	r3, [sp, #28]
 800531e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005322:	931a      	str	r3, [sp, #104]	; 0x68
 8005324:	4654      	mov	r4, sl
 8005326:	2205      	movs	r2, #5
 8005328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800532c:	4851      	ldr	r0, [pc, #324]	; (8005474 <_svfiprintf_r+0x1ec>)
 800532e:	f7ff fac1 	bl	80048b4 <memchr>
 8005332:	9a04      	ldr	r2, [sp, #16]
 8005334:	b9d8      	cbnz	r0, 800536e <_svfiprintf_r+0xe6>
 8005336:	06d0      	lsls	r0, r2, #27
 8005338:	bf44      	itt	mi
 800533a:	2320      	movmi	r3, #32
 800533c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005340:	0711      	lsls	r1, r2, #28
 8005342:	bf44      	itt	mi
 8005344:	232b      	movmi	r3, #43	; 0x2b
 8005346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800534a:	f89a 3000 	ldrb.w	r3, [sl]
 800534e:	2b2a      	cmp	r3, #42	; 0x2a
 8005350:	d015      	beq.n	800537e <_svfiprintf_r+0xf6>
 8005352:	4654      	mov	r4, sl
 8005354:	2000      	movs	r0, #0
 8005356:	f04f 0c0a 	mov.w	ip, #10
 800535a:	9a07      	ldr	r2, [sp, #28]
 800535c:	4621      	mov	r1, r4
 800535e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005362:	3b30      	subs	r3, #48	; 0x30
 8005364:	2b09      	cmp	r3, #9
 8005366:	d94e      	bls.n	8005406 <_svfiprintf_r+0x17e>
 8005368:	b1b0      	cbz	r0, 8005398 <_svfiprintf_r+0x110>
 800536a:	9207      	str	r2, [sp, #28]
 800536c:	e014      	b.n	8005398 <_svfiprintf_r+0x110>
 800536e:	eba0 0308 	sub.w	r3, r0, r8
 8005372:	fa09 f303 	lsl.w	r3, r9, r3
 8005376:	4313      	orrs	r3, r2
 8005378:	46a2      	mov	sl, r4
 800537a:	9304      	str	r3, [sp, #16]
 800537c:	e7d2      	b.n	8005324 <_svfiprintf_r+0x9c>
 800537e:	9b03      	ldr	r3, [sp, #12]
 8005380:	1d19      	adds	r1, r3, #4
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	9103      	str	r1, [sp, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	bfbb      	ittet	lt
 800538a:	425b      	neglt	r3, r3
 800538c:	f042 0202 	orrlt.w	r2, r2, #2
 8005390:	9307      	strge	r3, [sp, #28]
 8005392:	9307      	strlt	r3, [sp, #28]
 8005394:	bfb8      	it	lt
 8005396:	9204      	strlt	r2, [sp, #16]
 8005398:	7823      	ldrb	r3, [r4, #0]
 800539a:	2b2e      	cmp	r3, #46	; 0x2e
 800539c:	d10c      	bne.n	80053b8 <_svfiprintf_r+0x130>
 800539e:	7863      	ldrb	r3, [r4, #1]
 80053a0:	2b2a      	cmp	r3, #42	; 0x2a
 80053a2:	d135      	bne.n	8005410 <_svfiprintf_r+0x188>
 80053a4:	9b03      	ldr	r3, [sp, #12]
 80053a6:	3402      	adds	r4, #2
 80053a8:	1d1a      	adds	r2, r3, #4
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	9203      	str	r2, [sp, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	bfb8      	it	lt
 80053b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80053b6:	9305      	str	r3, [sp, #20]
 80053b8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005478 <_svfiprintf_r+0x1f0>
 80053bc:	2203      	movs	r2, #3
 80053be:	4650      	mov	r0, sl
 80053c0:	7821      	ldrb	r1, [r4, #0]
 80053c2:	f7ff fa77 	bl	80048b4 <memchr>
 80053c6:	b140      	cbz	r0, 80053da <_svfiprintf_r+0x152>
 80053c8:	2340      	movs	r3, #64	; 0x40
 80053ca:	eba0 000a 	sub.w	r0, r0, sl
 80053ce:	fa03 f000 	lsl.w	r0, r3, r0
 80053d2:	9b04      	ldr	r3, [sp, #16]
 80053d4:	3401      	adds	r4, #1
 80053d6:	4303      	orrs	r3, r0
 80053d8:	9304      	str	r3, [sp, #16]
 80053da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053de:	2206      	movs	r2, #6
 80053e0:	4826      	ldr	r0, [pc, #152]	; (800547c <_svfiprintf_r+0x1f4>)
 80053e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053e6:	f7ff fa65 	bl	80048b4 <memchr>
 80053ea:	2800      	cmp	r0, #0
 80053ec:	d038      	beq.n	8005460 <_svfiprintf_r+0x1d8>
 80053ee:	4b24      	ldr	r3, [pc, #144]	; (8005480 <_svfiprintf_r+0x1f8>)
 80053f0:	bb1b      	cbnz	r3, 800543a <_svfiprintf_r+0x1b2>
 80053f2:	9b03      	ldr	r3, [sp, #12]
 80053f4:	3307      	adds	r3, #7
 80053f6:	f023 0307 	bic.w	r3, r3, #7
 80053fa:	3308      	adds	r3, #8
 80053fc:	9303      	str	r3, [sp, #12]
 80053fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005400:	4433      	add	r3, r6
 8005402:	9309      	str	r3, [sp, #36]	; 0x24
 8005404:	e767      	b.n	80052d6 <_svfiprintf_r+0x4e>
 8005406:	460c      	mov	r4, r1
 8005408:	2001      	movs	r0, #1
 800540a:	fb0c 3202 	mla	r2, ip, r2, r3
 800540e:	e7a5      	b.n	800535c <_svfiprintf_r+0xd4>
 8005410:	2300      	movs	r3, #0
 8005412:	f04f 0c0a 	mov.w	ip, #10
 8005416:	4619      	mov	r1, r3
 8005418:	3401      	adds	r4, #1
 800541a:	9305      	str	r3, [sp, #20]
 800541c:	4620      	mov	r0, r4
 800541e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005422:	3a30      	subs	r2, #48	; 0x30
 8005424:	2a09      	cmp	r2, #9
 8005426:	d903      	bls.n	8005430 <_svfiprintf_r+0x1a8>
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0c5      	beq.n	80053b8 <_svfiprintf_r+0x130>
 800542c:	9105      	str	r1, [sp, #20]
 800542e:	e7c3      	b.n	80053b8 <_svfiprintf_r+0x130>
 8005430:	4604      	mov	r4, r0
 8005432:	2301      	movs	r3, #1
 8005434:	fb0c 2101 	mla	r1, ip, r1, r2
 8005438:	e7f0      	b.n	800541c <_svfiprintf_r+0x194>
 800543a:	ab03      	add	r3, sp, #12
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	462a      	mov	r2, r5
 8005440:	4638      	mov	r0, r7
 8005442:	4b10      	ldr	r3, [pc, #64]	; (8005484 <_svfiprintf_r+0x1fc>)
 8005444:	a904      	add	r1, sp, #16
 8005446:	f7fd ffb7 	bl	80033b8 <_printf_float>
 800544a:	1c42      	adds	r2, r0, #1
 800544c:	4606      	mov	r6, r0
 800544e:	d1d6      	bne.n	80053fe <_svfiprintf_r+0x176>
 8005450:	89ab      	ldrh	r3, [r5, #12]
 8005452:	065b      	lsls	r3, r3, #25
 8005454:	f53f af2c 	bmi.w	80052b0 <_svfiprintf_r+0x28>
 8005458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800545a:	b01d      	add	sp, #116	; 0x74
 800545c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005460:	ab03      	add	r3, sp, #12
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	462a      	mov	r2, r5
 8005466:	4638      	mov	r0, r7
 8005468:	4b06      	ldr	r3, [pc, #24]	; (8005484 <_svfiprintf_r+0x1fc>)
 800546a:	a904      	add	r1, sp, #16
 800546c:	f7fe fa40 	bl	80038f0 <_printf_i>
 8005470:	e7eb      	b.n	800544a <_svfiprintf_r+0x1c2>
 8005472:	bf00      	nop
 8005474:	080062f4 	.word	0x080062f4
 8005478:	080062fa 	.word	0x080062fa
 800547c:	080062fe 	.word	0x080062fe
 8005480:	080033b9 	.word	0x080033b9
 8005484:	080051d1 	.word	0x080051d1

08005488 <_sbrk_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	2300      	movs	r3, #0
 800548c:	4d05      	ldr	r5, [pc, #20]	; (80054a4 <_sbrk_r+0x1c>)
 800548e:	4604      	mov	r4, r0
 8005490:	4608      	mov	r0, r1
 8005492:	602b      	str	r3, [r5, #0]
 8005494:	f7fb ff6c 	bl	8001370 <_sbrk>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	d102      	bne.n	80054a2 <_sbrk_r+0x1a>
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	b103      	cbz	r3, 80054a2 <_sbrk_r+0x1a>
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	20000278 	.word	0x20000278

080054a8 <__assert_func>:
 80054a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054aa:	4614      	mov	r4, r2
 80054ac:	461a      	mov	r2, r3
 80054ae:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <__assert_func+0x2c>)
 80054b0:	4605      	mov	r5, r0
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68d8      	ldr	r0, [r3, #12]
 80054b6:	b14c      	cbz	r4, 80054cc <__assert_func+0x24>
 80054b8:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <__assert_func+0x30>)
 80054ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054be:	9100      	str	r1, [sp, #0]
 80054c0:	462b      	mov	r3, r5
 80054c2:	4906      	ldr	r1, [pc, #24]	; (80054dc <__assert_func+0x34>)
 80054c4:	f000 f80e 	bl	80054e4 <fiprintf>
 80054c8:	f000 faaa 	bl	8005a20 <abort>
 80054cc:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <__assert_func+0x38>)
 80054ce:	461c      	mov	r4, r3
 80054d0:	e7f3      	b.n	80054ba <__assert_func+0x12>
 80054d2:	bf00      	nop
 80054d4:	2000000c 	.word	0x2000000c
 80054d8:	08006305 	.word	0x08006305
 80054dc:	08006312 	.word	0x08006312
 80054e0:	08006340 	.word	0x08006340

080054e4 <fiprintf>:
 80054e4:	b40e      	push	{r1, r2, r3}
 80054e6:	b503      	push	{r0, r1, lr}
 80054e8:	4601      	mov	r1, r0
 80054ea:	ab03      	add	r3, sp, #12
 80054ec:	4805      	ldr	r0, [pc, #20]	; (8005504 <fiprintf+0x20>)
 80054ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80054f2:	6800      	ldr	r0, [r0, #0]
 80054f4:	9301      	str	r3, [sp, #4]
 80054f6:	f000 f895 	bl	8005624 <_vfiprintf_r>
 80054fa:	b002      	add	sp, #8
 80054fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005500:	b003      	add	sp, #12
 8005502:	4770      	bx	lr
 8005504:	2000000c 	.word	0x2000000c

08005508 <__ascii_mbtowc>:
 8005508:	b082      	sub	sp, #8
 800550a:	b901      	cbnz	r1, 800550e <__ascii_mbtowc+0x6>
 800550c:	a901      	add	r1, sp, #4
 800550e:	b142      	cbz	r2, 8005522 <__ascii_mbtowc+0x1a>
 8005510:	b14b      	cbz	r3, 8005526 <__ascii_mbtowc+0x1e>
 8005512:	7813      	ldrb	r3, [r2, #0]
 8005514:	600b      	str	r3, [r1, #0]
 8005516:	7812      	ldrb	r2, [r2, #0]
 8005518:	1e10      	subs	r0, r2, #0
 800551a:	bf18      	it	ne
 800551c:	2001      	movne	r0, #1
 800551e:	b002      	add	sp, #8
 8005520:	4770      	bx	lr
 8005522:	4610      	mov	r0, r2
 8005524:	e7fb      	b.n	800551e <__ascii_mbtowc+0x16>
 8005526:	f06f 0001 	mvn.w	r0, #1
 800552a:	e7f8      	b.n	800551e <__ascii_mbtowc+0x16>

0800552c <memmove>:
 800552c:	4288      	cmp	r0, r1
 800552e:	b510      	push	{r4, lr}
 8005530:	eb01 0402 	add.w	r4, r1, r2
 8005534:	d902      	bls.n	800553c <memmove+0x10>
 8005536:	4284      	cmp	r4, r0
 8005538:	4623      	mov	r3, r4
 800553a:	d807      	bhi.n	800554c <memmove+0x20>
 800553c:	1e43      	subs	r3, r0, #1
 800553e:	42a1      	cmp	r1, r4
 8005540:	d008      	beq.n	8005554 <memmove+0x28>
 8005542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800554a:	e7f8      	b.n	800553e <memmove+0x12>
 800554c:	4601      	mov	r1, r0
 800554e:	4402      	add	r2, r0
 8005550:	428a      	cmp	r2, r1
 8005552:	d100      	bne.n	8005556 <memmove+0x2a>
 8005554:	bd10      	pop	{r4, pc}
 8005556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800555a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800555e:	e7f7      	b.n	8005550 <memmove+0x24>

08005560 <__malloc_lock>:
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <__malloc_lock+0x8>)
 8005562:	f000 bc19 	b.w	8005d98 <__retarget_lock_acquire_recursive>
 8005566:	bf00      	nop
 8005568:	2000027c 	.word	0x2000027c

0800556c <__malloc_unlock>:
 800556c:	4801      	ldr	r0, [pc, #4]	; (8005574 <__malloc_unlock+0x8>)
 800556e:	f000 bc14 	b.w	8005d9a <__retarget_lock_release_recursive>
 8005572:	bf00      	nop
 8005574:	2000027c 	.word	0x2000027c

08005578 <_realloc_r>:
 8005578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800557c:	4680      	mov	r8, r0
 800557e:	4614      	mov	r4, r2
 8005580:	460e      	mov	r6, r1
 8005582:	b921      	cbnz	r1, 800558e <_realloc_r+0x16>
 8005584:	4611      	mov	r1, r2
 8005586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800558a:	f7ff bdad 	b.w	80050e8 <_malloc_r>
 800558e:	b92a      	cbnz	r2, 800559c <_realloc_r+0x24>
 8005590:	f7ff fd42 	bl	8005018 <_free_r>
 8005594:	4625      	mov	r5, r4
 8005596:	4628      	mov	r0, r5
 8005598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800559c:	f000 fc64 	bl	8005e68 <_malloc_usable_size_r>
 80055a0:	4284      	cmp	r4, r0
 80055a2:	4607      	mov	r7, r0
 80055a4:	d802      	bhi.n	80055ac <_realloc_r+0x34>
 80055a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055aa:	d812      	bhi.n	80055d2 <_realloc_r+0x5a>
 80055ac:	4621      	mov	r1, r4
 80055ae:	4640      	mov	r0, r8
 80055b0:	f7ff fd9a 	bl	80050e8 <_malloc_r>
 80055b4:	4605      	mov	r5, r0
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d0ed      	beq.n	8005596 <_realloc_r+0x1e>
 80055ba:	42bc      	cmp	r4, r7
 80055bc:	4622      	mov	r2, r4
 80055be:	4631      	mov	r1, r6
 80055c0:	bf28      	it	cs
 80055c2:	463a      	movcs	r2, r7
 80055c4:	f7ff f984 	bl	80048d0 <memcpy>
 80055c8:	4631      	mov	r1, r6
 80055ca:	4640      	mov	r0, r8
 80055cc:	f7ff fd24 	bl	8005018 <_free_r>
 80055d0:	e7e1      	b.n	8005596 <_realloc_r+0x1e>
 80055d2:	4635      	mov	r5, r6
 80055d4:	e7df      	b.n	8005596 <_realloc_r+0x1e>

080055d6 <__sfputc_r>:
 80055d6:	6893      	ldr	r3, [r2, #8]
 80055d8:	b410      	push	{r4}
 80055da:	3b01      	subs	r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	6093      	str	r3, [r2, #8]
 80055e0:	da07      	bge.n	80055f2 <__sfputc_r+0x1c>
 80055e2:	6994      	ldr	r4, [r2, #24]
 80055e4:	42a3      	cmp	r3, r4
 80055e6:	db01      	blt.n	80055ec <__sfputc_r+0x16>
 80055e8:	290a      	cmp	r1, #10
 80055ea:	d102      	bne.n	80055f2 <__sfputc_r+0x1c>
 80055ec:	bc10      	pop	{r4}
 80055ee:	f000 b949 	b.w	8005884 <__swbuf_r>
 80055f2:	6813      	ldr	r3, [r2, #0]
 80055f4:	1c58      	adds	r0, r3, #1
 80055f6:	6010      	str	r0, [r2, #0]
 80055f8:	7019      	strb	r1, [r3, #0]
 80055fa:	4608      	mov	r0, r1
 80055fc:	bc10      	pop	{r4}
 80055fe:	4770      	bx	lr

08005600 <__sfputs_r>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	4606      	mov	r6, r0
 8005604:	460f      	mov	r7, r1
 8005606:	4614      	mov	r4, r2
 8005608:	18d5      	adds	r5, r2, r3
 800560a:	42ac      	cmp	r4, r5
 800560c:	d101      	bne.n	8005612 <__sfputs_r+0x12>
 800560e:	2000      	movs	r0, #0
 8005610:	e007      	b.n	8005622 <__sfputs_r+0x22>
 8005612:	463a      	mov	r2, r7
 8005614:	4630      	mov	r0, r6
 8005616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800561a:	f7ff ffdc 	bl	80055d6 <__sfputc_r>
 800561e:	1c43      	adds	r3, r0, #1
 8005620:	d1f3      	bne.n	800560a <__sfputs_r+0xa>
 8005622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005624 <_vfiprintf_r>:
 8005624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005628:	460d      	mov	r5, r1
 800562a:	4614      	mov	r4, r2
 800562c:	4698      	mov	r8, r3
 800562e:	4606      	mov	r6, r0
 8005630:	b09d      	sub	sp, #116	; 0x74
 8005632:	b118      	cbz	r0, 800563c <_vfiprintf_r+0x18>
 8005634:	6983      	ldr	r3, [r0, #24]
 8005636:	b90b      	cbnz	r3, 800563c <_vfiprintf_r+0x18>
 8005638:	f000 fb10 	bl	8005c5c <__sinit>
 800563c:	4b89      	ldr	r3, [pc, #548]	; (8005864 <_vfiprintf_r+0x240>)
 800563e:	429d      	cmp	r5, r3
 8005640:	d11b      	bne.n	800567a <_vfiprintf_r+0x56>
 8005642:	6875      	ldr	r5, [r6, #4]
 8005644:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005646:	07d9      	lsls	r1, r3, #31
 8005648:	d405      	bmi.n	8005656 <_vfiprintf_r+0x32>
 800564a:	89ab      	ldrh	r3, [r5, #12]
 800564c:	059a      	lsls	r2, r3, #22
 800564e:	d402      	bmi.n	8005656 <_vfiprintf_r+0x32>
 8005650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005652:	f000 fba1 	bl	8005d98 <__retarget_lock_acquire_recursive>
 8005656:	89ab      	ldrh	r3, [r5, #12]
 8005658:	071b      	lsls	r3, r3, #28
 800565a:	d501      	bpl.n	8005660 <_vfiprintf_r+0x3c>
 800565c:	692b      	ldr	r3, [r5, #16]
 800565e:	b9eb      	cbnz	r3, 800569c <_vfiprintf_r+0x78>
 8005660:	4629      	mov	r1, r5
 8005662:	4630      	mov	r0, r6
 8005664:	f000 f96e 	bl	8005944 <__swsetup_r>
 8005668:	b1c0      	cbz	r0, 800569c <_vfiprintf_r+0x78>
 800566a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800566c:	07dc      	lsls	r4, r3, #31
 800566e:	d50e      	bpl.n	800568e <_vfiprintf_r+0x6a>
 8005670:	f04f 30ff 	mov.w	r0, #4294967295
 8005674:	b01d      	add	sp, #116	; 0x74
 8005676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800567a:	4b7b      	ldr	r3, [pc, #492]	; (8005868 <_vfiprintf_r+0x244>)
 800567c:	429d      	cmp	r5, r3
 800567e:	d101      	bne.n	8005684 <_vfiprintf_r+0x60>
 8005680:	68b5      	ldr	r5, [r6, #8]
 8005682:	e7df      	b.n	8005644 <_vfiprintf_r+0x20>
 8005684:	4b79      	ldr	r3, [pc, #484]	; (800586c <_vfiprintf_r+0x248>)
 8005686:	429d      	cmp	r5, r3
 8005688:	bf08      	it	eq
 800568a:	68f5      	ldreq	r5, [r6, #12]
 800568c:	e7da      	b.n	8005644 <_vfiprintf_r+0x20>
 800568e:	89ab      	ldrh	r3, [r5, #12]
 8005690:	0598      	lsls	r0, r3, #22
 8005692:	d4ed      	bmi.n	8005670 <_vfiprintf_r+0x4c>
 8005694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005696:	f000 fb80 	bl	8005d9a <__retarget_lock_release_recursive>
 800569a:	e7e9      	b.n	8005670 <_vfiprintf_r+0x4c>
 800569c:	2300      	movs	r3, #0
 800569e:	9309      	str	r3, [sp, #36]	; 0x24
 80056a0:	2320      	movs	r3, #32
 80056a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056a6:	2330      	movs	r3, #48	; 0x30
 80056a8:	f04f 0901 	mov.w	r9, #1
 80056ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80056b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005870 <_vfiprintf_r+0x24c>
 80056b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056b8:	4623      	mov	r3, r4
 80056ba:	469a      	mov	sl, r3
 80056bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056c0:	b10a      	cbz	r2, 80056c6 <_vfiprintf_r+0xa2>
 80056c2:	2a25      	cmp	r2, #37	; 0x25
 80056c4:	d1f9      	bne.n	80056ba <_vfiprintf_r+0x96>
 80056c6:	ebba 0b04 	subs.w	fp, sl, r4
 80056ca:	d00b      	beq.n	80056e4 <_vfiprintf_r+0xc0>
 80056cc:	465b      	mov	r3, fp
 80056ce:	4622      	mov	r2, r4
 80056d0:	4629      	mov	r1, r5
 80056d2:	4630      	mov	r0, r6
 80056d4:	f7ff ff94 	bl	8005600 <__sfputs_r>
 80056d8:	3001      	adds	r0, #1
 80056da:	f000 80aa 	beq.w	8005832 <_vfiprintf_r+0x20e>
 80056de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056e0:	445a      	add	r2, fp
 80056e2:	9209      	str	r2, [sp, #36]	; 0x24
 80056e4:	f89a 3000 	ldrb.w	r3, [sl]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 80a2 	beq.w	8005832 <_vfiprintf_r+0x20e>
 80056ee:	2300      	movs	r3, #0
 80056f0:	f04f 32ff 	mov.w	r2, #4294967295
 80056f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056f8:	f10a 0a01 	add.w	sl, sl, #1
 80056fc:	9304      	str	r3, [sp, #16]
 80056fe:	9307      	str	r3, [sp, #28]
 8005700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005704:	931a      	str	r3, [sp, #104]	; 0x68
 8005706:	4654      	mov	r4, sl
 8005708:	2205      	movs	r2, #5
 800570a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800570e:	4858      	ldr	r0, [pc, #352]	; (8005870 <_vfiprintf_r+0x24c>)
 8005710:	f7ff f8d0 	bl	80048b4 <memchr>
 8005714:	9a04      	ldr	r2, [sp, #16]
 8005716:	b9d8      	cbnz	r0, 8005750 <_vfiprintf_r+0x12c>
 8005718:	06d1      	lsls	r1, r2, #27
 800571a:	bf44      	itt	mi
 800571c:	2320      	movmi	r3, #32
 800571e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005722:	0713      	lsls	r3, r2, #28
 8005724:	bf44      	itt	mi
 8005726:	232b      	movmi	r3, #43	; 0x2b
 8005728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800572c:	f89a 3000 	ldrb.w	r3, [sl]
 8005730:	2b2a      	cmp	r3, #42	; 0x2a
 8005732:	d015      	beq.n	8005760 <_vfiprintf_r+0x13c>
 8005734:	4654      	mov	r4, sl
 8005736:	2000      	movs	r0, #0
 8005738:	f04f 0c0a 	mov.w	ip, #10
 800573c:	9a07      	ldr	r2, [sp, #28]
 800573e:	4621      	mov	r1, r4
 8005740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005744:	3b30      	subs	r3, #48	; 0x30
 8005746:	2b09      	cmp	r3, #9
 8005748:	d94e      	bls.n	80057e8 <_vfiprintf_r+0x1c4>
 800574a:	b1b0      	cbz	r0, 800577a <_vfiprintf_r+0x156>
 800574c:	9207      	str	r2, [sp, #28]
 800574e:	e014      	b.n	800577a <_vfiprintf_r+0x156>
 8005750:	eba0 0308 	sub.w	r3, r0, r8
 8005754:	fa09 f303 	lsl.w	r3, r9, r3
 8005758:	4313      	orrs	r3, r2
 800575a:	46a2      	mov	sl, r4
 800575c:	9304      	str	r3, [sp, #16]
 800575e:	e7d2      	b.n	8005706 <_vfiprintf_r+0xe2>
 8005760:	9b03      	ldr	r3, [sp, #12]
 8005762:	1d19      	adds	r1, r3, #4
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	9103      	str	r1, [sp, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	bfbb      	ittet	lt
 800576c:	425b      	neglt	r3, r3
 800576e:	f042 0202 	orrlt.w	r2, r2, #2
 8005772:	9307      	strge	r3, [sp, #28]
 8005774:	9307      	strlt	r3, [sp, #28]
 8005776:	bfb8      	it	lt
 8005778:	9204      	strlt	r2, [sp, #16]
 800577a:	7823      	ldrb	r3, [r4, #0]
 800577c:	2b2e      	cmp	r3, #46	; 0x2e
 800577e:	d10c      	bne.n	800579a <_vfiprintf_r+0x176>
 8005780:	7863      	ldrb	r3, [r4, #1]
 8005782:	2b2a      	cmp	r3, #42	; 0x2a
 8005784:	d135      	bne.n	80057f2 <_vfiprintf_r+0x1ce>
 8005786:	9b03      	ldr	r3, [sp, #12]
 8005788:	3402      	adds	r4, #2
 800578a:	1d1a      	adds	r2, r3, #4
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	9203      	str	r2, [sp, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	bfb8      	it	lt
 8005794:	f04f 33ff 	movlt.w	r3, #4294967295
 8005798:	9305      	str	r3, [sp, #20]
 800579a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005874 <_vfiprintf_r+0x250>
 800579e:	2203      	movs	r2, #3
 80057a0:	4650      	mov	r0, sl
 80057a2:	7821      	ldrb	r1, [r4, #0]
 80057a4:	f7ff f886 	bl	80048b4 <memchr>
 80057a8:	b140      	cbz	r0, 80057bc <_vfiprintf_r+0x198>
 80057aa:	2340      	movs	r3, #64	; 0x40
 80057ac:	eba0 000a 	sub.w	r0, r0, sl
 80057b0:	fa03 f000 	lsl.w	r0, r3, r0
 80057b4:	9b04      	ldr	r3, [sp, #16]
 80057b6:	3401      	adds	r4, #1
 80057b8:	4303      	orrs	r3, r0
 80057ba:	9304      	str	r3, [sp, #16]
 80057bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057c0:	2206      	movs	r2, #6
 80057c2:	482d      	ldr	r0, [pc, #180]	; (8005878 <_vfiprintf_r+0x254>)
 80057c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057c8:	f7ff f874 	bl	80048b4 <memchr>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	d03f      	beq.n	8005850 <_vfiprintf_r+0x22c>
 80057d0:	4b2a      	ldr	r3, [pc, #168]	; (800587c <_vfiprintf_r+0x258>)
 80057d2:	bb1b      	cbnz	r3, 800581c <_vfiprintf_r+0x1f8>
 80057d4:	9b03      	ldr	r3, [sp, #12]
 80057d6:	3307      	adds	r3, #7
 80057d8:	f023 0307 	bic.w	r3, r3, #7
 80057dc:	3308      	adds	r3, #8
 80057de:	9303      	str	r3, [sp, #12]
 80057e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e2:	443b      	add	r3, r7
 80057e4:	9309      	str	r3, [sp, #36]	; 0x24
 80057e6:	e767      	b.n	80056b8 <_vfiprintf_r+0x94>
 80057e8:	460c      	mov	r4, r1
 80057ea:	2001      	movs	r0, #1
 80057ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80057f0:	e7a5      	b.n	800573e <_vfiprintf_r+0x11a>
 80057f2:	2300      	movs	r3, #0
 80057f4:	f04f 0c0a 	mov.w	ip, #10
 80057f8:	4619      	mov	r1, r3
 80057fa:	3401      	adds	r4, #1
 80057fc:	9305      	str	r3, [sp, #20]
 80057fe:	4620      	mov	r0, r4
 8005800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005804:	3a30      	subs	r2, #48	; 0x30
 8005806:	2a09      	cmp	r2, #9
 8005808:	d903      	bls.n	8005812 <_vfiprintf_r+0x1ee>
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0c5      	beq.n	800579a <_vfiprintf_r+0x176>
 800580e:	9105      	str	r1, [sp, #20]
 8005810:	e7c3      	b.n	800579a <_vfiprintf_r+0x176>
 8005812:	4604      	mov	r4, r0
 8005814:	2301      	movs	r3, #1
 8005816:	fb0c 2101 	mla	r1, ip, r1, r2
 800581a:	e7f0      	b.n	80057fe <_vfiprintf_r+0x1da>
 800581c:	ab03      	add	r3, sp, #12
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	462a      	mov	r2, r5
 8005822:	4630      	mov	r0, r6
 8005824:	4b16      	ldr	r3, [pc, #88]	; (8005880 <_vfiprintf_r+0x25c>)
 8005826:	a904      	add	r1, sp, #16
 8005828:	f7fd fdc6 	bl	80033b8 <_printf_float>
 800582c:	4607      	mov	r7, r0
 800582e:	1c78      	adds	r0, r7, #1
 8005830:	d1d6      	bne.n	80057e0 <_vfiprintf_r+0x1bc>
 8005832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005834:	07d9      	lsls	r1, r3, #31
 8005836:	d405      	bmi.n	8005844 <_vfiprintf_r+0x220>
 8005838:	89ab      	ldrh	r3, [r5, #12]
 800583a:	059a      	lsls	r2, r3, #22
 800583c:	d402      	bmi.n	8005844 <_vfiprintf_r+0x220>
 800583e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005840:	f000 faab 	bl	8005d9a <__retarget_lock_release_recursive>
 8005844:	89ab      	ldrh	r3, [r5, #12]
 8005846:	065b      	lsls	r3, r3, #25
 8005848:	f53f af12 	bmi.w	8005670 <_vfiprintf_r+0x4c>
 800584c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800584e:	e711      	b.n	8005674 <_vfiprintf_r+0x50>
 8005850:	ab03      	add	r3, sp, #12
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	462a      	mov	r2, r5
 8005856:	4630      	mov	r0, r6
 8005858:	4b09      	ldr	r3, [pc, #36]	; (8005880 <_vfiprintf_r+0x25c>)
 800585a:	a904      	add	r1, sp, #16
 800585c:	f7fe f848 	bl	80038f0 <_printf_i>
 8005860:	e7e4      	b.n	800582c <_vfiprintf_r+0x208>
 8005862:	bf00      	nop
 8005864:	0800646c 	.word	0x0800646c
 8005868:	0800648c 	.word	0x0800648c
 800586c:	0800644c 	.word	0x0800644c
 8005870:	080062f4 	.word	0x080062f4
 8005874:	080062fa 	.word	0x080062fa
 8005878:	080062fe 	.word	0x080062fe
 800587c:	080033b9 	.word	0x080033b9
 8005880:	08005601 	.word	0x08005601

08005884 <__swbuf_r>:
 8005884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005886:	460e      	mov	r6, r1
 8005888:	4614      	mov	r4, r2
 800588a:	4605      	mov	r5, r0
 800588c:	b118      	cbz	r0, 8005896 <__swbuf_r+0x12>
 800588e:	6983      	ldr	r3, [r0, #24]
 8005890:	b90b      	cbnz	r3, 8005896 <__swbuf_r+0x12>
 8005892:	f000 f9e3 	bl	8005c5c <__sinit>
 8005896:	4b21      	ldr	r3, [pc, #132]	; (800591c <__swbuf_r+0x98>)
 8005898:	429c      	cmp	r4, r3
 800589a:	d12b      	bne.n	80058f4 <__swbuf_r+0x70>
 800589c:	686c      	ldr	r4, [r5, #4]
 800589e:	69a3      	ldr	r3, [r4, #24]
 80058a0:	60a3      	str	r3, [r4, #8]
 80058a2:	89a3      	ldrh	r3, [r4, #12]
 80058a4:	071a      	lsls	r2, r3, #28
 80058a6:	d52f      	bpl.n	8005908 <__swbuf_r+0x84>
 80058a8:	6923      	ldr	r3, [r4, #16]
 80058aa:	b36b      	cbz	r3, 8005908 <__swbuf_r+0x84>
 80058ac:	6923      	ldr	r3, [r4, #16]
 80058ae:	6820      	ldr	r0, [r4, #0]
 80058b0:	b2f6      	uxtb	r6, r6
 80058b2:	1ac0      	subs	r0, r0, r3
 80058b4:	6963      	ldr	r3, [r4, #20]
 80058b6:	4637      	mov	r7, r6
 80058b8:	4283      	cmp	r3, r0
 80058ba:	dc04      	bgt.n	80058c6 <__swbuf_r+0x42>
 80058bc:	4621      	mov	r1, r4
 80058be:	4628      	mov	r0, r5
 80058c0:	f000 f938 	bl	8005b34 <_fflush_r>
 80058c4:	bb30      	cbnz	r0, 8005914 <__swbuf_r+0x90>
 80058c6:	68a3      	ldr	r3, [r4, #8]
 80058c8:	3001      	adds	r0, #1
 80058ca:	3b01      	subs	r3, #1
 80058cc:	60a3      	str	r3, [r4, #8]
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	6022      	str	r2, [r4, #0]
 80058d4:	701e      	strb	r6, [r3, #0]
 80058d6:	6963      	ldr	r3, [r4, #20]
 80058d8:	4283      	cmp	r3, r0
 80058da:	d004      	beq.n	80058e6 <__swbuf_r+0x62>
 80058dc:	89a3      	ldrh	r3, [r4, #12]
 80058de:	07db      	lsls	r3, r3, #31
 80058e0:	d506      	bpl.n	80058f0 <__swbuf_r+0x6c>
 80058e2:	2e0a      	cmp	r6, #10
 80058e4:	d104      	bne.n	80058f0 <__swbuf_r+0x6c>
 80058e6:	4621      	mov	r1, r4
 80058e8:	4628      	mov	r0, r5
 80058ea:	f000 f923 	bl	8005b34 <_fflush_r>
 80058ee:	b988      	cbnz	r0, 8005914 <__swbuf_r+0x90>
 80058f0:	4638      	mov	r0, r7
 80058f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058f4:	4b0a      	ldr	r3, [pc, #40]	; (8005920 <__swbuf_r+0x9c>)
 80058f6:	429c      	cmp	r4, r3
 80058f8:	d101      	bne.n	80058fe <__swbuf_r+0x7a>
 80058fa:	68ac      	ldr	r4, [r5, #8]
 80058fc:	e7cf      	b.n	800589e <__swbuf_r+0x1a>
 80058fe:	4b09      	ldr	r3, [pc, #36]	; (8005924 <__swbuf_r+0xa0>)
 8005900:	429c      	cmp	r4, r3
 8005902:	bf08      	it	eq
 8005904:	68ec      	ldreq	r4, [r5, #12]
 8005906:	e7ca      	b.n	800589e <__swbuf_r+0x1a>
 8005908:	4621      	mov	r1, r4
 800590a:	4628      	mov	r0, r5
 800590c:	f000 f81a 	bl	8005944 <__swsetup_r>
 8005910:	2800      	cmp	r0, #0
 8005912:	d0cb      	beq.n	80058ac <__swbuf_r+0x28>
 8005914:	f04f 37ff 	mov.w	r7, #4294967295
 8005918:	e7ea      	b.n	80058f0 <__swbuf_r+0x6c>
 800591a:	bf00      	nop
 800591c:	0800646c 	.word	0x0800646c
 8005920:	0800648c 	.word	0x0800648c
 8005924:	0800644c 	.word	0x0800644c

08005928 <__ascii_wctomb>:
 8005928:	4603      	mov	r3, r0
 800592a:	4608      	mov	r0, r1
 800592c:	b141      	cbz	r1, 8005940 <__ascii_wctomb+0x18>
 800592e:	2aff      	cmp	r2, #255	; 0xff
 8005930:	d904      	bls.n	800593c <__ascii_wctomb+0x14>
 8005932:	228a      	movs	r2, #138	; 0x8a
 8005934:	f04f 30ff 	mov.w	r0, #4294967295
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	4770      	bx	lr
 800593c:	2001      	movs	r0, #1
 800593e:	700a      	strb	r2, [r1, #0]
 8005940:	4770      	bx	lr
	...

08005944 <__swsetup_r>:
 8005944:	4b32      	ldr	r3, [pc, #200]	; (8005a10 <__swsetup_r+0xcc>)
 8005946:	b570      	push	{r4, r5, r6, lr}
 8005948:	681d      	ldr	r5, [r3, #0]
 800594a:	4606      	mov	r6, r0
 800594c:	460c      	mov	r4, r1
 800594e:	b125      	cbz	r5, 800595a <__swsetup_r+0x16>
 8005950:	69ab      	ldr	r3, [r5, #24]
 8005952:	b913      	cbnz	r3, 800595a <__swsetup_r+0x16>
 8005954:	4628      	mov	r0, r5
 8005956:	f000 f981 	bl	8005c5c <__sinit>
 800595a:	4b2e      	ldr	r3, [pc, #184]	; (8005a14 <__swsetup_r+0xd0>)
 800595c:	429c      	cmp	r4, r3
 800595e:	d10f      	bne.n	8005980 <__swsetup_r+0x3c>
 8005960:	686c      	ldr	r4, [r5, #4]
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005968:	0719      	lsls	r1, r3, #28
 800596a:	d42c      	bmi.n	80059c6 <__swsetup_r+0x82>
 800596c:	06dd      	lsls	r5, r3, #27
 800596e:	d411      	bmi.n	8005994 <__swsetup_r+0x50>
 8005970:	2309      	movs	r3, #9
 8005972:	6033      	str	r3, [r6, #0]
 8005974:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005978:	f04f 30ff 	mov.w	r0, #4294967295
 800597c:	81a3      	strh	r3, [r4, #12]
 800597e:	e03e      	b.n	80059fe <__swsetup_r+0xba>
 8005980:	4b25      	ldr	r3, [pc, #148]	; (8005a18 <__swsetup_r+0xd4>)
 8005982:	429c      	cmp	r4, r3
 8005984:	d101      	bne.n	800598a <__swsetup_r+0x46>
 8005986:	68ac      	ldr	r4, [r5, #8]
 8005988:	e7eb      	b.n	8005962 <__swsetup_r+0x1e>
 800598a:	4b24      	ldr	r3, [pc, #144]	; (8005a1c <__swsetup_r+0xd8>)
 800598c:	429c      	cmp	r4, r3
 800598e:	bf08      	it	eq
 8005990:	68ec      	ldreq	r4, [r5, #12]
 8005992:	e7e6      	b.n	8005962 <__swsetup_r+0x1e>
 8005994:	0758      	lsls	r0, r3, #29
 8005996:	d512      	bpl.n	80059be <__swsetup_r+0x7a>
 8005998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800599a:	b141      	cbz	r1, 80059ae <__swsetup_r+0x6a>
 800599c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059a0:	4299      	cmp	r1, r3
 80059a2:	d002      	beq.n	80059aa <__swsetup_r+0x66>
 80059a4:	4630      	mov	r0, r6
 80059a6:	f7ff fb37 	bl	8005018 <_free_r>
 80059aa:	2300      	movs	r3, #0
 80059ac:	6363      	str	r3, [r4, #52]	; 0x34
 80059ae:	89a3      	ldrh	r3, [r4, #12]
 80059b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059b4:	81a3      	strh	r3, [r4, #12]
 80059b6:	2300      	movs	r3, #0
 80059b8:	6063      	str	r3, [r4, #4]
 80059ba:	6923      	ldr	r3, [r4, #16]
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	89a3      	ldrh	r3, [r4, #12]
 80059c0:	f043 0308 	orr.w	r3, r3, #8
 80059c4:	81a3      	strh	r3, [r4, #12]
 80059c6:	6923      	ldr	r3, [r4, #16]
 80059c8:	b94b      	cbnz	r3, 80059de <__swsetup_r+0x9a>
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d4:	d003      	beq.n	80059de <__swsetup_r+0x9a>
 80059d6:	4621      	mov	r1, r4
 80059d8:	4630      	mov	r0, r6
 80059da:	f000 fa05 	bl	8005de8 <__smakebuf_r>
 80059de:	89a0      	ldrh	r0, [r4, #12]
 80059e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059e4:	f010 0301 	ands.w	r3, r0, #1
 80059e8:	d00a      	beq.n	8005a00 <__swsetup_r+0xbc>
 80059ea:	2300      	movs	r3, #0
 80059ec:	60a3      	str	r3, [r4, #8]
 80059ee:	6963      	ldr	r3, [r4, #20]
 80059f0:	425b      	negs	r3, r3
 80059f2:	61a3      	str	r3, [r4, #24]
 80059f4:	6923      	ldr	r3, [r4, #16]
 80059f6:	b943      	cbnz	r3, 8005a0a <__swsetup_r+0xc6>
 80059f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059fc:	d1ba      	bne.n	8005974 <__swsetup_r+0x30>
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
 8005a00:	0781      	lsls	r1, r0, #30
 8005a02:	bf58      	it	pl
 8005a04:	6963      	ldrpl	r3, [r4, #20]
 8005a06:	60a3      	str	r3, [r4, #8]
 8005a08:	e7f4      	b.n	80059f4 <__swsetup_r+0xb0>
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	e7f7      	b.n	80059fe <__swsetup_r+0xba>
 8005a0e:	bf00      	nop
 8005a10:	2000000c 	.word	0x2000000c
 8005a14:	0800646c 	.word	0x0800646c
 8005a18:	0800648c 	.word	0x0800648c
 8005a1c:	0800644c 	.word	0x0800644c

08005a20 <abort>:
 8005a20:	2006      	movs	r0, #6
 8005a22:	b508      	push	{r3, lr}
 8005a24:	f000 fa50 	bl	8005ec8 <raise>
 8005a28:	2001      	movs	r0, #1
 8005a2a:	f7fb fc2e 	bl	800128a <_exit>
	...

08005a30 <__sflush_r>:
 8005a30:	898a      	ldrh	r2, [r1, #12]
 8005a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a34:	4605      	mov	r5, r0
 8005a36:	0710      	lsls	r0, r2, #28
 8005a38:	460c      	mov	r4, r1
 8005a3a:	d457      	bmi.n	8005aec <__sflush_r+0xbc>
 8005a3c:	684b      	ldr	r3, [r1, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	dc04      	bgt.n	8005a4c <__sflush_r+0x1c>
 8005a42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	dc01      	bgt.n	8005a4c <__sflush_r+0x1c>
 8005a48:	2000      	movs	r0, #0
 8005a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a4e:	2e00      	cmp	r6, #0
 8005a50:	d0fa      	beq.n	8005a48 <__sflush_r+0x18>
 8005a52:	2300      	movs	r3, #0
 8005a54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a58:	682f      	ldr	r7, [r5, #0]
 8005a5a:	602b      	str	r3, [r5, #0]
 8005a5c:	d032      	beq.n	8005ac4 <__sflush_r+0x94>
 8005a5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a60:	89a3      	ldrh	r3, [r4, #12]
 8005a62:	075a      	lsls	r2, r3, #29
 8005a64:	d505      	bpl.n	8005a72 <__sflush_r+0x42>
 8005a66:	6863      	ldr	r3, [r4, #4]
 8005a68:	1ac0      	subs	r0, r0, r3
 8005a6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a6c:	b10b      	cbz	r3, 8005a72 <__sflush_r+0x42>
 8005a6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a70:	1ac0      	subs	r0, r0, r3
 8005a72:	2300      	movs	r3, #0
 8005a74:	4602      	mov	r2, r0
 8005a76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a78:	4628      	mov	r0, r5
 8005a7a:	6a21      	ldr	r1, [r4, #32]
 8005a7c:	47b0      	blx	r6
 8005a7e:	1c43      	adds	r3, r0, #1
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	d106      	bne.n	8005a92 <__sflush_r+0x62>
 8005a84:	6829      	ldr	r1, [r5, #0]
 8005a86:	291d      	cmp	r1, #29
 8005a88:	d82c      	bhi.n	8005ae4 <__sflush_r+0xb4>
 8005a8a:	4a29      	ldr	r2, [pc, #164]	; (8005b30 <__sflush_r+0x100>)
 8005a8c:	40ca      	lsrs	r2, r1
 8005a8e:	07d6      	lsls	r6, r2, #31
 8005a90:	d528      	bpl.n	8005ae4 <__sflush_r+0xb4>
 8005a92:	2200      	movs	r2, #0
 8005a94:	6062      	str	r2, [r4, #4]
 8005a96:	6922      	ldr	r2, [r4, #16]
 8005a98:	04d9      	lsls	r1, r3, #19
 8005a9a:	6022      	str	r2, [r4, #0]
 8005a9c:	d504      	bpl.n	8005aa8 <__sflush_r+0x78>
 8005a9e:	1c42      	adds	r2, r0, #1
 8005aa0:	d101      	bne.n	8005aa6 <__sflush_r+0x76>
 8005aa2:	682b      	ldr	r3, [r5, #0]
 8005aa4:	b903      	cbnz	r3, 8005aa8 <__sflush_r+0x78>
 8005aa6:	6560      	str	r0, [r4, #84]	; 0x54
 8005aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aaa:	602f      	str	r7, [r5, #0]
 8005aac:	2900      	cmp	r1, #0
 8005aae:	d0cb      	beq.n	8005a48 <__sflush_r+0x18>
 8005ab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ab4:	4299      	cmp	r1, r3
 8005ab6:	d002      	beq.n	8005abe <__sflush_r+0x8e>
 8005ab8:	4628      	mov	r0, r5
 8005aba:	f7ff faad 	bl	8005018 <_free_r>
 8005abe:	2000      	movs	r0, #0
 8005ac0:	6360      	str	r0, [r4, #52]	; 0x34
 8005ac2:	e7c2      	b.n	8005a4a <__sflush_r+0x1a>
 8005ac4:	6a21      	ldr	r1, [r4, #32]
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	4628      	mov	r0, r5
 8005aca:	47b0      	blx	r6
 8005acc:	1c41      	adds	r1, r0, #1
 8005ace:	d1c7      	bne.n	8005a60 <__sflush_r+0x30>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0c4      	beq.n	8005a60 <__sflush_r+0x30>
 8005ad6:	2b1d      	cmp	r3, #29
 8005ad8:	d001      	beq.n	8005ade <__sflush_r+0xae>
 8005ada:	2b16      	cmp	r3, #22
 8005adc:	d101      	bne.n	8005ae2 <__sflush_r+0xb2>
 8005ade:	602f      	str	r7, [r5, #0]
 8005ae0:	e7b2      	b.n	8005a48 <__sflush_r+0x18>
 8005ae2:	89a3      	ldrh	r3, [r4, #12]
 8005ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ae8:	81a3      	strh	r3, [r4, #12]
 8005aea:	e7ae      	b.n	8005a4a <__sflush_r+0x1a>
 8005aec:	690f      	ldr	r7, [r1, #16]
 8005aee:	2f00      	cmp	r7, #0
 8005af0:	d0aa      	beq.n	8005a48 <__sflush_r+0x18>
 8005af2:	0793      	lsls	r3, r2, #30
 8005af4:	bf18      	it	ne
 8005af6:	2300      	movne	r3, #0
 8005af8:	680e      	ldr	r6, [r1, #0]
 8005afa:	bf08      	it	eq
 8005afc:	694b      	ldreq	r3, [r1, #20]
 8005afe:	1bf6      	subs	r6, r6, r7
 8005b00:	600f      	str	r7, [r1, #0]
 8005b02:	608b      	str	r3, [r1, #8]
 8005b04:	2e00      	cmp	r6, #0
 8005b06:	dd9f      	ble.n	8005a48 <__sflush_r+0x18>
 8005b08:	4633      	mov	r3, r6
 8005b0a:	463a      	mov	r2, r7
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	6a21      	ldr	r1, [r4, #32]
 8005b10:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005b14:	47e0      	blx	ip
 8005b16:	2800      	cmp	r0, #0
 8005b18:	dc06      	bgt.n	8005b28 <__sflush_r+0xf8>
 8005b1a:	89a3      	ldrh	r3, [r4, #12]
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b24:	81a3      	strh	r3, [r4, #12]
 8005b26:	e790      	b.n	8005a4a <__sflush_r+0x1a>
 8005b28:	4407      	add	r7, r0
 8005b2a:	1a36      	subs	r6, r6, r0
 8005b2c:	e7ea      	b.n	8005b04 <__sflush_r+0xd4>
 8005b2e:	bf00      	nop
 8005b30:	20400001 	.word	0x20400001

08005b34 <_fflush_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	690b      	ldr	r3, [r1, #16]
 8005b38:	4605      	mov	r5, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	b913      	cbnz	r3, 8005b44 <_fflush_r+0x10>
 8005b3e:	2500      	movs	r5, #0
 8005b40:	4628      	mov	r0, r5
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	b118      	cbz	r0, 8005b4e <_fflush_r+0x1a>
 8005b46:	6983      	ldr	r3, [r0, #24]
 8005b48:	b90b      	cbnz	r3, 8005b4e <_fflush_r+0x1a>
 8005b4a:	f000 f887 	bl	8005c5c <__sinit>
 8005b4e:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <_fflush_r+0x6c>)
 8005b50:	429c      	cmp	r4, r3
 8005b52:	d11b      	bne.n	8005b8c <_fflush_r+0x58>
 8005b54:	686c      	ldr	r4, [r5, #4]
 8005b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0ef      	beq.n	8005b3e <_fflush_r+0xa>
 8005b5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b60:	07d0      	lsls	r0, r2, #31
 8005b62:	d404      	bmi.n	8005b6e <_fflush_r+0x3a>
 8005b64:	0599      	lsls	r1, r3, #22
 8005b66:	d402      	bmi.n	8005b6e <_fflush_r+0x3a>
 8005b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b6a:	f000 f915 	bl	8005d98 <__retarget_lock_acquire_recursive>
 8005b6e:	4628      	mov	r0, r5
 8005b70:	4621      	mov	r1, r4
 8005b72:	f7ff ff5d 	bl	8005a30 <__sflush_r>
 8005b76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b78:	4605      	mov	r5, r0
 8005b7a:	07da      	lsls	r2, r3, #31
 8005b7c:	d4e0      	bmi.n	8005b40 <_fflush_r+0xc>
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	059b      	lsls	r3, r3, #22
 8005b82:	d4dd      	bmi.n	8005b40 <_fflush_r+0xc>
 8005b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b86:	f000 f908 	bl	8005d9a <__retarget_lock_release_recursive>
 8005b8a:	e7d9      	b.n	8005b40 <_fflush_r+0xc>
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <_fflush_r+0x70>)
 8005b8e:	429c      	cmp	r4, r3
 8005b90:	d101      	bne.n	8005b96 <_fflush_r+0x62>
 8005b92:	68ac      	ldr	r4, [r5, #8]
 8005b94:	e7df      	b.n	8005b56 <_fflush_r+0x22>
 8005b96:	4b04      	ldr	r3, [pc, #16]	; (8005ba8 <_fflush_r+0x74>)
 8005b98:	429c      	cmp	r4, r3
 8005b9a:	bf08      	it	eq
 8005b9c:	68ec      	ldreq	r4, [r5, #12]
 8005b9e:	e7da      	b.n	8005b56 <_fflush_r+0x22>
 8005ba0:	0800646c 	.word	0x0800646c
 8005ba4:	0800648c 	.word	0x0800648c
 8005ba8:	0800644c 	.word	0x0800644c

08005bac <std>:
 8005bac:	2300      	movs	r3, #0
 8005bae:	b510      	push	{r4, lr}
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8005bb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bba:	6083      	str	r3, [r0, #8]
 8005bbc:	8181      	strh	r1, [r0, #12]
 8005bbe:	6643      	str	r3, [r0, #100]	; 0x64
 8005bc0:	81c2      	strh	r2, [r0, #14]
 8005bc2:	6183      	str	r3, [r0, #24]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	2208      	movs	r2, #8
 8005bc8:	305c      	adds	r0, #92	; 0x5c
 8005bca:	f7fd fb4f 	bl	800326c <memset>
 8005bce:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <std+0x38>)
 8005bd0:	6224      	str	r4, [r4, #32]
 8005bd2:	6263      	str	r3, [r4, #36]	; 0x24
 8005bd4:	4b04      	ldr	r3, [pc, #16]	; (8005be8 <std+0x3c>)
 8005bd6:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bd8:	4b04      	ldr	r3, [pc, #16]	; (8005bec <std+0x40>)
 8005bda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bdc:	4b04      	ldr	r3, [pc, #16]	; (8005bf0 <std+0x44>)
 8005bde:	6323      	str	r3, [r4, #48]	; 0x30
 8005be0:	bd10      	pop	{r4, pc}
 8005be2:	bf00      	nop
 8005be4:	08005f01 	.word	0x08005f01
 8005be8:	08005f23 	.word	0x08005f23
 8005bec:	08005f5b 	.word	0x08005f5b
 8005bf0:	08005f7f 	.word	0x08005f7f

08005bf4 <_cleanup_r>:
 8005bf4:	4901      	ldr	r1, [pc, #4]	; (8005bfc <_cleanup_r+0x8>)
 8005bf6:	f000 b8af 	b.w	8005d58 <_fwalk_reent>
 8005bfa:	bf00      	nop
 8005bfc:	08005b35 	.word	0x08005b35

08005c00 <__sfmoreglue>:
 8005c00:	2268      	movs	r2, #104	; 0x68
 8005c02:	b570      	push	{r4, r5, r6, lr}
 8005c04:	1e4d      	subs	r5, r1, #1
 8005c06:	4355      	muls	r5, r2
 8005c08:	460e      	mov	r6, r1
 8005c0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c0e:	f7ff fa6b 	bl	80050e8 <_malloc_r>
 8005c12:	4604      	mov	r4, r0
 8005c14:	b140      	cbz	r0, 8005c28 <__sfmoreglue+0x28>
 8005c16:	2100      	movs	r1, #0
 8005c18:	e9c0 1600 	strd	r1, r6, [r0]
 8005c1c:	300c      	adds	r0, #12
 8005c1e:	60a0      	str	r0, [r4, #8]
 8005c20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c24:	f7fd fb22 	bl	800326c <memset>
 8005c28:	4620      	mov	r0, r4
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}

08005c2c <__sfp_lock_acquire>:
 8005c2c:	4801      	ldr	r0, [pc, #4]	; (8005c34 <__sfp_lock_acquire+0x8>)
 8005c2e:	f000 b8b3 	b.w	8005d98 <__retarget_lock_acquire_recursive>
 8005c32:	bf00      	nop
 8005c34:	2000027d 	.word	0x2000027d

08005c38 <__sfp_lock_release>:
 8005c38:	4801      	ldr	r0, [pc, #4]	; (8005c40 <__sfp_lock_release+0x8>)
 8005c3a:	f000 b8ae 	b.w	8005d9a <__retarget_lock_release_recursive>
 8005c3e:	bf00      	nop
 8005c40:	2000027d 	.word	0x2000027d

08005c44 <__sinit_lock_acquire>:
 8005c44:	4801      	ldr	r0, [pc, #4]	; (8005c4c <__sinit_lock_acquire+0x8>)
 8005c46:	f000 b8a7 	b.w	8005d98 <__retarget_lock_acquire_recursive>
 8005c4a:	bf00      	nop
 8005c4c:	2000027e 	.word	0x2000027e

08005c50 <__sinit_lock_release>:
 8005c50:	4801      	ldr	r0, [pc, #4]	; (8005c58 <__sinit_lock_release+0x8>)
 8005c52:	f000 b8a2 	b.w	8005d9a <__retarget_lock_release_recursive>
 8005c56:	bf00      	nop
 8005c58:	2000027e 	.word	0x2000027e

08005c5c <__sinit>:
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	4604      	mov	r4, r0
 8005c60:	f7ff fff0 	bl	8005c44 <__sinit_lock_acquire>
 8005c64:	69a3      	ldr	r3, [r4, #24]
 8005c66:	b11b      	cbz	r3, 8005c70 <__sinit+0x14>
 8005c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c6c:	f7ff bff0 	b.w	8005c50 <__sinit_lock_release>
 8005c70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c74:	6523      	str	r3, [r4, #80]	; 0x50
 8005c76:	4b13      	ldr	r3, [pc, #76]	; (8005cc4 <__sinit+0x68>)
 8005c78:	4a13      	ldr	r2, [pc, #76]	; (8005cc8 <__sinit+0x6c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c7e:	42a3      	cmp	r3, r4
 8005c80:	bf08      	it	eq
 8005c82:	2301      	moveq	r3, #1
 8005c84:	4620      	mov	r0, r4
 8005c86:	bf08      	it	eq
 8005c88:	61a3      	streq	r3, [r4, #24]
 8005c8a:	f000 f81f 	bl	8005ccc <__sfp>
 8005c8e:	6060      	str	r0, [r4, #4]
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 f81b 	bl	8005ccc <__sfp>
 8005c96:	60a0      	str	r0, [r4, #8]
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 f817 	bl	8005ccc <__sfp>
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2104      	movs	r1, #4
 8005ca2:	60e0      	str	r0, [r4, #12]
 8005ca4:	6860      	ldr	r0, [r4, #4]
 8005ca6:	f7ff ff81 	bl	8005bac <std>
 8005caa:	2201      	movs	r2, #1
 8005cac:	2109      	movs	r1, #9
 8005cae:	68a0      	ldr	r0, [r4, #8]
 8005cb0:	f7ff ff7c 	bl	8005bac <std>
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	2112      	movs	r1, #18
 8005cb8:	68e0      	ldr	r0, [r4, #12]
 8005cba:	f7ff ff77 	bl	8005bac <std>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	61a3      	str	r3, [r4, #24]
 8005cc2:	e7d1      	b.n	8005c68 <__sinit+0xc>
 8005cc4:	080060d4 	.word	0x080060d4
 8005cc8:	08005bf5 	.word	0x08005bf5

08005ccc <__sfp>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	4607      	mov	r7, r0
 8005cd0:	f7ff ffac 	bl	8005c2c <__sfp_lock_acquire>
 8005cd4:	4b1e      	ldr	r3, [pc, #120]	; (8005d50 <__sfp+0x84>)
 8005cd6:	681e      	ldr	r6, [r3, #0]
 8005cd8:	69b3      	ldr	r3, [r6, #24]
 8005cda:	b913      	cbnz	r3, 8005ce2 <__sfp+0x16>
 8005cdc:	4630      	mov	r0, r6
 8005cde:	f7ff ffbd 	bl	8005c5c <__sinit>
 8005ce2:	3648      	adds	r6, #72	; 0x48
 8005ce4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	d503      	bpl.n	8005cf4 <__sfp+0x28>
 8005cec:	6833      	ldr	r3, [r6, #0]
 8005cee:	b30b      	cbz	r3, 8005d34 <__sfp+0x68>
 8005cf0:	6836      	ldr	r6, [r6, #0]
 8005cf2:	e7f7      	b.n	8005ce4 <__sfp+0x18>
 8005cf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cf8:	b9d5      	cbnz	r5, 8005d30 <__sfp+0x64>
 8005cfa:	4b16      	ldr	r3, [pc, #88]	; (8005d54 <__sfp+0x88>)
 8005cfc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d00:	60e3      	str	r3, [r4, #12]
 8005d02:	6665      	str	r5, [r4, #100]	; 0x64
 8005d04:	f000 f847 	bl	8005d96 <__retarget_lock_init_recursive>
 8005d08:	f7ff ff96 	bl	8005c38 <__sfp_lock_release>
 8005d0c:	2208      	movs	r2, #8
 8005d0e:	4629      	mov	r1, r5
 8005d10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d18:	6025      	str	r5, [r4, #0]
 8005d1a:	61a5      	str	r5, [r4, #24]
 8005d1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d20:	f7fd faa4 	bl	800326c <memset>
 8005d24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d30:	3468      	adds	r4, #104	; 0x68
 8005d32:	e7d9      	b.n	8005ce8 <__sfp+0x1c>
 8005d34:	2104      	movs	r1, #4
 8005d36:	4638      	mov	r0, r7
 8005d38:	f7ff ff62 	bl	8005c00 <__sfmoreglue>
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	6030      	str	r0, [r6, #0]
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d1d5      	bne.n	8005cf0 <__sfp+0x24>
 8005d44:	f7ff ff78 	bl	8005c38 <__sfp_lock_release>
 8005d48:	230c      	movs	r3, #12
 8005d4a:	603b      	str	r3, [r7, #0]
 8005d4c:	e7ee      	b.n	8005d2c <__sfp+0x60>
 8005d4e:	bf00      	nop
 8005d50:	080060d4 	.word	0x080060d4
 8005d54:	ffff0001 	.word	0xffff0001

08005d58 <_fwalk_reent>:
 8005d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	4688      	mov	r8, r1
 8005d60:	2700      	movs	r7, #0
 8005d62:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d6a:	f1b9 0901 	subs.w	r9, r9, #1
 8005d6e:	d505      	bpl.n	8005d7c <_fwalk_reent+0x24>
 8005d70:	6824      	ldr	r4, [r4, #0]
 8005d72:	2c00      	cmp	r4, #0
 8005d74:	d1f7      	bne.n	8005d66 <_fwalk_reent+0xe>
 8005d76:	4638      	mov	r0, r7
 8005d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d7c:	89ab      	ldrh	r3, [r5, #12]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d907      	bls.n	8005d92 <_fwalk_reent+0x3a>
 8005d82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d86:	3301      	adds	r3, #1
 8005d88:	d003      	beq.n	8005d92 <_fwalk_reent+0x3a>
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	47c0      	blx	r8
 8005d90:	4307      	orrs	r7, r0
 8005d92:	3568      	adds	r5, #104	; 0x68
 8005d94:	e7e9      	b.n	8005d6a <_fwalk_reent+0x12>

08005d96 <__retarget_lock_init_recursive>:
 8005d96:	4770      	bx	lr

08005d98 <__retarget_lock_acquire_recursive>:
 8005d98:	4770      	bx	lr

08005d9a <__retarget_lock_release_recursive>:
 8005d9a:	4770      	bx	lr

08005d9c <__swhatbuf_r>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	460e      	mov	r6, r1
 8005da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da4:	4614      	mov	r4, r2
 8005da6:	2900      	cmp	r1, #0
 8005da8:	461d      	mov	r5, r3
 8005daa:	b096      	sub	sp, #88	; 0x58
 8005dac:	da08      	bge.n	8005dc0 <__swhatbuf_r+0x24>
 8005dae:	2200      	movs	r2, #0
 8005db0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005db4:	602a      	str	r2, [r5, #0]
 8005db6:	061a      	lsls	r2, r3, #24
 8005db8:	d410      	bmi.n	8005ddc <__swhatbuf_r+0x40>
 8005dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dbe:	e00e      	b.n	8005dde <__swhatbuf_r+0x42>
 8005dc0:	466a      	mov	r2, sp
 8005dc2:	f000 f903 	bl	8005fcc <_fstat_r>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	dbf1      	blt.n	8005dae <__swhatbuf_r+0x12>
 8005dca:	9a01      	ldr	r2, [sp, #4]
 8005dcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005dd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005dd4:	425a      	negs	r2, r3
 8005dd6:	415a      	adcs	r2, r3
 8005dd8:	602a      	str	r2, [r5, #0]
 8005dda:	e7ee      	b.n	8005dba <__swhatbuf_r+0x1e>
 8005ddc:	2340      	movs	r3, #64	; 0x40
 8005dde:	2000      	movs	r0, #0
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	b016      	add	sp, #88	; 0x58
 8005de4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005de8 <__smakebuf_r>:
 8005de8:	898b      	ldrh	r3, [r1, #12]
 8005dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dec:	079d      	lsls	r5, r3, #30
 8005dee:	4606      	mov	r6, r0
 8005df0:	460c      	mov	r4, r1
 8005df2:	d507      	bpl.n	8005e04 <__smakebuf_r+0x1c>
 8005df4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	6123      	str	r3, [r4, #16]
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	6163      	str	r3, [r4, #20]
 8005e00:	b002      	add	sp, #8
 8005e02:	bd70      	pop	{r4, r5, r6, pc}
 8005e04:	466a      	mov	r2, sp
 8005e06:	ab01      	add	r3, sp, #4
 8005e08:	f7ff ffc8 	bl	8005d9c <__swhatbuf_r>
 8005e0c:	9900      	ldr	r1, [sp, #0]
 8005e0e:	4605      	mov	r5, r0
 8005e10:	4630      	mov	r0, r6
 8005e12:	f7ff f969 	bl	80050e8 <_malloc_r>
 8005e16:	b948      	cbnz	r0, 8005e2c <__smakebuf_r+0x44>
 8005e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e1c:	059a      	lsls	r2, r3, #22
 8005e1e:	d4ef      	bmi.n	8005e00 <__smakebuf_r+0x18>
 8005e20:	f023 0303 	bic.w	r3, r3, #3
 8005e24:	f043 0302 	orr.w	r3, r3, #2
 8005e28:	81a3      	strh	r3, [r4, #12]
 8005e2a:	e7e3      	b.n	8005df4 <__smakebuf_r+0xc>
 8005e2c:	4b0d      	ldr	r3, [pc, #52]	; (8005e64 <__smakebuf_r+0x7c>)
 8005e2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e30:	89a3      	ldrh	r3, [r4, #12]
 8005e32:	6020      	str	r0, [r4, #0]
 8005e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e38:	81a3      	strh	r3, [r4, #12]
 8005e3a:	9b00      	ldr	r3, [sp, #0]
 8005e3c:	6120      	str	r0, [r4, #16]
 8005e3e:	6163      	str	r3, [r4, #20]
 8005e40:	9b01      	ldr	r3, [sp, #4]
 8005e42:	b15b      	cbz	r3, 8005e5c <__smakebuf_r+0x74>
 8005e44:	4630      	mov	r0, r6
 8005e46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e4a:	f000 f8d1 	bl	8005ff0 <_isatty_r>
 8005e4e:	b128      	cbz	r0, 8005e5c <__smakebuf_r+0x74>
 8005e50:	89a3      	ldrh	r3, [r4, #12]
 8005e52:	f023 0303 	bic.w	r3, r3, #3
 8005e56:	f043 0301 	orr.w	r3, r3, #1
 8005e5a:	81a3      	strh	r3, [r4, #12]
 8005e5c:	89a0      	ldrh	r0, [r4, #12]
 8005e5e:	4305      	orrs	r5, r0
 8005e60:	81a5      	strh	r5, [r4, #12]
 8005e62:	e7cd      	b.n	8005e00 <__smakebuf_r+0x18>
 8005e64:	08005bf5 	.word	0x08005bf5

08005e68 <_malloc_usable_size_r>:
 8005e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e6c:	1f18      	subs	r0, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	bfbc      	itt	lt
 8005e72:	580b      	ldrlt	r3, [r1, r0]
 8005e74:	18c0      	addlt	r0, r0, r3
 8005e76:	4770      	bx	lr

08005e78 <_raise_r>:
 8005e78:	291f      	cmp	r1, #31
 8005e7a:	b538      	push	{r3, r4, r5, lr}
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	460d      	mov	r5, r1
 8005e80:	d904      	bls.n	8005e8c <_raise_r+0x14>
 8005e82:	2316      	movs	r3, #22
 8005e84:	6003      	str	r3, [r0, #0]
 8005e86:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8a:	bd38      	pop	{r3, r4, r5, pc}
 8005e8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e8e:	b112      	cbz	r2, 8005e96 <_raise_r+0x1e>
 8005e90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e94:	b94b      	cbnz	r3, 8005eaa <_raise_r+0x32>
 8005e96:	4620      	mov	r0, r4
 8005e98:	f000 f830 	bl	8005efc <_getpid_r>
 8005e9c:	462a      	mov	r2, r5
 8005e9e:	4601      	mov	r1, r0
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ea6:	f000 b817 	b.w	8005ed8 <_kill_r>
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d00a      	beq.n	8005ec4 <_raise_r+0x4c>
 8005eae:	1c59      	adds	r1, r3, #1
 8005eb0:	d103      	bne.n	8005eba <_raise_r+0x42>
 8005eb2:	2316      	movs	r3, #22
 8005eb4:	6003      	str	r3, [r0, #0]
 8005eb6:	2001      	movs	r0, #1
 8005eb8:	e7e7      	b.n	8005e8a <_raise_r+0x12>
 8005eba:	2400      	movs	r4, #0
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ec2:	4798      	blx	r3
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	e7e0      	b.n	8005e8a <_raise_r+0x12>

08005ec8 <raise>:
 8005ec8:	4b02      	ldr	r3, [pc, #8]	; (8005ed4 <raise+0xc>)
 8005eca:	4601      	mov	r1, r0
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	f7ff bfd3 	b.w	8005e78 <_raise_r>
 8005ed2:	bf00      	nop
 8005ed4:	2000000c 	.word	0x2000000c

08005ed8 <_kill_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	2300      	movs	r3, #0
 8005edc:	4d06      	ldr	r5, [pc, #24]	; (8005ef8 <_kill_r+0x20>)
 8005ede:	4604      	mov	r4, r0
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	602b      	str	r3, [r5, #0]
 8005ee6:	f7fb f9c0 	bl	800126a <_kill>
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	d102      	bne.n	8005ef4 <_kill_r+0x1c>
 8005eee:	682b      	ldr	r3, [r5, #0]
 8005ef0:	b103      	cbz	r3, 8005ef4 <_kill_r+0x1c>
 8005ef2:	6023      	str	r3, [r4, #0]
 8005ef4:	bd38      	pop	{r3, r4, r5, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20000278 	.word	0x20000278

08005efc <_getpid_r>:
 8005efc:	f7fb b9ae 	b.w	800125c <_getpid>

08005f00 <__sread>:
 8005f00:	b510      	push	{r4, lr}
 8005f02:	460c      	mov	r4, r1
 8005f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f08:	f000 f894 	bl	8006034 <_read_r>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	bfab      	itete	ge
 8005f10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f12:	89a3      	ldrhlt	r3, [r4, #12]
 8005f14:	181b      	addge	r3, r3, r0
 8005f16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f1a:	bfac      	ite	ge
 8005f1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f1e:	81a3      	strhlt	r3, [r4, #12]
 8005f20:	bd10      	pop	{r4, pc}

08005f22 <__swrite>:
 8005f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f26:	461f      	mov	r7, r3
 8005f28:	898b      	ldrh	r3, [r1, #12]
 8005f2a:	4605      	mov	r5, r0
 8005f2c:	05db      	lsls	r3, r3, #23
 8005f2e:	460c      	mov	r4, r1
 8005f30:	4616      	mov	r6, r2
 8005f32:	d505      	bpl.n	8005f40 <__swrite+0x1e>
 8005f34:	2302      	movs	r3, #2
 8005f36:	2200      	movs	r2, #0
 8005f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3c:	f000 f868 	bl	8006010 <_lseek_r>
 8005f40:	89a3      	ldrh	r3, [r4, #12]
 8005f42:	4632      	mov	r2, r6
 8005f44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f48:	81a3      	strh	r3, [r4, #12]
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	463b      	mov	r3, r7
 8005f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f56:	f000 b817 	b.w	8005f88 <_write_r>

08005f5a <__sseek>:
 8005f5a:	b510      	push	{r4, lr}
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f62:	f000 f855 	bl	8006010 <_lseek_r>
 8005f66:	1c43      	adds	r3, r0, #1
 8005f68:	89a3      	ldrh	r3, [r4, #12]
 8005f6a:	bf15      	itete	ne
 8005f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f76:	81a3      	strheq	r3, [r4, #12]
 8005f78:	bf18      	it	ne
 8005f7a:	81a3      	strhne	r3, [r4, #12]
 8005f7c:	bd10      	pop	{r4, pc}

08005f7e <__sclose>:
 8005f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f82:	f000 b813 	b.w	8005fac <_close_r>
	...

08005f88 <_write_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	4611      	mov	r1, r2
 8005f90:	2200      	movs	r2, #0
 8005f92:	4d05      	ldr	r5, [pc, #20]	; (8005fa8 <_write_r+0x20>)
 8005f94:	602a      	str	r2, [r5, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	f7fb f99e 	bl	80012d8 <_write>
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d102      	bne.n	8005fa6 <_write_r+0x1e>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	b103      	cbz	r3, 8005fa6 <_write_r+0x1e>
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	20000278 	.word	0x20000278

08005fac <_close_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	2300      	movs	r3, #0
 8005fb0:	4d05      	ldr	r5, [pc, #20]	; (8005fc8 <_close_r+0x1c>)
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	602b      	str	r3, [r5, #0]
 8005fb8:	f7fb f9aa 	bl	8001310 <_close>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_close_r+0x1a>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_close_r+0x1a>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	20000278 	.word	0x20000278

08005fcc <_fstat_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	2300      	movs	r3, #0
 8005fd0:	4d06      	ldr	r5, [pc, #24]	; (8005fec <_fstat_r+0x20>)
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	602b      	str	r3, [r5, #0]
 8005fda:	f7fb f9a4 	bl	8001326 <_fstat>
 8005fde:	1c43      	adds	r3, r0, #1
 8005fe0:	d102      	bne.n	8005fe8 <_fstat_r+0x1c>
 8005fe2:	682b      	ldr	r3, [r5, #0]
 8005fe4:	b103      	cbz	r3, 8005fe8 <_fstat_r+0x1c>
 8005fe6:	6023      	str	r3, [r4, #0]
 8005fe8:	bd38      	pop	{r3, r4, r5, pc}
 8005fea:	bf00      	nop
 8005fec:	20000278 	.word	0x20000278

08005ff0 <_isatty_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	4d05      	ldr	r5, [pc, #20]	; (800600c <_isatty_r+0x1c>)
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	4608      	mov	r0, r1
 8005ffa:	602b      	str	r3, [r5, #0]
 8005ffc:	f7fb f9a2 	bl	8001344 <_isatty>
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	d102      	bne.n	800600a <_isatty_r+0x1a>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	b103      	cbz	r3, 800600a <_isatty_r+0x1a>
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	bd38      	pop	{r3, r4, r5, pc}
 800600c:	20000278 	.word	0x20000278

08006010 <_lseek_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4604      	mov	r4, r0
 8006014:	4608      	mov	r0, r1
 8006016:	4611      	mov	r1, r2
 8006018:	2200      	movs	r2, #0
 800601a:	4d05      	ldr	r5, [pc, #20]	; (8006030 <_lseek_r+0x20>)
 800601c:	602a      	str	r2, [r5, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	f7fb f99a 	bl	8001358 <_lseek>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d102      	bne.n	800602e <_lseek_r+0x1e>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	b103      	cbz	r3, 800602e <_lseek_r+0x1e>
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	20000278 	.word	0x20000278

08006034 <_read_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	4604      	mov	r4, r0
 8006038:	4608      	mov	r0, r1
 800603a:	4611      	mov	r1, r2
 800603c:	2200      	movs	r2, #0
 800603e:	4d05      	ldr	r5, [pc, #20]	; (8006054 <_read_r+0x20>)
 8006040:	602a      	str	r2, [r5, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	f7fb f92b 	bl	800129e <_read>
 8006048:	1c43      	adds	r3, r0, #1
 800604a:	d102      	bne.n	8006052 <_read_r+0x1e>
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	b103      	cbz	r3, 8006052 <_read_r+0x1e>
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	bd38      	pop	{r3, r4, r5, pc}
 8006054:	20000278 	.word	0x20000278

08006058 <_init>:
 8006058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605a:	bf00      	nop
 800605c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605e:	bc08      	pop	{r3}
 8006060:	469e      	mov	lr, r3
 8006062:	4770      	bx	lr

08006064 <_fini>:
 8006064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006066:	bf00      	nop
 8006068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800606a:	bc08      	pop	{r3}
 800606c:	469e      	mov	lr, r3
 800606e:	4770      	bx	lr
